"use strict"; class Meetings extends React.Component { constructor(e) { super(e); let t = !0; null == localStorage.getItem("token") && (t = !1), this.state = { loading: !1, loggedin: t, bsstyle: "", message: "", meetingid: "", name: "", purpose: "", showcreateform: !1, meetinglist: [] }, this.loginHandler = this.loginHandler.bind(this), this.handleStartMeeting = this.handleStartMeeting.bind(this), this.handleCreateDiscussionButton = this.handleCreateDiscussionButton.bind(this), this.handleCloseCreateDiscussionButton = this.handleCloseCreateDiscussionButton.bind(this), this.handleGotoMeeting = this.handleGotoMeeting.bind(this), this.handleChange = this.handleChange.bind(this), this.getMeetings = this.getMeetings.bind(this), this.handleShowDiscussions = this.handleShowDiscussions.bind(this) } loginHandler() { null != localStorage.getItem("token") && (this.getMeetings(), this.setState({ loggedin: !0 })) } getMeetings() { this.setState({ loading: !0 }); let e = localStorage.getItem("token"); null === e && (e = ""), fetch("//" + window.location.host + "/api/Discussions", { method: "get", headers: { Authorization: "Bearer " + e } }).then(e => { 401 === e.status ? this.setState({ loading: !1 }) : 200 === e.status ? e.json().then(e => { this.setState({ loading: !1, meetinglist: e }) }) : this.setState({ loading: !1 }) }) } handleShowDiscussions(e) { this.setState({ meetingid: "" }), e && this.getMeetings() } handleGotoMeeting(e, t) { this.setState({ meetingid: e }) } handleCreateDiscussionButton(e) { this.setState({ showcreateform: !this.state.showcreateform }) } handleCloseCreateDiscussionButton(e) { this.setState({ showcreateform: !1 }) } handleStartMeeting(e) { e.preventDefault(), fetch("api/Discussions", { method: "post", body: JSON.stringify({ Name: this.state.name, Purpose: this.state.purpose }), headers: { Authorization: "Bearer " + localStorage.getItem("token"), "Content-Type": "application/json" } }).then(e => { this.setState({ loading: !1 }), 200 === e.status ? e.json().then(e => { this.getMeetings(), this.setState({ showcreateform: !1 }) }) : this.setState({ bsstyle: "danger", message: "Unable to create a meeting. Please try again." }) }) } handleChange(e) { switch (e.target.name) { case "name": this.setState({ name: e.target.value }); break; case "purpose": this.setState({ purpose: e.target.value }) } } componentDidMount() { this.getMeetings() } renderCreateDiscussionForm() { return this.state.showcreateform ? React.createElement("div", { className: "modal d-block", tabIndex: "-1" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title" }, "New Discussion"), React.createElement("button", { type: "button", className: "btn-close", "data-bs-dismiss": "modal", "aria-label": "Close", onClick: this.handleCloseCreateDiscussionButton })), React.createElement("div", { className: "modal-body" }, React.createElement("div", { className: "form-group" }, React.createElement("label", { htmlFor: "meetingnametxt" }, "Name"), React.createElement("input", { type: "text", className: "form-control", id: "meetingnametxt", placeholder: "Friendly name", name: "name", maxLength: "50", onChange: this.handleChange })), React.createElement("div", { className: "form-group" }, React.createElement("label", { htmlFor: "purposetxt" }, "Purpose"), React.createElement("input", { type: "text", className: "form-control", id: "purposetxt", placeholder: "Ellaborate on the purpose of discussion", maxLength: "250", name: "purpose", onChange: this.handleChange }))), React.createElement("div", { className: "modal-footer" }, React.createElement("button", { type: "submit", className: "btn btn-primary my-2 me-2 startmeeting", onClick: this.handleStartMeeting }, "Create"))))) : null } renderMeetingList() { var e = []; for (var t in e.push(React.createElement("div", { className: "col-12 col-sm-3 col-md-3 col-lg-3" }, React.createElement("div", { key: 0, className: "card border-dark mb-1" }, React.createElement("div", { className: "card-header" }, "New Discussion"), React.createElement("div", { className: "card-body text-dark" }, React.createElement("p", { className: "card-text" }, "Invite friends and share ideas.")), React.createElement("div", { className: "card-footer bg-transparent border-success" }, React.createElement("button", { className: "btn btn-sm btn-success", onClick: this.handleCreateDiscussionButton }, "Create"))))), this.state.meetinglist) { var a = this.state.meetinglist[t]; null !== a.name && "" !== a.name && e.push(React.createElement("div", { className: "col-12 col-sm-3 col-md-3 col-lg-3" }, React.createElement("div", { key: a.id, className: "card border-dark mb-1" }, React.createElement("div", { className: "card-header" }, a.name, React.createElement("span", { style: { float: "right" } }, moment(a.createDate.replace(" UTC", "")).fromNow(!0))), React.createElement("div", { className: "card-body text-dark" }, React.createElement("p", { className: "card-text", style: { textOverflow: "ellipsis", overflow: "hidden", whiteSpace: "nowrap" } }, a.purpose)), React.createElement("div", { className: "card-footer bg-transparent border-success" }, React.createElement("a", { className: "btn btn-sm btn-primary", onClick: this.handleGotoMeeting.bind(this, a.id) }, "Go To"), React.createElement("span", { style: { float: "right" }, className: "badge bg-secondary" }, a.numberOfMessages, " Messages"))))) } return React.createElement("div", { className: "row" }, e) } render() { this.state.loading; if (this.state.loggedin) { if ("" != this.state.meetingid) { var e = null; for (var t in this.state.meetinglist) if (this.state.meetinglist[t].id === this.state.meetingid) { e = this.state.meetinglist[t]; break } return React.createElement(React.Fragment, null, React.createElement(Discussion, { discussion: e, handleShowDiscussions: this.handleShowDiscussions })) } { let e = "" !== this.state.message ? React.createElement("div", { className: "fixedBottom " }, React.createElement(MessageStrip, { message: this.state.message, bsstyle: this.state.bsstyle })) : null; return React.createElement(React.Fragment, null, React.createElement(NavMenu, { onLogin: this.loginHandler, registerFormBeginWith: !1, fixed: !1 }), React.createElement("div", { className: "container-fluid" }, React.createElement("main", { role: "main", className: "inner cover meetingsmain mr-5 ml-5" }, this.renderMeetingList(), this.renderCreateDiscussionForm()), React.createElement(HeartBeat, { activity: "1", interval: "3000" }), e)) } } return React.createElement("div", null, React.createElement(NavMenu, { onLogin: this.loginHandler, registerFormBeginWith: !1, fixed: !1 }), React.createElement("main", { role: "main", className: "inner cover meetingsmain m-5" }, React.createElement("h1", { className: "cover-heading" }, "Discussions"), React.createElement("p", { className: "lead" }, "Connect with people for quick status updates, important discussions, future planning or interviews. ", React.createElement("strong", null, "Login to start a discussion."))), React.createElement(HeartBeat, { activity: "1", interval: "20000" })) } }