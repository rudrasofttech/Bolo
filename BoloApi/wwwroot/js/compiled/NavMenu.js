"use strict"; function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }) } else { obj[key] = value } return obj } class NavMenu extends React.Component { constructor(props) { super(props); const token = localStorage.getItem("token"); let loggedin = true; if (localStorage.getItem("token") == null) { loggedin = false } this.toggleNavbar = this.toggleNavbar.bind(this); this.state = { loggedin: loggedin, collapsed: true, registermodal: this.props.register === undefined ? false : this.props.register, showinvite: this.props.onInvite === undefined ? false : true, showleavemeeting: this.props.onLeaveMeeting === undefined ? false : true, onProfileChange: this.props.onProfileChange === undefined ? null : this.props.onProfileChange, registerFormBeginWith: this.props.registerFormBeginWith === undefined ? true : this.props.registerFormBeginWith, membername: localStorage.getItem("membername") !== null ? localStorage.getItem("membername") : '', memberpic: localStorage.getItem("memberpic") !== null ? localStorage.getItem("memberpic") : '', memberid: '', fixed: this.props.fixed === undefined ? true : this.props.fixed, showprofilemodal: false }; if (token !== null) { this.fetchData(token) } this.loginHandler = this.loginHandler.bind(this); this.handleRegister = this.handleRegister.bind(this); this.handleLogin = this.handleLogin.bind(this); this.closeRegisterModal = this.closeRegisterModal.bind(this); this.toggleProfileModal = this.toggleProfileModal.bind(this); this.handleProfileChange = this.handleProfileChange.bind(this) } loginHandler() { if (localStorage.getItem("token") != null) { this.fetchData(localStorage.getItem("token")); this.setState({ loggedin: true, registermodal: false, registerFormBeginWith: false }); if (this.props.onLogin !== undefined) { this.props.onLogin() } } } handleProfileChange() { if (this.state.onProfileChange !== null) { this.state.onProfileChange() } if (localStorage.getItem("token") !== null) { this.fetchData(localStorage.getItem("token")) } } handleRegister(e) { e.preventDefault(); this.setState({ registermodal: true, registerFormBeginWith: true }) } handleLogin(e) { e.preventDefault(); this.setState({ registermodal: true, registerFormBeginWith: false }) } handleLogout(e) { e.preventDefault(); localStorage.removeItem("token"); localStorage.removeItem("membername"); localStorage.removeItem("memberpic"); location.reload() } toggleProfileModal() { this.setState({ showprofilemodal: !this.state.showprofilemodal }) } closeRegisterModal() { this.setState({ registermodal: false }) } fetchData(t) { fetch('//' + window.location.host + '/api/Members/Validate', { method: 'get', headers: { 'Authorization': 'Bearer ' + t } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); localStorage.setItem("membername", ""); localStorage.setItem("memberpic", ""); this.setState({ bsstyle: 'danger', message: "Authorization has been denied for this request.", loggedin: false, loading: false, membername: '' }) } else if (response.status === 200) { response.json().then(data => { localStorage.setItem("membername", data.name); localStorage.setItem("memberpic", data.pic); this.setState({ bsstyle: '', message: "", loggedin: true, loading: false, membername: data.name, memberid: data.id, memberpic: data.pic }) }) } }) } toggleNavbar() { this.setState({ collapsed: !this.state.collapsed }) } static getDerivedStateFromProps(nextProps, prevState) { if (nextProps.register !== prevState.register) { return { registermodal: nextProps.register } } else { return null } } renderRegisterModal() { if (this.state.registermodal) { return React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, React.createElement("button", { type: "button", className: "close pull-right", "data-dismiss": "modal", "aria-label": "Close", onClick: this.closeRegisterModal }, React.createElement("span", { "aria-hidden": "true" }, "X")), React.createElement(RegisterForm, { onLogin: this.loginHandler, beginWithRegister: this.state.registerFormBeginWith }))))) } else { return null } } renderProfileModal() { if (this.state.showprofilemodal) { return React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-fullscreen" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title" }, "Profile Information"), React.createElement("button", { type: "button", className: "btn-close", "data-bs-dismiss": "modal", "aria-label": "Close", onClick: this.toggleProfileModal })), React.createElement(ManageProfile, { onProfileChange: this.handleProfileChange })))) } else { return null } } render() { const token = localStorage.getItem("token"); let linkitems = []; let loggedin = true; let navclassnames = "navbar navbar-expand-lg navbar-dark bg-dark " + (this.state.fixed ? "fixed-top" : ""); if (token === null) { loggedin = false } let profilepic = null; if (loggedin && this.state.memberpic !== "") { profilepic = React.createElement("img", { src: this.state.memberpic, width: "20", height: "20", className: "rounded-circle" }) } if (loggedin) { linkitems.push(React.createElement("li", { className: "nav-item", key: "memberlinkli" }, React.createElement("button", { type: "button", className: "btn btn-link text-light nav-link membernavlink", onClick: this.toggleProfileModal }, profilepic, " ", this.state.membername))); linkitems.push(React.createElement("li", { className: "nav-item", key: "logoutlinkli" }, React.createElement("button", { type: "button", className: "btn btn-link text-light nav-link", onClick: this.handleLogout }, "Logout"))) } else { linkitems.push(React.createElement("li", { className: "nav-item", key: "loginlinkli" }, React.createElement("button", { type: "button", className: "btn btn-link text-light nav-link", onClick: this.handleLogin }, "Login"))); linkitems.push(React.createElement("li", { className: "nav-item", key: "registerlinkli" }, React.createElement("button", { type: "button", className: "btn btn-link text-light nav-link", onClick: this.handleRegister }, "Register"))) } return React.createElement(React.Fragment, null, React.createElement("header", null, React.createElement("nav", { className: navclassnames }, React.createElement("div", { className: "container-fluid" }, React.createElement("a", { className: "navbar-brand", href: "/" }, "Waarta"), React.createElement("button", { className: "navbar-toggler", type: "button", "data-toggle": "collapse", "data-target": "#navbarMainMenu", "aria-controls": "navbarMainMenu", "aria-expanded": "false", "aria-label": "Toggle navigation" }, React.createElement("span", { className: "navbar-toggler-icon" })), React.createElement("div", { className: "collapse navbar-collapse ", id: "navbarMainMenu" }, React.createElement("ul", { className: "nav navbar-nav ml-auto" }, React.createElement("li", { className: "nav-item" }, React.createElement("a", { className: "nav-link text-light", href: "/faq" }, "FAQ")), React.createElement("li", { className: "nav-item" }, React.createElement("a", { className: "nav-link text-light", href: "/privacy" }, "Privacy")), React.createElement("li", { className: "nav-item" }, React.createElement("a", { className: "nav-link text-light", href: "/Chat" }, "Conversations")), React.createElement("li", { className: "nav-item" }, React.createElement("a", { className: "nav-link text-light", href: "/Meetings" }, "Meetings")), linkitems))))), this.renderProfileModal(), this.renderRegisterModal()) } } _defineProperty(NavMenu, "displayName", NavMenu.name);