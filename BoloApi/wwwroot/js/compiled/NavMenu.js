"use strict"; function _defineProperty(e, t, a) { return t in e ? Object.defineProperty(e, t, { value: a, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = a, e } class NavMenu extends React.Component { constructor(e) { super(e); const t = localStorage.getItem("token"); let a = !0; null == localStorage.getItem("token") && (a = !1), this.toggleNavbar = this.toggleNavbar.bind(this), this.state = { loggedin: a, collapsed: !0, registermodal: void 0 !== this.props.register && this.props.register, showinvite: void 0 !== this.props.onInvite, showleavemeeting: void 0 !== this.props.onLeaveMeeting, onProfileChange: void 0 === this.props.onProfileChange ? null : this.props.onProfileChange, registerFormBeginWith: void 0 === this.props.registerFormBeginWith || this.props.registerFormBeginWith, membername: "", memberid: "", fixed: void 0 === this.props.fixed || this.props.fixed, showprofilemodal: !1 }, null !== t && this.fetchData(t), this.loginHandler = this.loginHandler.bind(this), this.handleRegister = this.handleRegister.bind(this), this.handleLogin = this.handleLogin.bind(this), this.closeRegisterModal = this.closeRegisterModal.bind(this), this.toggleProfileModal = this.toggleProfileModal.bind(this), this.handleProfileChange = this.handleProfileChange.bind(this) } loginHandler() { null != localStorage.getItem("token") && (this.fetchData(localStorage.getItem("token")), this.setState({ loggedin: !0, registermodal: !1, registerFormBeginWith: !1 }), void 0 !== this.props.onLogin && this.props.onLogin()) } handleProfileChange() { null !== this.state.onProfileChange && this.state.onProfileChange(), null !== localStorage.getItem("token") && this.fetchData(localStorage.getItem("token")) } handleRegister(e) { e.preventDefault(), this.setState({ registermodal: !0, registerFormBeginWith: !0 }) } handleLogin(e) { e.preventDefault(), this.setState({ registermodal: !0, registerFormBeginWith: !1 }) } handleLogout(e) { e.preventDefault(), localStorage.removeItem("token"), location.reload() } toggleProfileModal() { this.setState({ showprofilemodal: !this.state.showprofilemodal }) } closeRegisterModal() { this.setState({ registermodal: !1 }) } fetchData(e) { fetch("//" + window.location.host + "/api/Members/Validate", { method: "get", headers: { Authorization: "Bearer " + e } }).then(e => { 401 === e.status ? (localStorage.removeItem("token"), this.setState({ bsstyle: "danger", message: "Authorization has been denied for this request.", loggedin: !1, loading: !1 })) : 200 === e.status && e.json().then(e => { this.setState({ bsstyle: "", message: "", loggedin: !0, loading: !1, membername: e.name, memberid: e.id, memberpic: e.pic }) }) }) } toggleNavbar() { this.setState({ collapsed: !this.state.collapsed }) } static getDerivedStateFromProps(e, t) { return e.register !== t.register ? { registermodal: e.register } : null } renderRegisterModal() { return this.state.registermodal ? React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, React.createElement("button", { type: "button", className: "close pull-right", "data-dismiss": "modal", "aria-label": "Close", onClick: this.closeRegisterModal }, React.createElement("span", { "aria-hidden": "true" }, "X")), React.createElement(RegisterForm, { onLogin: this.loginHandler, beginWithRegister: this.state.registerFormBeginWith }))))) : null } renderProfileModal() { return this.state.showprofilemodal ? React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-dialog-scrollable modal-lg" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, React.createElement("button", { type: "button", className: "close float-right", "data-dismiss": "modal", "aria-label": "Close", onClick: this.toggleProfileModal }, React.createElement("span", { "aria-hidden": "true" }, "X")), React.createElement(ManageProfile, { onProfileChange: this.handleProfileChange }))))) : null } render() { const e = localStorage.getItem("token"); let t = [], a = !0, l = "navbar navbar-expand-lg navbar-dark bg-dark " + (this.state.fixed ? "fixed-top" : ""); null === e && (a = !1); let i = null; return a && "" !== this.state.memberpic && (i = React.createElement("img", { src: this.state.memberpic, width: "20", height: "20", className: "rounded-circle" })), a ? (t.push(React.createElement("li", { className: "nav-item", key: "memberlinkli" }, React.createElement("button", { type: "button", className: "btn btn-link text-light nav-link membernavlink", onClick: this.toggleProfileModal }, i, " ", this.state.membername))), t.push(React.createElement("li", { className: "nav-item", key: "logoutlinkli" }, React.createElement("button", { type: "button", className: "btn btn-link text-light nav-link", onClick: this.handleLogout }, "Logout")))) : (t.push(React.createElement("li", { className: "nav-item", key: "loginlinkli" }, React.createElement("button", { type: "button", className: "btn btn-link text-light nav-link", onClick: this.handleLogin }, "Login"))), t.push(React.createElement("li", { className: "nav-item", key: "registerlinkli" }, React.createElement("button", { type: "button", className: "btn btn-link text-light nav-link", onClick: this.handleRegister }, "Register")))), React.createElement(React.Fragment, null, React.createElement("header", null, React.createElement("nav", { className: l }, React.createElement("div", { className: "container-fluid" }, React.createElement("a", { className: "navbar-brand", href: "/" }, "Waarta"), React.createElement("button", { className: "navbar-toggler", type: "button", "data-toggle": "collapse", "data-target": "#navbarMainMenu", "aria-controls": "navbarMainMenu", "aria-expanded": "false", "aria-label": "Toggle navigation" }, React.createElement("span", { className: "navbar-toggler-icon" })), React.createElement("div", { className: "collapse navbar-collapse ", id: "navbarMainMenu" }, React.createElement("ul", { className: "nav navbar-nav ml-auto" }, React.createElement("li", { className: "nav-item" }, React.createElement("a", { className: "nav-link text-light", href: "/faq" }, "FAQ")), React.createElement("li", { className: "nav-item" }, React.createElement("a", { className: "nav-link text-light", href: "/privacy" }, "Privacy")), React.createElement("li", { className: "nav-item" }, React.createElement("a", { className: "nav-link text-light", href: "/Chat" }, "Conversations")), React.createElement("li", { className: "nav-item" }, React.createElement("a", { className: "nav-link text-light", href: "/Meetings" }, "Meetings")), t))))), this.renderProfileModal(), this.renderRegisterModal()) } } _defineProperty(NavMenu, "displayName", NavMenu.name);