"use strict"; class NavMenu extends React.Component { constructor(e) { super(e); localStorage.getItem("token"); let t = !0; null == localStorage.getItem("token") && (t = !1), this.toggleNavbar = this.toggleNavbar.bind(this), this.state = { loggedin: t, collapsed: !0, registermodal: void 0 !== this.props.register && this.props.register, showinvite: void 0 !== this.props.onInvite, showleavemeeting: void 0 !== this.props.onLeaveMeeting, onProfileChange: void 0 === this.props.onProfileChange ? null : this.props.onProfileChange, registerFormBeginWith: void 0 === this.props.registerFormBeginWith || this.props.registerFormBeginWith, user: null !== localStorage.getItem("user") ? JSON.parse(localStorage.getItem("membername")) : {}, memberid: "", fixed: void 0 === this.props.fixed || this.props.fixed, searchtext: "", showwebsearchresult: !1, websearchresult: [], showprofilemodal: !1 }, this.loginHandler = this.loginHandler.bind(this), this.handleRegister = this.handleRegister.bind(this), this.handleLogin = this.handleLogin.bind(this), this.closeRegisterModal = this.closeRegisterModal.bind(this), this.handleSearchSubmit = this.handleSearchSubmit.bind(this), this.toggleProfileModal = this.toggleProfileModal.bind(this), this.handleProfileChange = this.handleProfileChange.bind(this), this.handleChange = this.handleChange.bind(this), this.closeSearchResult = this.closeSearchResult.bind(this) } loginHandler() { if (null != localStorage.getItem("token")) { const { setToken: e, setData: t } = this.context; t(JSON.parse(localStorage.getItem("user"))), e(localStorage.getItem("token")), this.setState({ loggedin: !0, registermodal: !1, registerFormBeginWith: !1 }), void 0 !== this.props.onLogin && this.props.onLogin() } } handleChange(e) { switch (e.target.name) { case "searchtext": this.setState({ searchtext: e.target.value }) } } handleSearchSubmit(e) { if (e.preventDefault(), "" !== this.state.searchtext) { let e = ""; null != localStorage.getItem("token") && (e = localStorage.getItem("token")), fetch("//" + window.location.host + "/api/search/?q=" + this.state.searchtext, { method: "get", headers: { Authorization: "Bearer " + e } }).then(e => { 200 === e.status && e.json().then(e => { this.setState({ showwebsearchresult: !0, websearchresult: e }) }) }) } } closeSearchResult() { this.setState({ showwebsearchresult: !1, searchtext: "", websearchresult: [] }) } handleProfileChange() { null !== this.state.onProfileChange && this.state.onProfileChange() } handleRegister(e) { e.preventDefault(), this.setState({ registermodal: !0, registerFormBeginWith: !0 }) } handleLogin(e) { e.preventDefault(), this.setState({ registermodal: !0, registerFormBeginWith: !1 }) } handleLogout(e) { e.preventDefault(), localStorage.clear(), location.reload() } toggleProfileModal() { this.setState({ showprofilemodal: !this.state.showprofilemodal }) } closeRegisterModal() { this.setState({ registermodal: !1 }) } toggleNavbar() { this.setState({ collapsed: !this.state.collapsed }) } static getDerivedStateFromProps(e, t) { return e.register !== t.register ? { registermodal: e.register } : null } renderRegisterModal() { return this.state.registermodal ? React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, React.createElement("button", { type: "button", className: "btn-close float-end", "data-bs-dismiss": "modal", "aria-label": "Close", onClick: this.closeRegisterModal }), React.createElement(RegisterForm, { onLogin: this.loginHandler, beginWithRegister: this.state.registerFormBeginWith }))))) : null } renderProfileModal() { return this.state.showprofilemodal ? React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-fullscreen" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title" }, "Profile Information"), React.createElement("button", { type: "button", className: "btn-close", "data-bs-dismiss": "modal", "aria-label": "Close", onClick: this.toggleProfileModal })), React.createElement(ManageProfile, { onProfileChange: this.handleProfileChange })))) : null } renderSearchResult() { if (this.state.showwebsearchresult) { let t = []; for (var e = 0; e < this.state.websearchresult.length; e++) { let a = this.state.websearchresult[e]; "" === a.text && (a.text = a.url), t.push(React.createElement("li", { className: "list-group-item" }, React.createElement("a", { href: a.url, target: "_blank" }, a.text), React.createElement("p", { className: "d-block" }, a.url))) } return React.createElement("div", { className: "p-2 bg-light", style: { width: "100%", position: "absolute", zIndex: 1e5 } }, React.createElement("ul", { class: "list-group" }, t), React.createElement("button", { className: "btn btn-sm m-1 btn-primary float-end", onClick: this.closeSearchResult }, "Clear")) } return null } render() { let e = [], t = !0; null === localStorage.getItem("token") && (t = !1); let a = null; return t && "" !== this.state.memberpic && (a = React.createElement("img", { src: this.state.user.pic, width: "20", height: "20", className: "rounded-circle" })), t ? (e.push(React.createElement("button", { key: "memberlinkli", type: "button", className: "btn btn-dark me-2 membernavlink", onClick: this.toggleProfileModal }, a, " ", this.state.user.name)), e.push(React.createElement("button", { key: "logoutlinkli", type: "button", className: "btn btn-dark", title: "Sign out", onClick: this.handleLogout }, React.createElement("i", { className: "bi bi-power" })))) : (e.push(React.createElement("button", { key: "loginlinkli", type: "button", className: "btn btn-dark me-2", onClick: this.handleLogin }, "Login")), e.push(React.createElement("button", { key: "registerlinkli", type: "button", className: "btn btn-dark", onClick: this.handleRegister }, "Register"))), React.createElement(React.Fragment, null, React.createElement("div", { className: "container-fluid bg-dark" }, React.createElement("header", { className: "d-flex flex-wrap align-items-center justify-content-center justify-content-md-between py-1 " }, React.createElement("a", { href: "/", className: "d-flex align-items-center col-md-3 mb-2 mb-md-0 text-white text-decoration-none" }, "Waarta"), React.createElement("ul", { className: "nav col-12 col-md-auto mb-2 justify-content-center mb-md-0" }, React.createElement("li", null, React.createElement("a", { className: "nav-link px-2 text-white", href: "/Chat", title: "Chat" }, React.createElement("i", { className: "bi bi-chat-dots" }), " Chat")), React.createElement("li", null, React.createElement("a", { className: "nav-link px-2 text-white", href: "/Discussions", title: "Discussion" }, React.createElement("i", { className: "bi bi-people-fill" }), " Discussion")), React.createElement("li", { style: { display: "none" } }, React.createElement("form", { className: "d-flex ps-2", onSubmit: this.handleSearchSubmit }, React.createElement("input", { className: "form-control", style: { width: "500px", borderRadius: "20px" }, type: "search", placeholder: "Search the web...", "aria-label": "Search", name: "searchtext", onChange: this.handleChange, value: this.state.searchtext }), React.createElement("button", { className: "btn text-white", type: "submit" }, React.createElement("i", { className: "bi bi-search" }))))), React.createElement("div", { className: "col-md-3 text-end" }, e, React.createElement("a", { className: "px-2 text-white", href: "/faq", title: "Frequently Asked Questions" }, React.createElement("i", { className: "bi bi-patch-question" })), React.createElement("a", { className: "px-2 text-white", href: "/privacy", title: "Privacy" }, React.createElement("i", { className: "bi bi-eye-slash-fill" }))))), this.renderSearchResult(), this.renderProfileModal(), this.renderRegisterModal()) } } _defineProperty(NavMenu, "displayName", NavMenu.name);