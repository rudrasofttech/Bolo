"use strict"; class BlockContact extends React.Component { constructor(t) { super(t); let e = !0; null === localStorage.getItem("token") && (e = !1), this.state = { loading: !1, loggedin: e, myself: this.props.myself, person: this.props.person, bsstyle: "", message: "", token: null === localStorage.getItem("token") ? "" : localStorage.getItem("token"), blocked: null }, this.fetchContactDetail = this.fetchContactDetail.bind(this), this.handleUnblockClick = this.handleUnblockClick.bind(this), this.handleBlockClick = this.handleBlockClick.bind(this), this.setContactRelation = this.setContactRelation.bind(this) } componentDidMount() { this.fetchContactDetail() } handleUnblockClick() { this.setContactRelation(BoloRelationType.Confirmed) } handleBlockClick() { this.setContactRelation(BoloRelationType.Blocked) } setContactRelation(t) { fetch("//" + window.location.host + "/api/Contacts/ChangeRelation/" + this.state.person.id + "?t=" + t, { method: "get", headers: { Authorization: "Bearer " + this.state.token } }).then(t => { 200 === t.status && t.json().then(t => { t.boloRelation === BoloRelationType.Blocked ? this.setState({ blocked: !0 }) : this.setState({ blocked: !1 }); var e = null !== localStorage.getItem("contacts") ? new Map(JSON.parse(localStorage.getItem("contacts"))) : new Map; void 0 !== e.get(this.state.person.id) && (e.get(this.state.person.id).boloRelation = t.boloRelation, localStorage.setItem("contacts", JSON.stringify(Array.from(e)))) }) }) } fetchContactDetail() { try { fetch("//" + window.location.host + "/api/Contacts/" + this.state.person.id, { method: "get", headers: { Authorization: "Bearer " + this.state.token } }).then(t => { 200 === t.status && t.json().then(t => { t.boloRelation === BoloRelationType.Blocked ? this.setState({ blocked: !0 }) : t.boloRelation === BoloRelationType.Confirmed ? this.setState({ blocked: !1 }) : this.setState({ blocked: null }), void 0 !== this.props.onRelationshipChange && this.props.onRelationshipChange(t.boloRelation) }) }) } catch (t) { void 0 !== this.contactlist.get(this.state.person.id) && this.setState({ blocked: this.contactlist.get(this.state.person.id).boloRelation === BoloRelationType.Blocked }) } } render() { return !0 === this.state.blocked ? React.createElement("button", { className: "btn mr-1 ml-1 btn-danger", onClick: this.handleUnblockClick }, "Unblock") : !1 === this.state.blocked ? React.createElement("button", { className: "btn mr-1 ml-1 btn-secondary", onClick: this.handleBlockClick }, "Block") : null } }