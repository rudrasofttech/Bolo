"use strict"; class Conversation extends React.Component { constructor(e) { super(e); let t = !0; null === localStorage.getItem("token") && (t = !1), this.state = { loading: !1, loggedin: t, myself: null, bsstyle: "", message: "", selectedperson: null, token: null === localStorage.getItem("token") ? "" : localStorage.getItem("token"), searchtext: "", dummy: new Date, showsearch: !0, showprofilemodal: !1, profiletoshow: null }, this.hubConnection = null, this.contactupdateinterval = null, this.contactlist = new Map, this.loginHandler = this.loginHandler.bind(this), this.handleProfileSelect = this.handleProfileSelect.bind(this), this.validate = this.validate.bind(this), this.handleChange = this.handleChange.bind(this), this.handleSearchSubmit = this.handleSearchSubmit.bind(this), this.handleReceivedMessage = this.handleReceivedMessage.bind(this), this.fetchContacts = this.fetchContacts.bind(this), this.handleShowSearch = this.handleShowSearch.bind(this), this.checkContactPulse = this.checkContactPulse.bind(this), this.search = this.search.bind(this), this.startHub = this.startHub.bind(this), this.handleProfileModalClose = this.handleProfileModalClose.bind(this), this.handleProfileItemClick = this.handleProfileItemClick.bind(this), this.setMessageStatus = this.setMessageStatus.bind(this), this.messageStatusEnum = { Pending: 0, Sent: 1, Received: 2, Seen: 3 } } componentDidMount() { this.contactlist = null !== localStorage.getItem("contacts") && this.state.loggedin ? new Map(JSON.parse(localStorage.getItem("contacts"))) : new Map, null != localStorage.getItem("token") && this.validate(localStorage.getItem("token")) } componentWillUnmount() { null !== this.contactupdateinterval && clearInterval(this.contactupdateinterval) } loginHandler() { null != localStorage.getItem("token") && this.validate(localStorage.getItem("token")) } startHub() { this.hubConnection = (new signalR.HubConnectionBuilder).withUrl("/personchathub", { accessTokenFactory: () => this.state.token }).withAutomaticReconnect().build(), this.hubConnection.start().then(() => { console.log("Hub Connection started!") }).catch(e => console.log("Error while establishing connection :(")), this.hubConnection.on("ReceiveTextMessage", (e, t, a, s) => { var n = { id: s, sender: e, text: t, timestamp: a, status: 2 }; this.handleReceivedMessage(n) }), this.hubConnection.on("ContactUpdated", e => { if (void 0 !== this.contactlist.get(e.id)) { let t = this.contactlist.get(e.id).person; t.name === e.name && t.activity === e.activity && t.city === e.city && t.state === e.state && t.country === e.country && t.pic === e.pic || (this.contactlist.get(e.id).person = e, this.setState({ dummy: Date.now() })) } }), this.hubConnection.on("ContactSaved", e => { void 0 === this.contactlist.get(e.id) && (this.contactlist.set(e.person.id, e), this.setState({ dummy: Date.now() })) }) } compare_contact(e, t) { return e[1].unseenMessageCount > t[1].unseenMessageCount ? -1 : 5 !== e[1].person.activity && 5 === t[1].person.activity ? -1 : 5 === e[1].person.activity && 5 !== t[1].person.activity ? 1 : 0 } validate(e) { this.setState({ loading: !0 }), fetch("//" + window.location.host + "/api/Members/Validate", { method: "get", headers: { Authorization: "Bearer " + e } }).then(e => { 401 === e.status ? (localStorage.removeItem("token"), this.setState({ loggedin: !1, loading: !1, token: null })) : 200 === e.status && (e.json().then(e => { this.setState({ loggedin: !0, loading: !1, myself: e }) }), this.fetchContacts(), this.contactupdateinterval = setInterval(this.checkContactPulse, 5e3), null === this.hubConnection && this.startHub()) }) } checkContactPulse() { for (const [t, a] of this.contactlist.entries()) { var e = new Date(a.lastPulse); e.setSeconds(e.getSeconds() + 5), e < Date.now() && (a.activity = 5) } } fetchContacts() { fetch("//" + window.location.host + "/api/Contacts/Member", { method: "get", headers: { Authorization: "Bearer " + localStorage.getItem("token") } }).then(e => { 200 === e.status ? e.json().then(e => { for (var t in e) if (void 0 === this.contactlist.get(e[t].person.id) ? this.contactlist.set(e[t].person.id.toLowerCase(), e[t]) : (this.contactlist.get(e[t].person.id).recentMessage = e[t].recentMessage, this.contactlist.get(e[t].person.id).recentMessageDate = e[t].recentMessageDate, this.contactlist.get(e[t].person.id).person = e[t].person), e[t].messagesOnServer.length > 0) { var a = null !== localStorage.getItem(e[t].person.id) ? new Map(JSON.parse(localStorage.getItem(e[t].person.id))) : new Map; for (var s in e[t].messagesOnServer) if (void 0 === a.get(e[t].messagesOnServer[s].id)) { var n = { id: e[t].messagesOnServer[s].id, sender: e[t].messagesOnServer[s].sentBy.id, text: e[t].messagesOnServer[s].message, timestamp: e[t].messagesOnServer[s].sentDate, status: 2 }; a.set(n.id, n), this.setMessageStatus(n.id, "SetReceived"), this.contactlist.get(e[t].person.id).recentMessageDate = n.timestamp, void 0 !== this.contactlist.get(n.sender.toLowerCase()).unseenMessageCount ? this.contactlist.get(n.sender.toLowerCase()).unseenMessageCount += 1 : this.contactlist.get(n.sender.toLowerCase()).unseenMessageCount = 1 } localStorage.setItem(e[t].person.id, JSON.stringify(Array.from(a))) } localStorage.setItem("contacts", JSON.stringify(Array.from(this.contactlist))), this.setState({ loading: !1, dummy: new Date }) }) : this.setState({ loading: !1, message: "Unable to search.", bsstyle: "danger" }) }) } search() { this.setState({ loading: !0 }), fetch("//" + window.location.host + "/api/Members/search?s=" + this.state.searchtext, { method: "get", headers: { Authorization: "Bearer " + localStorage.getItem("token") } }).then(e => { 200 === e.status ? e.json().then(e => { for (var t in this.contactlist = new Map, e) this.contactlist.set(e[t].id, { id: 0, person: e[t], createDate: null, boloRelation: 3, recentMessage: "", recentMessageDate: "" }); this.setState({ loading: !1, dummy: new Date }) }) : this.setState({ loading: !1, message: "Unable to search.", bsstyle: "danger" }) }) } setMessageStatus(e, t) { fetch("//" + window.location.host + "/api/ChatMessages/" + t + "?mid=" + e, { method: "get", headers: { Authorization: "Bearer " + this.state.token } }) } handleShowSearch(e) { e && (this.contactlist = null !== localStorage.getItem("contacts") && this.state.loggedin ? new Map(JSON.parse(localStorage.getItem("contacts"))) : new Map), this.setState({ showsearch: e }) } handleProfileSelect(e) { this.setState({ selectedperson: e }) } handleProfileModalClose() { this.setState({ profiletoshow: null, showprofilemodal: !1 }) } handleProfileItemClick(e) { null !== e && void 0 !== this.contactlist.get(e) && this.setState({ profiletoshow: this.contactlist.get(e).person, showprofilemodal: !0 }) } handleResultItemClick(e) { this.state.loggedin ? null !== e && void 0 !== this.contactlist.get(e) && this.setState({ selectedperson: this.contactlist.get(e).person, showsearch: !1, showprofilemodal: !1 }) : alert("Please log in to gain full access.") } handleSearchSubmit(e) { e.preventDefault(), this.search() } handleReceivedMessage(e) { let t = localStorage.getItem(e.sender.toLowerCase()), a = null; (a = null !== t ? new Map(JSON.parse(t)) : new Map).set(e.id, e), console.log(e), localStorage.setItem(e.sender.toLowerCase(), JSON.stringify(Array.from(a.entries()))), this.setMessageStatus(e.id, "SetReceived"), void 0 !== this.contactlist.get(e.sender.toLowerCase()) && (this.contactlist.get(e.sender.toLowerCase()).recentMessageDate = e.timestamp, void 0 !== this.contactlist.get(e.sender.toLowerCase()).unseenMessageCount ? this.contactlist.get(e.sender.toLowerCase()).unseenMessageCount += 1 : this.contactlist.get(e.sender.toLowerCase()).unseenMessageCount = 1, localStorage.setItem("contacts", JSON.stringify(Array.from(this.contactlist))), this.setState({ dummy: Date.now() })) } handleChange(e) { switch (e.target.name) { case "searchtext": "" === e.target.value.trim() && (this.contactlist = null !== localStorage.getItem("contacts") && this.state.loggedin ? new Map(JSON.parse(localStorage.getItem("contacts"))) : new Map), this.setState({ searchtext: e.target.value }) } } renderPeopleList() { const e = []; var t = new Map([...this.contactlist.entries()].sort(this.compare_contact)); for (const [a, s] of t.entries()) { let t = s.person; if (null === this.state.myself || t.id !== this.state.myself.id) { let n = null; "" !== t.thoughtStatus && (n = React.createElement("p", { className: "card-text" }, React.createElement("small", null, t.thoughtStatus))); let o = React.createElement("span", { className: "offline" }); 5 !== t.activity && (o = React.createElement("span", { className: "online" })); let l = s.unseenMessageCount > 0 ? React.createElement("span", { className: "badge badge-primary" }, s.unseenMessageCount) : null, i = "" !== t.pic ? React.createElement("img", { src: t.pic, className: "card-img-top", alt: "" }) : React.createElement("img", { src: "/images/nopic.jpg", className: "card-img-top", alt: "" }); e.push(React.createElement("div", { className: "col-6 col-sm-3 col-md-3 col-lg-2", key: a }, React.createElement("div", { className: "card mt-1", style: { width: "100%", cursor: "pointer" }, onClick: () => this.handleResultItemClick(t.id) }, React.createElement("div", { className: "btn-group", style: { position: "absolute", right: "5px", top: "5px" }, onClick: e => e.stopPropagation() }, React.createElement("button", { className: "btn btn-light dropdown-toggle", type: "button", id: "dropdownMenuButton", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" }), React.createElement("div", { className: "dropdown-menu dropdown-menu-right ", "aria-labelledby": "dropdownMenuButton" }, React.createElement("a", { className: "dropdown-item", href: "#", onClick: () => this.handleProfileItemClick(t.id) }, "Profile"), React.createElement("a", { className: "dropdown-item", href: "#", onClick: () => this.handleResultItemClick(t.id) }, "Chat"))), i, React.createElement("div", { className: "card-body", style: { position: "absolute", backgroundColor: "rgba(0, 0,0,0.3)", width: "100%", bottom: "0px", color: "#fff", padding: "0.25rem" } }, React.createElement("h6", { className: "card-title", style: { marginBottom: "0.3rem" } }, o, " ", t.name, " ", l, " "), React.createElement("p", { className: "card-text mb-0" }, React.createElement("small", null, t.city, " ", t.state, " ", t.country)), n)))) } } return e.length > 0 ? React.createElement("div", { className: "row searchresult" }, e) : React.createElement("div", { className: "row justify-content-center" }, React.createElement("div", { className: "col-12" }, React.createElement("div", { className: "alert alert-light", role: "alert" }, "No profiles to show here.", React.createElement("br", null), "Search for people based on their name, location, profession or gender etc. Here are some examples of search phrases.", React.createElement("ul", null, React.createElement("li", null, "Raj Kiran Singh"), React.createElement("li", null, "Raj From India"), React.createElement("li", null, "Software Developer in Noida"), React.createElement("li", null, "Women in India"), React.createElement("li", null, "Men in India"), React.createElement("li", null, "Mumbai Maharashtra"), React.createElement("li", null, "Delhi Mumbai Kolkatta"))))) } render() { let e = this.state.loading ? React.createElement("div", { className: "progress", style: { height: "5px" } }, React.createElement("div", { className: "progress-bar progress-bar-striped progress-bar-animated", role: "progressbar", "aria-valuenow": "75", "aria-valuemin": "0", "aria-valuemax": "100", style: { width: "100%" } })) : null, t = null; t = null === this.state.selectedperson || this.state.showsearch ? null !== this.state.profiletoshow && this.state.showprofilemodal ? React.createElement("div", { className: "modal d-block", tabIndex: "-1", role: "dialog" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, React.createElement("button", { type: "button", className: "close float-right", "data-dismiss": "modal", "aria-label": "Close", onClick: this.handleProfileModalClose }, React.createElement("span", { "aria-hidden": "true" }, "×")), React.createElement(ViewProfile, { profile: this.state.profiletoshow }))))) : React.createElement(HeartBeat, { activity: "1", interval: "3000" }) : React.createElement("div", { className: "col-12 p-0" }, React.createElement(PersonChat, { person: this.state.selectedperson, myself: this.state.myself, receivedMessage: this.handleReceivedMessage, handleShowSearch: this.handleShowSearch })); let a = null; return this.state.showsearch && (a = React.createElement("div", { className: "col-12 searchcont" }, React.createElement("form", { onSubmit: this.handleSearchSubmit, className: "searchform1 form-inline mt-2 mb-2" }, React.createElement("input", { type: "search", className: "form-control rounded-0", name: "searchtext", id: "search-input", onChange: this.handleChange, title: "Find People by Name, Location, Profession etc.", placeholder: "Find People by Name, Location, Profession etc", "aria-label": "Search for...", autoComplete: "off", spellCheck: "false", style: { width: "calc(100% - 50px)" } }), React.createElement("button", { type: "submit", className: "btn btn-light" }, React.createElement("img", { src: "/icons/search.svg", alt: "", width: "24", height: "24", title: "Search People" }))), this.renderPeopleList())), React.createElement(React.Fragment, null, React.createElement(NavMenu, { onLogin: this.loginHandler, registerFormBeginWith: !1, fixed: !1 }), React.createElement("div", { className: "container-fluid" }, React.createElement("div", { className: "row" }, a, e, t))) } }