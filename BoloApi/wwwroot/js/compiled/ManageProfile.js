"use strict"; function _defineProperty(e, a, t) { return a in e ? Object.defineProperty(e, a, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[a] = t, e } class ManageProfile extends React.Component { constructor(e) { super(e), _defineProperty(this, "handleFile", e => { const a = new FileReader; a.onloadend = (() => { this.setState({ src: a.result }) }), a.readAsDataURL(e.target.files[0]) }), _defineProperty(this, "onImageLoaded", e => { this.imageRef = e }), _defineProperty(this, "onCropChange", e => { this.setState({ crop: e }) }), _defineProperty(this, "onCropComplete", e => { if (this.imageRef && e.width && e.height) { const a = this.getCroppedImg(this.imageRef, e); this.setState({ croppedImageUrl: a }) } }); let a = !0; null === localStorage.getItem("token") && (a = !1), this.state = { loading: !1, loggedin: a, myself: null, bsstyle: "", message: "", token: null == localStorage.getItem("token") ? "" : localStorage.getItem("token"), onProfileChange: void 0 === this.props.onProfileChange ? null : this.props.onProfileChange, showProfilePicModal: !1, src: null, crop: { unit: "px", x: 20, y: 20, width: 350, height: 350 }, croppedImageUrl: null }, this.handleChange = this.handleChange.bind(this), this.saveData = this.saveData.bind(this), this.toggleProfilePicModal = this.toggleProfilePicModal.bind(this), this.saveProfilePic = this.saveProfilePic.bind(this), this.removeProfilePicture = this.removeProfilePicture.bind(this) } componentDidMount() { null !== localStorage.getItem("token") && this.validate(localStorage.getItem("token")) } handleChange(e) { let a = this.state.myself; switch (e.target.name) { case "bio": a.bio = e.target.value; break; case "name": "" === e.target.value.trim() ? (alert("Name is required."), e.target.focus()) : a.name = e.target.value; break; case "birthYear": a.birthYear = e.target.value; break; case "gender": a.gender = e.target.value; break; case "visibility": a.visibility = e.target.value; break; case "country": a.country = e.target.value; break; case "state": a.state = e.target.value; break; case "city": a.city = e.target.value; break; case "thoughtstatus": a.thoughtStatus = e.target.value }this.setState({ myself: a }) } toggleProfilePicModal() { this.setState({ showProfilePicModal: !this.state.showProfilePicModal }) } removeProfilePicture(e) { this.setState({ loading: !0 }); const a = new FormData; a.set("pic", ""), fetch("//" + window.location.host + "/api/Members/savepic", { method: "post", body: a, headers: { Authorization: "Bearer " + localStorage.getItem("token") } }).then(e => { 401 === e.status ? (localStorage.removeItem("token"), this.setState({ loggedin: !1, loading: !1 })) : 200 === e.status ? (this.setState({ loading: !1, showProfilePicModal: !1 }), null !== localStorage.getItem("token") && this.validate(localStorage.getItem("token")), null !== this.state.onProfileChange && this.state.onProfileChange()) : this.setState({ loading: !1, message: "Unable to save profile pic", bsstyle: "danger" }) }) } saveProfilePic() { if (null !== this.state.croppedImageUrl) { this.setState({ loading: !0 }); const e = new FormData; e.set("pic", this.state.croppedImageUrl), fetch("//" + window.location.host + "/api/Members/savepic", { method: "post", body: e, headers: { Authorization: "Bearer " + localStorage.getItem("token") } }).then(e => { 401 === e.status ? (localStorage.removeItem("token"), this.setState({ loggedin: !1, loading: !1 })) : 200 === e.status ? (this.setState({ loading: !1, showProfilePicModal: !1 }), null !== localStorage.getItem("token") && this.validate(localStorage.getItem("token")), null !== this.state.onProfileChange && this.state.onProfileChange()) : this.setState({ loading: !1, message: "Unable to save profile pic", bsstyle: "danger" }) }) } } saveData(e) { let a = e.target.name, t = e.target.value; if (this.setState({ loading: !0 }), "bio" !== a) fetch("//" + window.location.host + "/api/Members/Save" + a + "?d=" + t, { method: "get", headers: { Authorization: "Bearer " + localStorage.getItem("token") } }).then(e => { 401 === e.status ? (localStorage.removeItem("token"), this.setState({ loggedin: !1, loading: !1 })) : 200 === e.status ? (this.setState({ loading: !1 }), null !== localStorage.getItem("token") && this.validate(localStorage.getItem("token")), null !== this.state.onProfileChange && this.state.onProfileChange()) : this.setState({ loading: !1, message: "Unable to save data", bsstyle: "danger" }) }); else { const e = new FormData; e.set("d", t), fetch("//" + window.location.host + "/api/Members/savebio", { method: "post", body: e, headers: { Authorization: "Bearer " + localStorage.getItem("token") } }).then(e => { 401 === e.status ? (localStorage.removeItem("token"), this.setState({ loggedin: !1, loading: !1 })) : 200 === e.status ? (this.setState({ loading: !1 }), null !== this.state.onProfileChange && this.state.onProfileChange()) : this.setState({ loading: !1, message: "Unable to save data", bsstyle: "danger" }) }) } } validate(e) { this.setState({ loading: !0 }), fetch("//" + window.location.host + "/api/Members/Validate", { method: "get", headers: { Authorization: "Bearer " + e } }).then(e => { 401 === e.status ? (localStorage.removeItem("token"), this.setState({ loggedin: !1, loading: !1 })) : 200 === e.status && e.json().then(e => { this.setState({ loggedin: !0, loading: !1, myself: e }) }) }) } getCroppedImg(e, a) { const t = document.createElement("canvas"), n = e.naturalWidth / e.width, l = e.naturalHeight / e.height; return t.width = a.width, t.height = a.height, t.getContext("2d").drawImage(e, a.x * n, a.y * l, a.width * n, a.height * l, 0, 0, a.width, a.height), t.toDataURL() } renderUSStates() { return React.createElement("select", { name: "state", id: "state", className: "form-control", value: this.state.myself.state, onChange: this.handleChange, onBlur: this.saveData }, React.createElement("option", { value: "" }), React.createElement("option", { value: "Alabama" }, "Alabama"), React.createElement("option", { value: "Alaska" }, "Alaska"), React.createElement("option", { value: "Arizona" }, "Arizona"), React.createElement("option", { value: "Arkansas" }, "Arkansas"), React.createElement("option", { value: "California" }, "California"), React.createElement("option", { value: "Colorado" }, "Colorado"), React.createElement("option", { value: "Connecticut" }, "Connecticut"), React.createElement("option", { value: "Delaware" }, "Delaware"), React.createElement("option", { value: "District of Columbia" }, "District of Columbia"), React.createElement("option", { value: "Florida" }, "Florida"), React.createElement("option", { value: "Georgia" }, "Georgia"), React.createElement("option", { value: "Guam" }, "Guam"), React.createElement("option", { value: "Hawaii" }, "Hawaii"), React.createElement("option", { value: "Idaho" }, "Idaho"), React.createElement("option", { value: "Illinois" }, "Illinois"), React.createElement("option", { value: "Indiana" }, "Indiana"), React.createElement("option", { value: "Iowa" }, "Iowa"), React.createElement("option", { value: "Kansas" }, "Kansas"), React.createElement("option", { value: "Kentucky" }, "Kentucky"), React.createElement("option", { value: "Louisiana" }, "Louisiana"), React.createElement("option", { value: "Maine" }, "Maine"), React.createElement("option", { value: "Maryland" }, "Maryland"), React.createElement("option", { value: "Massachusetts" }, "Massachusetts"), React.createElement("option", { value: "Michigan" }, "Michigan"), React.createElement("option", { value: "Minnesota" }, "Minnesota"), React.createElement("option", { value: "Mississippi" }, "Mississippi"), React.createElement("option", { value: "Missouri" }, "Missouri"), React.createElement("option", { value: "Montana" }, "Montana"), React.createElement("option", { value: "Nebraska" }, "Nebraska"), React.createElement("option", { value: "Nevada" }, "Nevada"), React.createElement("option", { value: "New Hampshire" }, "New Hampshire"), React.createElement("option", { value: "New Jersey" }, "New Jersey"), React.createElement("option", { value: "New Mexico" }, "New Mexico"), React.createElement("option", { value: "New York" }, "New York"), React.createElement("option", { value: "North Carolina" }, "North Carolina"), React.createElement("option", { value: "North Dakota" }, "North Dakota"), React.createElement("option", { value: "Northern Marianas Islands" }, "Northern Marianas Islands"), React.createElement("option", { value: "Ohio" }, "Ohio"), React.createElement("option", { value: "Oklahoma" }, "Oklahoma"), React.createElement("option", { value: "Oregon" }, "Oregon"), React.createElement("option", { value: "Pennsylvania" }, "Pennsylvania"), React.createElement("option", { value: "Puerto Rico" }, "Puerto Rico"), React.createElement("option", { value: "Rhode Island" }, "Rhode Island"), React.createElement("option", { value: "South Carolina" }, "South Carolina"), React.createElement("option", { value: "South Dakota" }, "South Dakota"), React.createElement("option", { value: "Tennessee" }, "Tennessee"), React.createElement("option", { value: "Texas" }, "Texas"), React.createElement("option", { value: "Utah" }, "Utah"), React.createElement("option", { value: "Vermont" }, "Vermont"), React.createElement("option", { value: "Virginia" }, "Virginia"), React.createElement("option", { value: "Virgin Islands" }, "Virgin Islands"), React.createElement("option", { value: "Washington" }, "Washington"), React.createElement("option", { value: "West Virginia" }, "West Virginia"), React.createElement("option", { value: "Wisconsin" }, "Wisconsin"), React.createElement("option", { value: "Wyoming" }, "Wyoming")) } renderIndianStates() { return React.createElement("select", { name: "state", id: "state", className: "form-control", value: this.state.myself.state, onChange: this.handleChange, onBlur: this.saveData }, React.createElement("option", { value: "Andhra Pradesh" }, "Andhra Pradesh"), React.createElement("option", { value: "Andaman and Nicobar Islands" }, "Andaman and Nicobar Islands"), React.createElement("option", { value: "Arunachal Pradesh" }, "Arunachal Pradesh"), React.createElement("option", { value: "Assam" }, "Assam"), React.createElement("option", { value: "Bihar" }, "Bihar"), React.createElement("option", { value: "Chandigarh" }, "Chandigarh"), React.createElement("option", { value: "Chhattisgarh" }, "Chhattisgarh"), React.createElement("option", { value: "Dadar and Nagar Haveli" }, "Dadar and Nagar Haveli"), React.createElement("option", { value: "Daman and Diu" }, "Daman and Diu"), React.createElement("option", { value: "Delhi" }, "Delhi"), React.createElement("option", { value: "Lakshadweep" }, "Lakshadweep"), React.createElement("option", { value: "Puducherry" }, "Puducherry"), React.createElement("option", { value: "Goa" }, "Goa"), React.createElement("option", { value: "Gujarat" }, "Gujarat"), React.createElement("option", { value: "Haryana" }, "Haryana"), React.createElement("option", { value: "Himachal Pradesh" }, "Himachal Pradesh"), React.createElement("option", { value: "Jammu and Kashmir" }, "Jammu and Kashmir"), React.createElement("option", { value: "Jharkhand" }, "Jharkhand"), React.createElement("option", { value: "Karnataka" }, "Karnataka"), React.createElement("option", { value: "Kerala" }, "Kerala"), React.createElement("option", { value: "Madhya Pradesh" }, "Madhya Pradesh"), React.createElement("option", { value: "Maharashtra" }, "Maharashtra"), React.createElement("option", { value: "Manipur" }, "Manipur"), React.createElement("option", { value: "Meghalaya" }, "Meghalaya"), React.createElement("option", { value: "Mizoram" }, "Mizoram"), React.createElement("option", { value: "Nagaland" }, "Nagaland"), React.createElement("option", { value: "Odisha" }, "Odisha"), React.createElement("option", { value: "Punjab" }, "Punjab"), React.createElement("option", { value: "Rajasthan" }, "Rajasthan"), React.createElement("option", { value: "Sikkim" }, "Sikkim"), React.createElement("option", { value: "Tamil Nadu" }, "Tamil Nadu"), React.createElement("option", { value: "Telangana" }, "Telangana"), React.createElement("option", { value: "Tripura" }, "Tripura"), React.createElement("option", { value: "Uttar Pradesh" }, "Uttar Pradesh"), React.createElement("option", { value: "Uttarakhand" }, "Uttarakhand"), React.createElement("option", { value: "West Bengal" }, "West Bengal")) } renderStates() { return "india" == this.state.myself.country.toLowerCase() ? this.renderIndianStates() : "usa" == this.state.myself.country.toLowerCase() ? this.renderUSStates() : React.createElement("input", { type: "text", name: "state", className: "form-control", maxLength: "100", value: this.state.myself.state, onChange: this.handleChange, onBlur: this.saveData }) } renderProfilePicModal() { if (this.state.showProfilePicModal) { const { crop: e, profile_pic: a, src: t } = this.state; return React.createElement("div", { className: "modal  d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog  modal-dialog-scrollable modal-lg" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title" }, "Profile Picture"), React.createElement("button", { type: "button", className: "close", "data-dismiss": "modal", "aria-label": "Close", onClick: this.toggleProfilePicModal }, React.createElement("span", { "aria-hidden": "true" }, "×"))), React.createElement("div", { className: "modal-body" }, React.createElement("div", { className: "custom-file" }, React.createElement("input", { type: "file", className: "custom-file-input", id: "profile_pic", value: a, onChange: this.handleFile }), React.createElement("label", { className: "custom-file-label", htmlFor: "profile_pic" }, "Choose Picture")), t && React.createElement(ReactCrop.Component, { src: t, crop: e, locked: "true", onImageLoaded: this.onImageLoaded, onComplete: this.onCropComplete, onChange: this.onCropChange })), React.createElement("div", { className: "modal-footer" }, React.createElement("button", { type: "button", className: "btn btn-primary", onClick: this.saveProfilePic }, "Save"))))) } return null } render() { if (this.state.loggedin && null !== this.state.myself) { let e = this.state.loading ? React.createElement("div", { className: "progress", style: { height: "5px" } }, React.createElement("div", { className: "progress-bar progress-bar-striped progress-bar-animated", role: "progressbar", "aria-valuenow": "100", "aria-valuemin": "0", "aria-valuemax": "100", style: { width: "100%" } })) : null, a = "" !== this.state.myself.pic ? React.createElement(React.Fragment, null, React.createElement("img", { src: this.state.myself.pic, className: "rounded mx-auto d-block img-fluid", alt: "" }), React.createElement("button", { type: "button", className: "btn btn-sm btn-light m-1", onClick: this.removeProfilePicture }, "Remove Picture")) : React.createElement("img", { src: "/images/nopic.jpg", className: "rounded mx-auto d-block img-fluid", alt: "" }); return React.createElement(React.Fragment, null, React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-md-4" }, a, React.createElement("button", { type: "button", className: "btn btn-sm btn-light m-1", onClick: this.toggleProfilePicModal }, "Upload Picture"), this.renderProfilePicModal(), React.createElement("div", { className: "form-row" }, React.createElement("div", { className: "col-12" }, React.createElement("div", { className: "form-group" }, React.createElement("label", { htmlFor: "nametxt" }, "Name"), React.createElement("input", { type: "text", id: "nametxt", name: "name", placeholder: "Your Name", className: "form-control", value: this.state.myself.name, onChange: this.handleChange, onBlur: this.saveData }))), React.createElement("div", { className: "col-12" }, React.createElement("div", { className: "form-group" }, React.createElement("label", { htmlFor: "birthyeartxt" }, "Year of Birth"), React.createElement("input", { type: "number", id: "birthyeartxt", name: "birthYear", className: "form-control", value: this.state.myself.birthYear, onChange: this.handleChange, onBlur: this.saveData }), React.createElement("small", { className: "form-text text-muted" }, "Optional, but recommended."))), React.createElement("div", { className: "col-12" }, React.createElement("div", { className: "form-group" }, React.createElement("label", { htmlFor: "genderselect" }, "Gender"), React.createElement("select", { className: "custom-select", id: "genderselect", name: "gender", value: this.state.myself.gender, onChange: this.handleChange, onBlur: this.saveData }, React.createElement("option", { value: "0" }), React.createElement("option", { value: "1" }, "Male"), React.createElement("option", { value: "2" }, "Female"), React.createElement("option", { value: "3" }, "Other")))))), React.createElement("div", { className: "col-md-8" }, React.createElement("div", { className: "form-row" }, React.createElement("div", { className: "col-md-12" }, React.createElement("label", { htmlFor: "thoughtStatus" }, "One line Introduction"), React.createElement("input", { type: "text", name: "thoughtstatus", className: "form-control", maxLength: "195", value: this.state.myself.thoughtStatus, onChange: this.handleChange, onBlur: this.saveData }), React.createElement("small", { className: "form-text text-muted" }, "Optional. Provide a one line introduction of yourself."))), React.createElement("div", { className: "form-row" }, React.createElement("div", { className: "col-mg-12" }, React.createElement("div", { className: "form-group" }, React.createElement("label", { htmlFor: "biotxt" }, "About Me"), React.createElement("textarea", { className: "form-control", id: "biotxt", maxLength: "950", name: "bio", value: this.state.myself.bio, onChange: this.handleChange, onBlur: this.saveData, rows: "10", placeholder: "Write something about yourself." }), React.createElement("small", { className: "form-text text-muted" }, 'Optional, but recommended. "About Me" should include your introduction, educational qualifications, work history, past achievements, future goals, important links, business description (if this account represent a business entity).')))), React.createElement("div", { className: "form-row" }, React.createElement("div", { className: "col-md-12" }, React.createElement("label", { htmlFor: "visibilityselect" }, "Profile Visibility"), React.createElement("select", { className: "custom-select", id: "genderselect", name: "visibility", value: this.state.myself.visibility, onChange: this.handleChange, onBlur: this.saveData }, React.createElement("option", { value: "0" }), React.createElement("option", { value: "2" }, "Public"), React.createElement("option", { value: "1" }, "Private")), React.createElement("small", { className: "form-text text-muted" }, "Optional, but recommended. Public visibility means your profile will be visible in searches. Private visibility means your profile will not be shown in searches."))), React.createElement("div", { className: "form-row" }, React.createElement("div", { className: "col-md-4" }, React.createElement("div", { className: "form-group" }, React.createElement("label", { htmlFor: "countryselect" }, "Country"), React.createElement("select", { className: "custom-select", id: "countryselect", name: "country", value: this.state.myself.country, onChange: this.handleChange, onBlur: this.saveData }, React.createElement("option", { value: "" }), React.createElement("option", { value: "Afganistan" }, "Afghanistan"), React.createElement("option", { value: "Albania" }, "Albania"), React.createElement("option", { value: "Algeria" }, "Algeria"), React.createElement("option", { value: "American Samoa" }, "American Samoa"), React.createElement("option", { value: "Andorra" }, "Andorra"), React.createElement("option", { value: "Angola" }, "Angola"), React.createElement("option", { value: "Anguilla" }, "Anguilla"), React.createElement("option", { value: "Antigua & Barbuda" }, "Antigua & Barbuda"), React.createElement("option", { value: "Argentina" }, "Argentina"), React.createElement("option", { value: "Armenia" }, "Armenia"), React.createElement("option", { value: "Aruba" }, "Aruba"), React.createElement("option", { value: "Australia" }, "Australia"), React.createElement("option", { value: "Austria" }, "Austria"), React.createElement("option", { value: "Azerbaijan" }, "Azerbaijan"), React.createElement("option", { value: "Bahamas" }, "Bahamas"), React.createElement("option", { value: "Bahrain" }, "Bahrain"), React.createElement("option", { value: "Bangladesh" }, "Bangladesh"), React.createElement("option", { value: "Barbados" }, "Barbados"), React.createElement("option", { value: "Belarus" }, "Belarus"), React.createElement("option", { value: "Belgium" }, "Belgium"), React.createElement("option", { value: "Belize" }, "Belize"), React.createElement("option", { value: "Benin" }, "Benin"), React.createElement("option", { value: "Bermuda" }, "Bermuda"), React.createElement("option", { value: "Bhutan" }, "Bhutan"), React.createElement("option", { value: "Bolivia" }, "Bolivia"), React.createElement("option", { value: "Bonaire" }, "Bonaire"), React.createElement("option", { value: "Bosnia & Herzegovina" }, "Bosnia & Herzegovina"), React.createElement("option", { value: "Botswana" }, "Botswana"), React.createElement("option", { value: "Brazil" }, "Brazil"), React.createElement("option", { value: "British Indian Ocean Ter" }, "British Indian Ocean Ter"), React.createElement("option", { value: "Brunei" }, "Brunei"), React.createElement("option", { value: "Bulgaria" }, "Bulgaria"), React.createElement("option", { value: "Burkina Faso" }, "Burkina Faso"), React.createElement("option", { value: "Burundi" }, "Burundi"), React.createElement("option", { value: "Cambodia" }, "Cambodia"), React.createElement("option", { value: "Cameroon" }, "Cameroon"), React.createElement("option", { value: "Canada" }, "Canada"), React.createElement("option", { value: "Canary Islands" }, "Canary Islands"), React.createElement("option", { value: "Cape Verde" }, "Cape Verde"), React.createElement("option", { value: "Cayman Islands" }, "Cayman Islands"), React.createElement("option", { value: "Central African Republic" }, "Central African Republic"), React.createElement("option", { value: "Chad" }, "Chad"), React.createElement("option", { value: "Channel Islands" }, "Channel Islands"), React.createElement("option", { value: "Chile" }, "Chile"), React.createElement("option", { value: "China" }, "China"), React.createElement("option", { value: "Christmas Island" }, "Christmas Island"), React.createElement("option", { value: "Cocos Island" }, "Cocos Island"), React.createElement("option", { value: "Colombia" }, "Colombia"), React.createElement("option", { value: "Comoros" }, "Comoros"), React.createElement("option", { value: "Congo" }, "Congo"), React.createElement("option", { value: "Cook Islands" }, "Cook Islands"), React.createElement("option", { value: "Costa Rica" }, "Costa Rica"), React.createElement("option", { value: "Cote DIvoire" }, "Cote DIvoire"), React.createElement("option", { value: "Croatia" }, "Croatia"), React.createElement("option", { value: "Cuba" }, "Cuba"), React.createElement("option", { value: "Curaco" }, "Curacao"), React.createElement("option", { value: "Cyprus" }, "Cyprus"), React.createElement("option", { value: "Czech Republic" }, "Czech Republic"), React.createElement("option", { value: "Denmark" }, "Denmark"), React.createElement("option", { value: "Djibouti" }, "Djibouti"), React.createElement("option", { value: "Dominica" }, "Dominica"), React.createElement("option", { value: "Dominican Republic" }, "Dominican Republic"), React.createElement("option", { value: "East Timor" }, "East Timor"), React.createElement("option", { value: "Ecuador" }, "Ecuador"), React.createElement("option", { value: "Egypt" }, "Egypt"), React.createElement("option", { value: "El Salvador" }, "El Salvador"), React.createElement("option", { value: "Equatorial Guinea" }, "Equatorial Guinea"), React.createElement("option", { value: "Eritrea" }, "Eritrea"), React.createElement("option", { value: "Estonia" }, "Estonia"), React.createElement("option", { value: "Ethiopia" }, "Ethiopia"), React.createElement("option", { value: "Falkland Islands" }, "Falkland Islands"), React.createElement("option", { value: "Faroe Islands" }, "Faroe Islands"), React.createElement("option", { value: "Fiji" }, "Fiji"), React.createElement("option", { value: "Finland" }, "Finland"), React.createElement("option", { value: "France" }, "France"), React.createElement("option", { value: "French Guiana" }, "French Guiana"), React.createElement("option", { value: "French Polynesia" }, "French Polynesia"), React.createElement("option", { value: "French Southern Ter" }, "French Southern Ter"), React.createElement("option", { value: "Gabon" }, "Gabon"), React.createElement("option", { value: "Gambia" }, "Gambia"), React.createElement("option", { value: "Georgia" }, "Georgia"), React.createElement("option", { value: "Germany" }, "Germany"), React.createElement("option", { value: "Ghana" }, "Ghana"), React.createElement("option", { value: "Gibraltar" }, "Gibraltar"), React.createElement("option", { value: "Great Britain" }, "Great Britain"), React.createElement("option", { value: "Greece" }, "Greece"), React.createElement("option", { value: "Greenland" }, "Greenland"), React.createElement("option", { value: "Grenada" }, "Grenada"), React.createElement("option", { value: "Guadeloupe" }, "Guadeloupe"), React.createElement("option", { value: "Guam" }, "Guam"), React.createElement("option", { value: "Guatemala" }, "Guatemala"), React.createElement("option", { value: "Guinea" }, "Guinea"), React.createElement("option", { value: "Guyana" }, "Guyana"), React.createElement("option", { value: "Haiti" }, "Haiti"), React.createElement("option", { value: "Hawaii" }, "Hawaii"), React.createElement("option", { value: "Honduras" }, "Honduras"), React.createElement("option", { value: "Hong Kong" }, "Hong Kong"), React.createElement("option", { value: "Hungary" }, "Hungary"), React.createElement("option", { value: "Iceland" }, "Iceland"), React.createElement("option", { value: "Indonesia" }, "Indonesia"), React.createElement("option", { value: "India" }, "India"), React.createElement("option", { value: "Iran" }, "Iran"), React.createElement("option", { value: "Iraq" }, "Iraq"), React.createElement("option", { value: "Ireland" }, "Ireland"), React.createElement("option", { value: "Isle of Man" }, "Isle of Man"), React.createElement("option", { value: "Israel" }, "Israel"), React.createElement("option", { value: "Italy" }, "Italy"), React.createElement("option", { value: "Jamaica" }, "Jamaica"), React.createElement("option", { value: "Japan" }, "Japan"), React.createElement("option", { value: "Jordan" }, "Jordan"), React.createElement("option", { value: "Kazakhstan" }, "Kazakhstan"), React.createElement("option", { value: "Kenya" }, "Kenya"), React.createElement("option", { value: "Kiribati" }, "Kiribati"), React.createElement("option", { value: "Korea North" }, "Korea North"), React.createElement("option", { value: "Korea South" }, "Korea South"), React.createElement("option", { value: "Kuwait" }, "Kuwait"), React.createElement("option", { value: "Kyrgyzstan" }, "Kyrgyzstan"), React.createElement("option", { value: "Laos" }, "Laos"), React.createElement("option", { value: "Latvia" }, "Latvia"), React.createElement("option", { value: "Lebanon" }, "Lebanon"), React.createElement("option", { value: "Lesotho" }, "Lesotho"), React.createElement("option", { value: "Liberia" }, "Liberia"), React.createElement("option", { value: "Libya" }, "Libya"), React.createElement("option", { value: "Liechtenstein" }, "Liechtenstein"), React.createElement("option", { value: "Lithuania" }, "Lithuania"), React.createElement("option", { value: "Luxembourg" }, "Luxembourg"), React.createElement("option", { value: "Macau" }, "Macau"), React.createElement("option", { value: "Macedonia" }, "Macedonia"), React.createElement("option", { value: "Madagascar" }, "Madagascar"), React.createElement("option", { value: "Malaysia" }, "Malaysia"), React.createElement("option", { value: "Malawi" }, "Malawi"), React.createElement("option", { value: "Maldives" }, "Maldives"), React.createElement("option", { value: "Mali" }, "Mali"), React.createElement("option", { value: "Malta" }, "Malta"), React.createElement("option", { value: "Marshall Islands" }, "Marshall Islands"), React.createElement("option", { value: "Martinique" }, "Martinique"), React.createElement("option", { value: "Mauritania" }, "Mauritania"), React.createElement("option", { value: "Mauritius" }, "Mauritius"), React.createElement("option", { value: "Mayotte" }, "Mayotte"), React.createElement("option", { value: "Mexico" }, "Mexico"), React.createElement("option", { value: "Midway Islands" }, "Midway Islands"), React.createElement("option", { value: "Moldova" }, "Moldova"), React.createElement("option", { value: "Monaco" }, "Monaco"), React.createElement("option", { value: "Mongolia" }, "Mongolia"), React.createElement("option", { value: "Montserrat" }, "Montserrat"), React.createElement("option", { value: "Morocco" }, "Morocco"), React.createElement("option", { value: "Mozambique" }, "Mozambique"), React.createElement("option", { value: "Myanmar" }, "Myanmar"), React.createElement("option", { value: "Nambia" }, "Nambia"), React.createElement("option", { value: "Nauru" }, "Nauru"), React.createElement("option", { value: "Nepal" }, "Nepal"), React.createElement("option", { value: "Netherland Antilles" }, "Netherland Antilles"), React.createElement("option", { value: "Netherlands" }, "Netherlands (Holland, Europe)"), React.createElement("option", { value: "Nevis" }, "Nevis"), React.createElement("option", { value: "New Caledonia" }, "New Caledonia"), React.createElement("option", { value: "New Zealand" }, "New Zealand"), React.createElement("option", { value: "Nicaragua" }, "Nicaragua"), React.createElement("option", { value: "Niger" }, "Niger"), React.createElement("option", { value: "Nigeria" }, "Nigeria"), React.createElement("option", { value: "Niue" }, "Niue"), React.createElement("option", { value: "Norfolk Island" }, "Norfolk Island"), React.createElement("option", { value: "Norway" }, "Norway"), React.createElement("option", { value: "Oman" }, "Oman"), React.createElement("option", { value: "Pakistan" }, "Pakistan"), React.createElement("option", { value: "Palau Island" }, "Palau Island"), React.createElement("option", { value: "Palestine" }, "Palestine"), React.createElement("option", { value: "Panama" }, "Panama"), React.createElement("option", { value: "Papua New Guinea" }, "Papua New Guinea"), React.createElement("option", { value: "Paraguay" }, "Paraguay"), React.createElement("option", { value: "Peru" }, "Peru"), React.createElement("option", { value: "Phillipines" }, "Philippines"), React.createElement("option", { value: "Pitcairn Island" }, "Pitcairn Island"), React.createElement("option", { value: "Poland" }, "Poland"), React.createElement("option", { value: "Portugal" }, "Portugal"), React.createElement("option", { value: "Puerto Rico" }, "Puerto Rico"), React.createElement("option", { value: "Qatar" }, "Qatar"), React.createElement("option", { value: "Republic of Montenegro" }, "Republic of Montenegro"), React.createElement("option", { value: "Republic of Serbia" }, "Republic of Serbia"), React.createElement("option", { value: "Reunion" }, "Reunion"), React.createElement("option", { value: "Romania" }, "Romania"), React.createElement("option", { value: "Russia" }, "Russia"), React.createElement("option", { value: "Rwanda" }, "Rwanda"), React.createElement("option", { value: "St Barthelemy" }, "St Barthelemy"), React.createElement("option", { value: "St Eustatius" }, "St Eustatius"), React.createElement("option", { value: "St Helena" }, "St Helena"), React.createElement("option", { value: "St Kitts-Nevis" }, "St Kitts-Nevis"), React.createElement("option", { value: "St Lucia" }, "St Lucia"), React.createElement("option", { value: "St Maarten" }, "St Maarten"), React.createElement("option", { value: "St Pierre & Miquelon" }, "St Pierre & Miquelon"), React.createElement("option", { value: "St Vincent & Grenadines" }, "St Vincent & Grenadines"), React.createElement("option", { value: "Saipan" }, "Saipan"), React.createElement("option", { value: "Samoa" }, "Samoa"), React.createElement("option", { value: "Samoa American" }, "Samoa American"), React.createElement("option", { value: "San Marino" }, "San Marino"), React.createElement("option", { value: "Sao Tome & Principe" }, "Sao Tome & Principe"), React.createElement("option", { value: "Saudi Arabia" }, "Saudi Arabia"), React.createElement("option", { value: "Senegal" }, "Senegal"), React.createElement("option", { value: "Seychelles" }, "Seychelles"), React.createElement("option", { value: "Sierra Leone" }, "Sierra Leone"), React.createElement("option", { value: "Singapore" }, "Singapore"), React.createElement("option", { value: "Slovakia" }, "Slovakia"), React.createElement("option", { value: "Slovenia" }, "Slovenia"), React.createElement("option", { value: "Solomon Islands" }, "Solomon Islands"), React.createElement("option", { value: "Somalia" }, "Somalia"), React.createElement("option", { value: "South Africa" }, "South Africa"), React.createElement("option", { value: "Spain" }, "Spain"), React.createElement("option", { value: "Sri Lanka" }, "Sri Lanka"), React.createElement("option", { value: "Sudan" }, "Sudan"), React.createElement("option", { value: "Suriname" }, "Suriname"), React.createElement("option", { value: "Swaziland" }, "Swaziland"), React.createElement("option", { value: "Sweden" }, "Sweden"), React.createElement("option", { value: "Switzerland" }, "Switzerland"), React.createElement("option", { value: "Syria" }, "Syria"), React.createElement("option", { value: "Tahiti" }, "Tahiti"), React.createElement("option", { value: "Taiwan" }, "Taiwan"), React.createElement("option", { value: "Tajikistan" }, "Tajikistan"), React.createElement("option", { value: "Tanzania" }, "Tanzania"), React.createElement("option", { value: "Thailand" }, "Thailand"), React.createElement("option", { value: "Togo" }, "Togo"), React.createElement("option", { value: "Tokelau" }, "Tokelau"), React.createElement("option", { value: "Tonga" }, "Tonga"), React.createElement("option", { value: "Trinidad & Tobago" }, "Trinidad & Tobago"), React.createElement("option", { value: "Tunisia" }, "Tunisia"), React.createElement("option", { value: "Turkey" }, "Turkey"), React.createElement("option", { value: "Turkmenistan" }, "Turkmenistan"), React.createElement("option", { value: "Turks & Caicos Is" }, "Turks & Caicos Is"), React.createElement("option", { value: "Tuvalu" }, "Tuvalu"), React.createElement("option", { value: "Uganda" }, "Uganda"), React.createElement("option", { value: "United Kingdom" }, "United Kingdom"), React.createElement("option", { value: "Ukraine" }, "Ukraine"), React.createElement("option", { value: "UAE" }, "United Arab Emirates"), React.createElement("option", { value: "USA" }, "United States of America"), React.createElement("option", { value: "Uraguay" }, "Uruguay"), React.createElement("option", { value: "Uzbekistan" }, "Uzbekistan"), React.createElement("option", { value: "Vanuatu" }, "Vanuatu"), React.createElement("option", { value: "Vatican City State" }, "Vatican City State"), React.createElement("option", { value: "Venezuela" }, "Venezuela"), React.createElement("option", { value: "Vietnam" }, "Vietnam"), React.createElement("option", { value: "Virgin Islands (Brit)" }, "Virgin Islands (Brit)"), React.createElement("option", { value: "Virgin Islands (USA)" }, "Virgin Islands (USA)"), React.createElement("option", { value: "Wake Island" }, "Wake Island"), React.createElement("option", { value: "Wallis & Futana Is" }, "Wallis & Futana Is"), React.createElement("option", { value: "Yemen" }, "Yemen"), React.createElement("option", { value: "Zaire" }, "Zaire"), React.createElement("option", { value: "Zambia" }, "Zambia"), React.createElement("option", { value: "Zimbabwe" }, "Zimbabwe")))), React.createElement("div", { className: "col-md-4" }, React.createElement("div", { className: "form-group" }, React.createElement("label", null, "State / Region"), this.renderStates())), React.createElement("div", { className: "col-md-4" }, React.createElement("div", { className: "form-group" }, React.createElement("label", null, "City / District / Area"), React.createElement("input", { type: "text", name: "city", className: "form-control", maxLength: "100", value: this.state.myself.city, onChange: this.handleChange, onBlur: this.saveData })))))), e) } return null } }