function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }) } else { obj[key] = value } return obj } class App extends React.Component { constructor(props) { super(props); _defineProperty(this, "setToken", data => { this.setState({ token: data }) }); _defineProperty(this, "setData", data => { this.setState({ data: data }) }); this.state = { token: localStorage.getItem("token"), user: localStorage.getItem("myself"), mainview: localStorage.getItem("token") === null ? "login" : "home", loginform: { email: "", password: "" }, registerform: { name: "", email: "" }, postid: 0 }; this.fetchData = this.fetchData.bind(this); this.loginHandler = this.loginHandler.bind(this) } componentDidMount() { if (localStorage.getItem("token") !== null) { this.fetchData() } } loginHandler() { if (localStorage.getItem("token") != null) { this.fetchData() } } fetchData() { fetch('//' + window.location.host + '/api/Members/Validate', { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); localStorage.clear(); this.setState({ bsstyle: 'danger', message: "Authorization has been denied for this request.", loggedin: false, loading: false, user: null, token: '' }) } else if (response.status === 200) { response.json().then(data => { this.setState({ bsstyle: '', message: "", loggedin: true, loading: false, user: data }) }) } }) } renderProfileCompleteness() { if (localStorage.getItem("token") != null) { var showprofilecompleteribbon = false; if (this.state.user.emptyFields && this.state.user.emptyFields.indexOf("recoveryquestion") > -1) { showprofilecompleteribbon = true } if (this.state.user.emptyFields && this.state.user.emptyFields.indexOf("recoveryanswer") > -1) { showprofilecompleteribbon = true } if (showprofilecompleteribbon) { return React.createElement("div", { className: "alert alert-light text-center", role: "alert" }, "Password recovery question and answer is missing from you profile.\xA0 ", React.createElement("a", { className: "text-danger fs-bold", onClick: () => { this.setState({ mainview: "manageprofile" }) } }, "Update Profile Now")) } } return null } renderHeader() { if (this.state.mainview !== "login" && this.state.mainview !== "register") { const token = localStorage.getItem("token"); let linkitems = []; let loggedin = true; if (token === null) { loggedin = false } let profilepic = null; if (loggedin && this.state.user !== null && this.state.user.pic !== "") { profilepic = React.createElement("img", { src: this.state.user.pic, width: "20", height: "20", className: "rounded" }) } else { profilepic = React.createElement("i", { className: "bi bi-person-square" }) } if (loggedin) { linkitems.push(React.createElement("td", { key: 1, align: "center", valign: "middle", width: "55px" }, React.createElement("a", { className: "text-dark fs-3", onClick: () => { this.setState({ mainview: "profile" }) }, title: "Profile" }, React.createElement("i", { className: "bi bi-person-badge" })))) } else { linkitems.push(React.createElement("td", { key: 2, align: "center", valign: "middle", width: "55px" }, React.createElement("a", { className: "text-dark fs-3", onClick: () => { this.setState({ mainview: "login" }) }, title: "Login" }, React.createElement("i", { className: "bi bi-person-badge" })))) } return React.createElement("div", { className: "container-xl px-0 fixed-top bg-light maxwidth border border-top-0" }, React.createElement("table", { cellPadding: "5", cellSpacing: "0", width: "100%", className: "my-1" }, React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", null, React.createElement("a", { onClick: () => { this.setState({ mainview: "home" }) }, className: "text-dark text-decoration-none fs-4" }, "Waarta")), React.createElement("td", { align: "center", valign: "middle", width: "55px" }, React.createElement("a", { className: "text-dark fs-3", onClick: () => { this.setState({ mainview: "home" }) }, title: "Home" }, React.createElement("i", { className: "bi bi-house" }))), React.createElement("td", { align: "center", valign: "middle", width: "55px" }, React.createElement("a", { className: "text-dark fs-3", onClick: () => { this.setState({ mainview: "add" }) }, title: "Add Post" }, React.createElement("i", { className: "bi bi-journal-plus" }))), React.createElement("td", { align: "center", valign: "middle", width: "55px" }, React.createElement("a", { className: "text-dark fs-3", onClick: () => { this.setState({ mainview: "notification" }) }, title: "Notifications" }, React.createElement("i", { className: "bi bi-bell" }))), linkitems), React.createElement("tr", null, React.createElement("td", { colSpan: "6", align: "left" }, React.createElement(Search, null)))))) } else { return null } } renderFooter() { if (this.state.mainview !== "login" && this.state.mainview !== "register") { return React.createElement("nav", { className: "navbar navbar-expand-lg navbar-light border-top" }, React.createElement("div", { className: "container" }, React.createElement("div", { className: "justify-content-md-end" }, React.createElement("a", { className: "text-dark mx-2", onClick: () => { this.setState({ mainview: "faq" }) }, title: "Frequently Asked Questions" }, React.createElement("i", { className: "bi bi-patch-question" })), React.createElement("a", { className: "text-dark mx-2", onClick: () => { this.setState({ mainview: "privacy" }) }, title: "Privacy" }, React.createElement("i", { className: "bi bi-eye-slash-fill" }))))) } else { return null } } renderLogin() { if (this.state.mainview == "login") { return React.createElement("div", { className: "row align-items-center justify-content-center m-3", style: { height: "85vh" } }, React.createElement("div", { className: "col-md-4" }, React.createElement("h1", { className: "cover-heading", style: { fontSize: "3.5rem" } }, "Waarta"), React.createElement("p", { className: "lead" }, "Easily connect with people. Have meaningful conversations. Free exchange of Ideas. Get things done.", React.createElement("br", null), " Made in India.")), React.createElement("div", { className: "col-md-4" }, React.createElement(RegisterForm, { onLogin: this.loginHandler, beginWithRegister: false }))) } else { return null } } renderRegister(message, loading) { if (this.state.mainview === "register") { return React.createElement("div", { className: "row justify-content-center m-3" }, React.createElement("div", { className: "col-4" }), React.createElement("div", { className: "col-4" }, React.createElement(RegisterForm, { onLogin: this.loginHandler, beginWithRegister: false }))) } else { return null } } renderManageProfile() { if (this.state.mainview === "manageprofile") { return React.createElement(ManageProfile, { onProfileChange: () => { this.fetchData() }, onBack: () => { this.setState({ mainview: "profile" }) } }) } else { return null } } renderProfile() { if (this.state.mainview === "profile") { return React.createElement(Profile, { username: this.state.user.userName, onClickSettings: () => { this.setState({ mainview: "manageprofile" }) } }) } else { return null } } renderConversation() { if (this.state.mainview === "conversation") { return React.createElement(Conversation, null) } else { return null } } renderDiscussion() { if (this.state.mainview === "discussion") { return React.createElement(Meetings, null) } else { return null } } renderHome() { if (this.state.mainview === "home") { return React.createElement(Home, null) } else { return null } } renderPrivacy() { if (this.state.mainview === "privacy") { return React.createElement(Privacy, null) } else { return null } } renderFAQ() { if (this.state.mainview === "faq") { return React.createElement("main", { role: "main", className: "inner cover container py-5" }, React.createElement("h1", null, "Frequently Asked Questions"), React.createElement("h4", null, "What is Waarta?"), React.createElement("p", null, "Waarta is a hindi word which literally means communication."), React.createElement("h4", null, "Purpose of Waarta"), React.createElement("p", null, "Sole purpose of waarta is to help facilitate communication between people. Waarta achieves this by providing a set of powerful features like people search, conversations and meetings."), React.createElement("h4", null, "People Search?"), React.createElement("p", null, "\"People Search\" as the name suggest is a search feature through which you can search member profiles on waarta. For example if you are looking for a software engineer with ASP.net skill and 10 years of experience in New Delhi. You can can search the same on waarta and find elligible profiles. ", React.createElement("br", null), "You have to visit conversations page to do a people search."), React.createElement("h4", null, "Conversations"), React.createElement("p", null, "\"Conversation\" is a powerful one to one online text, audio and video chat feature, through which you can communicate with your contacts on waarta and with the people you searched on waarta."), React.createElement("h4", null, "Discussions"), React.createElement("p", null, "A place where like minded people can share ideas on topics of their choice. There is no restrictions on number of members a dicussion can have.")) } else { return null } } render() { let loading = this.state.loading ? React.createElement("div", { className: "progress", style: { height: "5px" } }, React.createElement("div", { className: "progress-bar progress-bar-striped progress-bar-animated", role: "progressbar", "aria-valuenow": "75", "aria-valuemin": "0", "aria-valuemax": "100", style: { width: "100%" } })) : null; let messagecontent = this.state.message !== "" ? React.createElement("div", { className: "mt-1 alert alert-" + this.state.bsstyle }, this.state.message) : null; return React.createElement(React.Fragment, null, React.createElement("div", { className: "container-xl maxwidth g-0", style: { minHeight: "calc(100vh - 143px)" } }, this.renderProfileCompleteness(), this.renderLogin(), this.renderHome(), this.renderProfile(), this.renderManageProfile(), this.renderRegister(messagecontent, loading), this.renderConversation(), this.renderDiscussion(), this.renderFAQ(), this.renderPrivacy()), this.renderFooter()) } } class Home extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: null, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token") } } render() { if (!this.state.loggedin) { return React.createElement(RegisterForm, { beginWithRegister: false, onLogin: () => { this.setState({ loggedin: localStorage.getItem("token") === null ? false : true, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token") }) } }) } return React.createElement(React.Fragment, null, React.createElement(MemberPostList, { search: "userfeed", viewMode: 2, viewModeAllowed: "false" })) } } class Search extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), q: '', items: [], eitems: new Map(), emodel: null, searchactivetab: 'people' }; this.search = this.search.bind(this) } search() { this.setState({ loading: true }); let url = '//' + window.location.host + '/api/search?q=' + this.state.q.replace("#", ""); fetch(url, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { console.log(data); this.setState({ loggedin: true, loading: false, items: data }, () => { }) }) } }) } explore() { let url = '//' + window.location.host + '/api/search/explore?p=' + this.state.p; fetch(url, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { console.log(data); var temp = this.state.eitems; for (var k in data.posts) { if (!temp.has(data.posts[k].id)) { temp.set(data.posts[k].id, data.posts[k]) } } this.setState({ loading: false, emodel: { current: data.current, pageSize: data.pageSize, total: data.total, totalPages: data.totalPages }, eposts: temp }) }) } }) } renderSearchResult() { var items = []; var i = 1; for (var k in this.state.items) { var p = this.state.items[k]; if (p.member) { items.push(React.createElement("li", { key: i, className: "list-group-item border-0 border-bottom p-2" }, React.createElement(MemberSmallRow, { member: p.member }))) } else if (p.hashtag) { items.push(React.createElement("li", { key: i, className: "list-group-item border-0 border-bottom p-2" }, React.createElement("div", null, React.createElement("a", { className: "text-dark fw-bold text-decoration-none", href: '//' + window.location.host + '/post?q=%23' + p.hashtag.tag }, "#", p.hashtag.tag), React.createElement("div", null, p.hashtag.postCount, " Posts")))) } i += 1 } if (items.length > 0) { return React.createElement("div", null, items) } else { return null } } render() { if (!this.state.loggedin) { return React.createElement(RegisterForm, { beginWithRegister: false, onLogin: () => { this.setState({ loggedin: localStorage.getItem("token") === null ? false : true, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token") }) } }) } let loading = null; if (this.state.loading) { loading = React.createElement("div", { className: "progress fixed-bottom", style: { height: "5px" } }, React.createElement("div", { className: "progress-bar progress-bar-striped progress-bar-animated", role: "progressbar", "aria-valuenow": "100", "aria-valuemin": "0", "aria-valuemax": "100", style: { width: "100%" } })) } let clearsearchhtml = React.createElement("div", { className: "col-md-1 col-2 p-0 text-center" }, React.createElement("button", { type: "button", className: "btn btn-light", "aria-label": "Close", onClick: () => { this.setState({ q: '', items: [] }) } }, React.createElement("i", { className: "bi bi-trash" }))); if (this.state.q === '') { clearsearchhtml = null } return React.createElement(React.Fragment, null, loading, React.createElement("div", { className: "row mx-0" }, React.createElement("div", { className: "col p-0" }, React.createElement("input", { type: "text", className: "form-control", value: this.state.q, onChange: e => { this.setState({ q: e.target.value }) }, placeholder: "Search People, Topics, Hashtags", maxLength: "150", onKeyUp: e => { if (e.keyCode === 13) { this.search() } } })), clearsearchhtml), this.renderSearchResult()) } }