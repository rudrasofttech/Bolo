"use strict"; function _defineProperty(e, t, a) { return t in e ? Object.defineProperty(e, t, { value: a, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = a, e } class Meeting extends React.Component { constructor(e) { super(e), _defineProperty(this, "scrollToBottom", () => { this.detectMobileorTablet() || void 0 !== this.messagesEnd && null !== this.messagesEnd && this.messagesEnd.scrollIntoView({ behavior: "smooth" }) }), _defineProperty(this, "handleDrag", e => { const t = document.querySelector("#myvideocont.smalldocked"), { clientX: a, clientY: s } = e, { left: i, top: n } = null !== t ? t.getBoundingClientRect() : { left: 0, top: 0 }, l = a - i, o = s - n; function r(e) { var a, s; a = e.pageX, s = e.pageY, null !== t && (t.style.left = a - l + "px", t.style.top = s - o + "px") } console.log("mousedown"), document.addEventListener("mousemove", r), document.body.addEventListener("mouseup", function e(t) { document.removeEventListener("mousemove", r), document.body.removeEventListener("mouseup", e) }) }); let t = !0; null == localStorage.getItem("token") && (t = !1), this.state = { joinmeeting: !1, redirectto: "", meetingname: "", myname: "", textinput: "", messages: [], filestoupload: [], showinvite: !1, videoplaying: !1, audioplaying: !1, loading: !1, loggedin: t, bsstyle: "", message: "", id: null === this.props.meetingid ? "" : this.props.meetingid, token: null == localStorage.getItem("token") ? "" : localStorage.getItem("token"), dummydate: new Date, idvalid: !0, showchatlist: this.detectXtralargeScreen(), showalert: !this.detectXtralargeScreen(), showemojimodal: !1 }, this.validateMeeting(this.state.token), this.beep = null, this.pulseInterval = null, this.aliveInterval = null, this.users = new Map, this.peers = new Map, this.myself = null, this.mystream = null, this.hubConnection = null, this.freader = new FileReader, this.handleMessageSubmit = this.handleMessageSubmit.bind(this), this.handleChange = this.handleChange.bind(this), this.leaveMeeting = this.leaveMeeting.bind(this), this.getUserCam = this.getUserCam.bind(this), this.addMedia = this.addMedia.bind(this), this.newUserArrived = this.newUserArrived.bind(this), this.userSaidHello = this.userSaidHello.bind(this), this.sendPulse = this.sendPulse.bind(this), this.receivePulse = this.receivePulse.bind(this), this.collectDeadUsers = this.collectDeadUsers.bind(this), this.hasVideoAudioCapability = this.hasVideoAudioCapability.bind(this), this.createPeer = this.createPeer.bind(this), this.loginHandler = this.loginHandler.bind(this), this.handleMyName = this.handleMyName.bind(this), this.handleNameForm = this.handleNameForm.bind(this), this.handleJoinMeeting = this.handleJoinMeeting.bind(this), this.userMediaError = this.userMediaError.bind(this), this.inviteHandler = this.inviteHandler.bind(this), this.closeInviteModal = this.closeInviteModal.bind(this), this.handleVideoToggle = this.handleVideoToggle.bind(this), this.handleAudioToggle = this.handleAudioToggle.bind(this), this.onAlertDismiss = this.onAlertDismiss.bind(this), this.onPeerStream = this.onPeerStream.bind(this), this.onPeerClose = this.onPeerClose.bind(this), this.handleEmojiModal = this.handleEmojiModal.bind(this), this.handleEmojiSelect = this.handleEmojiSelect.bind(this), this.handlePhotoClick = this.handlePhotoClick.bind(this), this.handleDocClick = this.handleDocClick.bind(this), this.handleFileInput = this.handleFileInput.bind(this), this.handleFileChunkUpload = this.handleFileChunkUpload.bind(this), this.processFileUpload = this.processFileUpload.bind(this), this.uploadFile = this.uploadFile.bind(this), this.hubConnectionClosed = this.hubConnectionClosed.bind(this), this.hubConnectionReconnecting = this.hubConnectionReconnecting.bind(this), this.hubConnectionReconnected = this.hubConnectionReconnected.bind(this), this.handleFileUploadCancel = this.handleFileUploadCancel.bind(this), this.receiveActionNotification = this.receiveActionNotification.bind(this), this.updateTextInputHeight = this.updateTextInputHeight.bind(this) } validateMeeting(e) { void 0 === this.state.id || null === this.state.id ? this.setState({ idvalid: !1 }) : fetch("/api/Meetings/" + this.state.id, { method: "get", headers: { Authorization: "Bearer " + e } }).then(e => { 200 === e.status ? e.json().then(e => { let t = this.state.messages; if (0 === t.length) { var a; if (null !== e.name && "" !== e.name) document.title = e.name, (a = new MessageInfo).sender = null, a.text = e.name, a.type = MessageEnum.Text, a.timeStamp = new Date, a.status = MessageStatusEnum.sent, t.push(a); if (null !== e.purpose && "" !== e.purpose) (a = new MessageInfo).sender = null, a.text = e.purpose, a.type = MessageEnum.Text, a.timeStamp = new Date, a.status = MessageStatusEnum.sent, t.push(a) } this.setState({ idvalid: !0, loading: !1, messages: t, meetingname: e.name }) }) : this.setState({ idvalid: !1 }) }) } closeInviteModal() { this.setState({ showinvite: !1 }) } inviteHandler() { this.setState({ showinvite: !0 }) } updateTextInputHeight() { if ("" !== this.state.textinput) { this.textinput.style.height = "inherit"; const e = window.getComputedStyle(this.textinput); parseInt(e.getPropertyValue("border-top-width"), 10), parseInt(e.getPropertyValue("padding-top"), 10), this.textinput.scrollHeight, parseInt(e.getPropertyValue("padding-bottom"), 10), parseInt(e.getPropertyValue("border-bottom-width"), 10); this.textinput.style.minHeight = `${this.textinput.scrollHeight}px` } else this.textinput.style.height = "40px", this.textinput.style.minHeight = "40px" } handleVideoToggle(e) { null !== this.mystream ? this.mystream.getVideoTracks().length > 0 && (this.mystream.getVideoTracks()[0].enabled = !this.state.videoplaying, this.setState({ videoplaying: !this.state.videoplaying }, () => { this.hubConnection.invoke("NotifyAction", this.state.id, this.state.myself, "2").catch(e => console.error(e)) })) : (this.setState({ videoplaying: !0, audioplaying: !0 }), this.getUserCam()) } handleAudioToggle(e) { null !== this.mystream ? this.mystream.getAudioTracks().length > 0 && (this.mystream.getAudioTracks()[0].enabled = !this.state.audioplaying, this.setState({ audioplaying: !this.state.audioplaying }, () => { this.hubConnection.invoke("NotifyAction", this.state.id, this.state.myself, "1").catch(e => console.error(e)) })) : (this.getUserCam(), this.setState({ audioplaying: !0 }, () => { this.hubConnection.invoke("NotifyAction", this.state.id, this.state.myself, "1").catch(e => console.log(e)) })) } handleMyName(e) { this.setState({ myname: e.target.value }) } loginHandler() { null != localStorage.getItem("token") && this.validate(localStorage.getItem("token")) } handleChange(e) { switch (e.target.name) { case "textinput": this.setState({ textinput: e.target.value }, () => { this.updateTextInputHeight() }) } } handleNameForm(e) { e.preventDefault(), this.myself.name = this.state.myname, this.setState({ joinmeeting: !0 }, () => { this.startHub() }) } handleJoinMeeting(e) { this.setState({ joinmeeting: !0 }, () => { null === this.hubConnection && this.startHub() }) } handleMessageSubmit(e) { e.preventDefault(), this.sendTextMessage() } handleEmojiSelect(e) { this.setState({ textinput: this.state.textinput + e }), this.textinput.focus() } handleEmojiModal() { this.setState({ showemojimodal: !this.state.showemojimodal }) } handlePhotoClick(e) { e.preventDefault(), this.state.loggedin ? this.fileinput.click() : alert("Log in to use this feature. Share files upto 300 MB in size.") } handleDocClick(e) { e.preventDefault(), this.state.loggedin ? this.fileinput.click() : alert("Log in to use this feature. Share files upto 300 MB in size.") } handleFileUploadCancel(e, t) { let a = this.state.filestoupload; for (var s = 0; a.length > s; s++) { if (a[s].name === t) { a.splice(s, 1), this.setState({ filestoupload: a }); break } } } handleFileInput(e) { if (this.fileinput.files.length > 10) return void alert("Only 10 files at a time."); for (var t = 0; t < this.fileinput.files.length; t++)if ((this.fileinput.files[t].size / 1048576).toFixed(1) > 300) return void alert("File size cannot exceed 300 MB"); let a = this.state.filestoupload; for (t = 0; t < this.fileinput.files.length; t++) { let e = { name: this.fileinput.files[t].name, filedata: this.fileinput.files[t], progresspercent: 0, serverfname: "", cancel: !1 }; a.push(e) } this.setState({ filestoupload: a }), this.fileinput.value = "", this.processFileUpload() } hubConnectionClosed(e) { console.log("Hub connection is closed"), null !== this.pulseInterval && clearInterval(this.pulseInterval), this.hubConnection.start().then(() => { console.log("Hub Connection started!"), this.hubConnection.invoke("JoinMeeting", this.state.id, this.myself.name).catch(e => console.log(e)), this.pulseInterval = setInterval(this.sendPulse, 3e3) }).catch(e => console.log("Error while establishing connection :(")) } hubConnectionReconnecting(e) { console.log("Hub connection is reconnecting") } hubConnectionReconnected(e) { console.log("Hub Connection Reconnected"), this.hubConnection.invoke("JoinMeeting", this.state.id, this.myself.name).catch(e => console.log(e)) } returnFileSize(e) { return e < 1024 ? e + "bytes" : e >= 1024 && e < 1048576 ? (e / 1024).toFixed(1) + "KB" : e >= 1048576 ? (e / 1048576).toFixed(1) + "MB" : void 0 } onAlertDismiss() { this.setState({ showalert: !1 }) } processFileUpload() { let e = null; this.state.filestoupload.length > 0 && (e = this.state.filestoupload[0]), null !== e && (this.freader = new FileReader, this.freader.uploadFile = this.uploadFile, this.uploadFile(this.state.id, e, 0)) } uploadFile(e, t, a) { var s = a + 1024e3 + 1, i = t.filedata.slice(a, s); this.freader.onloadend = (e => { e.target.readyState === FileReader.DONE && this.handleFileChunkUpload(e.target.result, t, a, s, 1024e3) }), this.freader.readAsDataURL(i) } handleFileChunkUpload(e, t, a, s, i) { const n = new FormData; n.set("f", e), n.set("meetingid", this.state.id), n.set("filename", t.name), n.set("gfn", !1), fetch("//" + window.location.host + "/api/meetings/uploadfile", { method: "post", body: n, headers: { Authorization: "Bearer " + localStorage.getItem("token") } }).then(e => { 200 === e.status && e.json().then(e => { t.serverfname = e.filename; let n = this.state.filestoupload; for (var l = 0; n.length > l; l++) { let e = n[l]; if (e.name === t.name) { var o = a + i; t.progresspercent = Math.floor(o / t.filedata.size * 100), e.progresspercent = t.progresspercent, s > t.filedata.size ? (n.splice(l, 1), t.filedata = null, this.hubConnection.invoke("SendTextMessage", this.state.id, this.myself, "https://" + window.location.host + "/api/meetings/media/" + this.state.id + "?f=" + t.serverfname).catch(e => { console.log("Unable to send file message to group."), console.log(e) }), this.setState({ filestoupload: n }), this.generateVideoThumbnail(t.serverfname, this.state.id), this.processFileUpload()) : (this.setState({ filestoupload: n }), this.uploadFile(this.state.id, t, s)); break } } }) }) } generateVideoThumbnail(e, t) { fetch("//" + window.location.host + "/api/members/GenerateThumbnail?filename=" + e + "&id=" + t, { headers: { Authorization: "Bearer " + localStorage.getItem("token") } }) } hasVideoAudioCapability() { return !(!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) } validate(e) { this.setState({ loading: !0 }), fetch("/api/Members/Validate", { method: "get", headers: { Authorization: "Bearer " + e } }).then(e => { 401 === e.status ? (localStorage.removeItem("token"), this.myself = new UserInfo, this.myself.memberID = null === this.props.pageid ? this.myself.memberID : this.props.pageid, this.myself.name = "", this.myself.videoCapable = this.hasVideoAudioCapability() && !this.detectEdgeorIE(), this.myself.peerCapable = SimplePeer.WEBRTC_SUPPORT && !this.detectEdgeorIE(), this.setState({ loggedin: !1, loading: !1 })) : 200 === e.status && e.json().then(e => { this.myself = new UserInfo, this.myself.memberID = e.id, this.myself.name = e.name, this.myself.videoCapable = this.hasVideoAudioCapability() && !this.detectEdgeorIE(), this.myself.peerCapable = SimplePeer.WEBRTC_SUPPORT && !this.detectEdgeorIE(), this.myself.pic = e.pic, this.setState({ loggedin: !0, loading: !1, joinmeeting: this.state.joinmeeting }) }) }) } startHub() { this.hubConnection = (new signalR.HubConnectionBuilder).withUrl("/meetinghub", { accessTokenFactory: () => this.state.token }).withAutomaticReconnect().build(), this.hubConnection.serverTimeoutInMilliseconds = 1e5, this.hubConnection.start().then(() => { console.log("Hub Connection started!"), this.hubConnection.invoke("JoinMeeting", this.state.id, this.myself.name).catch(e => console.log(e)), this.pulseInterval = setInterval(this.sendPulse, 3e3) }).catch(e => { console.log("Error while establishing connection :("), console.log(e) }), this.hubConnection.onclose(this.hubConnectionClosed), this.hubConnection.onreconnecting(this.hubConnectionReconnecting), this.hubConnection.onreconnected(this.hubConnectionReconnected), this.hubConnection.on("NewUserArrived", e => { this.newUserArrived(e) }), this.hubConnection.on("UpdateUser", e => { this.updateUser(e) }), this.hubConnection.on("UserLeft", e => { this.userLeft(e) }), this.hubConnection.on("UserSaidHello", (e, t) => { this.userSaidHello(e, t) }), this.hubConnection.on("SetMySelf", e => { this.setMySelf(e) }), this.hubConnection.on("ReceiveTextMessage", (e, t, a) => { this.receiveTextMessage(e, t, a) }), this.hubConnection.on("ReceiveSignal", (e, t, a) => { this.myself.memberID === e && void 0 !== this.peers.get(t.memberID) && this.peers.get(t.memberID).signal(a) }), this.hubConnection.on("ReceivePulse", e => { this.receivePulse(e) }), this.hubConnection.on("ReceiveActionNotification", (e, t) => { this.receiveActionNotification(e, t) }) } receivePulse(e) { void 0 !== this.users.get(e) && (this.users.get(e).lastpulse = Date.now()) } collectDeadUsers() { } setMySelf(e) { this.myself.videoCapable = this.hasVideoAudioCapability(), this.myself.peerCapable = SimplePeer.WEBRTC_SUPPORT, this.detectEdgeorIE() && (this.myself.videoCapable = !1, this.myself.peerCapable = !1), this.hubConnection.invoke("NotifyPresence", this.state.id, this.myself).catch(e => console.log(e)) } sendPulse() { this.hubConnection.state === signalR.HubConnectionState.Connected && this.hubConnection.invoke("SendPulse", this.state.id, this.myself.memberID).catch(e => console.log("sendPulse " + e)) } createPeer(e, t) { console.log("newuserarrived stream : "), console.log(this.mystream); let a = new SimplePeer({ initiator: e, config: { iceServers: [{ urls: "stun:stun.services.mozilla.com" }, { urls: "stun:stun.l.google.com:19302" }] }, stream: this.mystream }); a.memberID = t.memberID, a.hubConnection = this.hubConnection, a.myself = this.myself, a.meetingid = this.state.id, a.on("error", this.onPeerError), a.on("signal", this.onPeerSignal), a.on("connect", this.onPeerConnect), a.on("close", this.onPeerClose), a.on("stream", e => { this.onPeerStream(e, a.memberID) }), a.on("data", e => { console.log("got a message from peer1: " + e) }), this.peers.set(t.memberID, a) } onPeerSignal(e) { this.hubConnection.invoke("SendSignal", e, this.memberID, this.myself, this.meetingid).catch(e => console.log("SendSignal " + e)) } onPeerConnect() { this.send(this.myself.name + " peer connected.") } onPeerError(e) { console.log(this.cid + " peer gave error. connected:" + this.connected + " destroyed:" + this.destroyed), console.log(e) } onPeerStream(e, t) { console.log("received a stream"), console.log(e), void 0 !== this.users.get(t) && (this.users.get(t).stream = e, this.setState({ dummydate: Date.now() }, () => { this.users.forEach(function (e, t) { let a = document.getElementById("video" + e.memberID); null !== a && ("srcObject" in a ? a.srcObject = e.stream : a.src = window.URL.createObjectURL(e.stream), a.muted = !1, a.volume = .8, a.play()) }) })) } onPeerClose() { console.log("Peer Closed"); for (const [e, t] of this.users.entries()) void 0 !== this.peers.get(t.memberid) && null !== this.peers.get(t.memberid) && !this.peers.get(t.memberid).connected && this.peers.get(t.memberid).destroyed && this.peers.delete(t.memberid), this.users.delete(t.memberid), this.setState({ dummydate: Date.now() }); this.hubConnection.invoke("NotifyPresence", this.state.id, this.myself).catch(e => console.log(e)) } newUserArrived(e) { if (void 0 === this.users.get(e.memberID)) { let t = new UserInfo; t.connectionID = e.connectionID, t.memberID = e.memberID, t.name = e.name, t.pic = e.pic, t.videoCapable = e.videoCapable, t.peerCapable = e.peerCapable, this.users.set(e.memberID, t); let a = new MessageInfo; a.sender = null, a.text = t.name + " has joined the meeting.", t.videoCapable || t.peerCapable || (a.text = a.text + " No Video/Audio Capability."), a.type = MessageEnum.MemberAdd, a.status = MessageStatusEnum.notify; let s = this.state.messages; if (s.push(a), this.setState({ messages: s, showalert: !this.state.showchatlist }), this.playjoinbeep(), this.hubConnection.invoke("HelloUser", this.state.id, this.myself, e).catch(e => { console.log("Unable to say hello to new user."), console.log(e) }), this.myself.peerCapable && t.peerCapable) try { this.createPeer(!0, e) } catch (e) { console.log("Unable to create a new peer when newuserarrived"), this.myself.peerCapable = !1, this.hubConnection.invoke("UpdateUser", this.state.id, this.myself) } } } sendTextMessage() { "" !== this.state.textinput.trim() && (this.hubConnection.invoke("SendTextMessage", this.state.id, this.myself, this.state.textinput).catch(e => { console.log("Unable to send message to group."), console.error(e) }), this.setState({ textinput: "" }, () => { this.updateTextInputHeight() })) } receiveTextMessage(e, t, a) { var s = new MessageInfo; s.sender = e, s.text = t, s.type = MessageEnum.Text, s.timeStamp = a, s.status = MessageStatusEnum.sent; let i = this.state.messages; i.push(s), this.setState({ messages: i, showalert: !this.state.showchatlist }, () => { null !== this.state.meetingname && "" !== this.state.meetingname && localStorage.setItem(this.state.id, JSON.stringify(i)) }), this.playmsgbeep() } receiveActionNotification(e, t) { "1" == t ? this.setState({ dummydate: Date.now() }) : "2" === t && this.setState({ dummydate: Date.now() }) } userLeft(e) { var t = this.users.get(e); let a = new MessageInfo; a.sender = null, a.text = t.name + " has left.", a.type = MessageEnum.MemberLeave, a.status = MessageStatusEnum.notify; let s = this.state.messages; if (s.push(a), this.users.delete(e), null !== this.peers.get(e) || void 0 !== this.peers.get(e)) try { this.peers.get(e).destroy(), this.peers.delete(e) } catch (e) { console.log(e) } this.setState({ messages: s, showalert: !this.state.showchatlist }), this.playleftbeep() } updateUser(e) { if (void 0 !== this.users.get(e.memberID)) { var t = this.users.get(e.memberID).name; if (t !== e.name) { this.users.get(e.memberID).name = e.name; var a = new MessageInfo; a.sender = null, a.text = t + " has changed name to " + e.name + ".", a.type = MessageEnum.Text, a.status = MessageStatusEnum.notify; var s = this.state.messages; s.push(a), this.setState({ messages: s, showalert: !this.state.showchatlist }), this.playjoinbeep() } let i = !1; this.users.get(e.memberID).videoCapable !== e.videoCapable && (this.users.get(e.memberID).videoCapable = e.videoCapable, i = !0), this.users.get(e.memberID).peerCapable !== e.peerCapable && (this.users.get(e.memberID).peerCapable = e.peerCapable, i = !0), i && (this.setState({ dummydate: new Date }), this.playjoinbeep()) } } userSaidHello(e, t) { if (t.memberID !== this.myself.memberID) return; let a = new UserInfo; a.connectionID = e.connectionID, a.memberID = e.memberID, a.name = e.name, a.pic = e.pic, this.users.set(e.memberID, a); var s = new MessageInfo; s.sender = null, s.text = e.name + " is here.", a.videoCapable || a.peerCapable || (s.text = s.text + " No Video/Audio Capability."), s.type = MessageEnum.Text, s.status = MessageStatusEnum.sent; let i = this.state.messages; if (i.push(s), this.setState({ messages: i, showalert: !this.state.showchatlist }), this.playmsgbeep(), this.myself.peerCapable && a.peerCapable) try { this.createPeer(!1, e) } catch (e) { console.log("Unable to create a new peer when userSaidHello"), this.myself.peerCapable = !1, this.hubConnection.invoke("UpdateUser", this.state.id, this.myself) } } leaveMeeting() { this.hubConnection.invoke("LeaveMeeting", this.state.id, this.myself.memberID).catch(e => console.error(e)); try { if (null !== this.mystream) for (var e = 0; e < this.mystream.getTracks().length; e++)this.mystream.getTracks()[e].stop() } catch (e) { console.log("Error while stoping video and audio."), console.error(e) } for (const [e, t] of this.users.entries()) try { null !== this.peers.get(t.memberID) && void 0 !== this.peers.get(t.memberID) && null !== this.peers.get(t.memberID) && (this.peers.get(t.memberID).destroy(), this.peers.delete(t.memberID)), this.users.delete(t.memberID) } catch (e) { console.log("Error while deleting peer and deleting user"), console.error(e) } window.location.href = "//" + window.location.host } detectEdgeorIE() { !!!document.documentMode && window.StyleMedia; return !1 } detectMobileorTablet() { let e = !1; var t; return t = navigator.userAgent || navigator.vendor || window.opera, (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0, 4))) && (e = !0), e || window.matchMedia("(max-width: 768px)").matches } detectXtralargeScreen() { return window.matchMedia("(min-width: 1024px)").matches } getUserCam() { var e = { audio: !0, video: !0 }; navigator.mediaDevices.getUserMedia && navigator.mediaDevices.getUserMedia(e).then(this.addMedia).catch(this.userMediaError) } addMedia(e) { this.mystream = e, this.setState({ dummydate: new Date }, () => { var e = document.getElementById("myvideo"); e.srcObject = this.mystream, e.onloadedmetadata = function (t) { void 0 !== e && (e.volume = 0, e.muted = 0, e.play(), console.log(e.width + " " + e.height)) } }), this.mystream.getVideoTracks().length > 0 && (this.mystream.getVideoTracks()[0].enabled = this.state.videoplaying), this.mystream.getAudioTracks().length > 0 && (this.mystream.getAudioTracks()[0].enabled = this.state.audioplaying), this.myself.videoCapable = !0; for (const [e, t] of this.peers) t.addStream(this.mystream) } userMediaError(e) { console.log("Unable to access user media"), console.error(e), void 0 !== e.name && null !== e.name && ("notallowederror" === e.name.toLowerCase() ? alert("You have specifically denied access to camera and microphone. Please check browser title or address bar to see the notification.") : alert("Unable to access camera.")), this.setState({ videoplaying: !1, audioplaying: !1 }) } playmsgbeep() { let e = document.getElementById("chatbeep"); null != e && (e.currentTime = 0, e.volume = .15, e.muted = !1, e.play()) } playjoinbeep() { let e = document.getElementById("joinedbeep"); null != e && (e.currentTime = 0, e.volume = .15, e.muted = !1, e.play()) } playleftbeep() { let e = document.getElementById("userleftbeep"); null != e && (e.currentTime = 0, e.volume = .15, e.muted = !1, e.play()) } componentDidMount() { this.validate(this.state.token), this.aliveInterval = setInterval(this.collectDeadUsers, 5e3), this.scrollToBottom() } componentWillUnmount() { null !== this.aliveInterval && clearInterval(this.aliveInterval), null !== this.pulseInterval && clearInterval(this.pulseInterval) } componentDidUpdate() { this.scrollToBottom() } renderFileUploadProcessModal() { let e = []; for (var t = 0; t < this.state.filestoupload.length; t++) { let a = this.state.filestoupload[t]; e.push(React.createElement("div", { className: "row", key: t }, React.createElement("div", { className: "col-9 col-sm-10" }, React.createElement("div", { className: "progress" }, React.createElement("div", { className: "progress-bar progress-bar-animated", role: "progressbar", "aria-valuenow": a.progresspercent, "aria-valuemin": "0", "aria-valuemax": "100", style: { width: a.progresspercent + "%" } }))), React.createElement("div", { className: "col-3 col-sm-2" }, React.createElement("button", { type: "button", className: "btn btn-sm btn-light", onClick: e => this.handleFileUploadCancel(e, a.name) }, "Cancel")))) } return this.state.filestoupload.length > 0 ? React.createElement(React.Fragment, null, React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, e))))) : null } renderEmojiModal() { return this.state.showemojimodal ? React.createElement("div", { style: { position: "fixed", bottom: "45px", right: "15px", zIndex: "15" } }, React.createElement(Emoji, { onSelect: this.handleEmojiSelect })) : null } renderJoinMeetingModal() { return React.createElement(React.Fragment, null, React.createElement(NavMenu, { onLogin: this.loginHandler, onInvite: this.inviteHandler }), React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, React.createElement("div", { className: "text-center" }, React.createElement("button", { type: "button", className: "btn btn-primary btn-lg", onClick: this.handleJoinMeeting }, "Join Meeting"))))))) } renderValidateModal() { return React.createElement(React.Fragment, null, React.createElement(NavMenu, { onLogin: this.loginHandler, onInvite: this.inviteHandler }), React.createElement("div", { className: "container-fluid" }, React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-md-12" }, React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, React.createElement("p", { className: "m-2" }, "This meeting id cannot be found. Please recheck with the meeting organizer."), React.createElement("p", { className: "m-2" }, "Alternatively you can organize your own meeting. ", React.createElement("a", { href: "/meetings" }, "Organize a Meeting")))))))))) } renderInviteModal() { return React.createElement("div", { className: "container" }, React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-md-12" }, React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title" }, "Send Meeting Invites"), React.createElement("button", { type: "button", className: "close", "data-dismiss": "modal", "aria-label": "Close", onClick: this.closeInviteModal }, React.createElement("span", { "aria-hidden": "true" }, "×"))), React.createElement("div", { className: "modal-body" }, React.createElement("p", { className: "mt-10" }, "You can share this URL with anyone who wants to join the meeting."), React.createElement("input", { type: "text", value: window.location.href, autoFocus: "on", className: "form-control" }), React.createElement("p", { className: "mb-10" })))))))) } renderNameForm() { let e = this.detectEdgeorIE() ? React.createElement("p", null, "You are using either EDGE or INTERNET EXPLORER. Your access is ", React.createElement("strong", null, "restricted"), " to text chat only. You will have full feature access on ", React.createElement("strong", null, "chrome, firefox or safari"), ".") : null; return React.createElement("div", { className: "container" }, React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-md-12" }, React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, e, React.createElement("form", { onSubmit: this.handleNameForm }, React.createElement("input", { type: "text", required: !0, value: this.state.myname, autoFocus: "on", className: "form-control", maxLength: "20", onChange: this.handleMyName, placeholder: "Your Name Here" }), React.createElement("br", null), React.createElement("button", { type: "submit", className: "btn btn-primary" }, "Join Meeting"))))))))) } getUrlParameter(e, t) { e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]"); var a = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(t); return null === a ? "" : decodeURIComponent(a[1].replace(/\+/g, " ")) } getFileExtensionBasedName(e) { return this.getUrlParameter("f", e) } renderLinksInMessage(e) { var t = Date.now(); return e.text.startsWith("https://" + window.location.host + "/api/meetings/media/") ? e.text.toLowerCase().endsWith(".jpg") || e.text.toLowerCase().endsWith(".jpeg") || e.text.toLowerCase().endsWith(".png") || e.text.toLowerCase().endsWith(".gif") || e.text.toLowerCase().endsWith(".bmp") ? React.createElement("span", { id: t }, React.createElement("img", { src: e.text, className: "img-fluid d-block mt-1 mb-1 img-thumbnail", style: { maxWidth: "300px" } })) : e.text.toLowerCase().endsWith(".mp3") ? React.createElement("span", { id: t }, React.createElement("audio", { src: e.text, controls: !0, playsInline: !0, style: { maxWidth: "300px" } })) : e.text.toLowerCase().endsWith(".ogg") || e.text.toLowerCase().endsWith(".mp4") || e.text.toLowerCase().endsWith(".webm") || e.text.toLowerCase().endsWith(".mov") ? React.createElement("span", { id: t }, React.createElement("video", { src: e.text.toLowerCase(), controls: !0, playsInline: !0, style: { maxWidth: "300px" } })) : React.createElement("span", { id: t }, React.createElement("a", { href: e.text, target: "_blank" }, React.createElement("img", { src: "/icons/download-cloud.svg", className: "img-fluid", title: "download file" }), React.createElement("br", null), this.getFileExtensionBasedName(e.text.toLowerCase()))) : React.createElement("span", { id: t }, e.text.split("\n").map((e, t) => React.createElement(React.Fragment, { key: t }, e, React.createElement("br", null)))) } renderMessageList(e) { let t = React.createElement(React.Fragment, null); const a = []; for (var s in this.state.messages) { let e = this.state.messages[s]; if (null === e.sender) a.push(React.createElement("li", { className: "notify", key: s }, React.createElement("span", null, e.text))); else if (e.sender.memberID === this.myself.memberID) a.push(React.createElement("li", { className: "sent", key: s }, React.createElement("span", null, this.renderLinksInMessage(e), React.createElement("small", { className: "time" }, moment(e.timeStamp, "YYYYMMDD").fromNow())))); else { let t = "" !== e.sender.pic ? React.createElement("img", { src: e.sender.pic, width: "20", height: "20", className: "rounded img-fluid" }) : null; a.push(React.createElement("li", { className: "receive", key: s }, React.createElement("span", null, React.createElement("small", { className: "name" }, t, " ", e.sender.name, " -"), this.renderLinksInMessage(e), React.createElement("small", { className: "time" }, moment(e.timeStamp, "YYYYMMDD").fromNow())))) } } if (this.state.showalert && this.state.messages.length > 0) if (null === this.state.messages[this.state.messages.length - 1].sender) t = this.state.showalert ? React.createElement("div", { className: "alert alert-light meetingalert", role: "alert" }, this.state.messages[this.state.messages.length - 1].text) : null; else { let e = "" !== this.state.messages[this.state.messages.length - 1].sender.pic ? React.createElement("img", { src: this.state.messages[this.state.messages.length - 1].sender.pic, width: "20", height: "20", className: "rounded img-fluid" }) : null; t = this.state.showalert ? React.createElement("div", { className: "alert alert-light meetingalert", role: "alert" }, e, " ", this.state.messages[this.state.messages.length - 1].sender.name, " sent a message. ", React.createElement("a", { href: "#", className: "alert-link", onClick: this.showChatList }, "See Here"), React.createElement("button", { type: "button", className: "close", "data-dismiss": "alert", "aria-label": "Close", onClick: this.onAlertDismiss }, React.createElement("span", { "aria-hidden": "true" }, "×"))) : null } let i = "col-md-12"; return this.detectEdgeorIE() ? i = "col-md-12" : e && (i = "col-lg-3 col-xl-3"), this.state.showchatlist, React.createElement(React.Fragment, null, React.createElement("div", { id: "msgcont", className: i }, React.createElement("p", { className: "h5 text-left pl-1" }, "Chat"), React.createElement("ul", { id: "msglist", className: "pt-1", style: { marginBottom: "45px" } }, a, React.createElement("li", { style: { float: "left", clear: "both" }, ref: e => { this.messagesEnd = e } })), React.createElement("div", { style: { position: "absolute", bottom: "0px", left: "0px", width: "100%" } }, React.createElement("form", { className: "form-inline", onSubmit: this.handleMessageSubmit }, React.createElement("div", { className: "container-fluid" }, React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-12" }, React.createElement("textarea", { ref: e => { this.textinput = e }, name: "textinput", id: "msginput", placeholder: "Type a text message...", autoComplete: "off", className: "form-control", value: this.state.textinput, onChange: this.handleChange, rows: "1", width: "100%", style: { height: "40px", overflow: "hidden", resize: "none", maxHeight: "200px" } }), React.createElement("button", { type: "button", className: this.state.showemojimodal ? "btn btn-sm btn-warning d-none d-sm-block" : "btn btn-sm btn-light d-none d-sm-block", style: { position: "absolute", right: "60px", bottom: "5px" }, onClick: this.handleEmojiModal }, React.createElement("img", { src: "/icons/smile.svg", alt: "", width: "15", height: "15", title: "Send Message" })), React.createElement("button", { type: "submit", id: "msgsubmit", className: "btn btn-sm btn-dark", title: "Send Message", style: { position: "absolute", right: "20px", bottom: "5px" } }, React.createElement("img", { src: "/icons/send.svg", alt: "", width: "15", height: "15", title: "Send Message" })), React.createElement("button", { type: "button", className: "btn btn-primary d-none", title: "Show Chat Window", onClick: this.showChatList }, React.createElement("img", { src: "/icons/message-square.svg", alt: "", width: "24", height: "24", title: "Chat Window" }))))))))) } renderVideoTags() { let e = ""; const t = []; let a = 0; null !== this.mystream && a++, this.users.forEach(function (e, t) { null !== e.stream && e.stream.active && a++ }), e = a > 3 && this.detectXtralargeScreen() ? "col-3" : 3 === a && this.detectXtralargeScreen() ? "col-4" : a > 1 ? "col-6" : "col-12", this.users.forEach(function (a, s) { if (null !== a.stream && a.stream.active) { let n = "" !== a.pic ? React.createElement("img", { src: a.pic, width: "20", height: "20", className: "rounded ml-1 mb-1 mt-1" }) : null, l = null; for (var i = 0; i < a.stream.getAudioTracks().length; i++)(!1 === a.stream.getAudioTracks()[i].enabled || a.stream.getAudioTracks()[i].muted) && (l = React.createElement("span", { className: "badge badge-danger" }, React.createElement("img", { src: "/icons/mic-off.svg", alt: "", width: "15", height: "15", title: "Microphone Off" }))); t.push(React.createElement("div", { className: e, style: { position: "relative" }, key: s }, React.createElement("video", { id: "video" + a.memberID, autoPlay: !0, className: "img-fluid", playsInline: !0, muted: "muted", volume: "0", style: { maxHeight: "480px" } }), React.createElement("span", { style: { position: "absolute", left: "0px", top: "0px", backgroundColor: "rgba(255,255, 255, 0.5)", padding: "0px 15px" } }, n, " ", React.createElement("span", { className: "name p-1" }, a.name, " ")))) } }); let s = null !== this.mystream ? React.createElement("div", { className: e }, React.createElement("video", { id: "myvideo", muted: "muted", volume: "0", playsInline: !0, onMouseDown: this.handleDrag, className: "img-fluid", style: { maxHeight: "70vh" } })) : null; return t.length > 0 || null !== this.mystream ? React.createElement("div", { className: "col-md-12 col-lg-9 col-xl-9 meetingvideocol" }, React.createElement("div", { className: "row  align-items-center justify-content-center" }, t, s)) : null } render() { if (this.state.idvalid) { if (null !== this.myself && "" === this.myself.name.trim()) return React.createElement(React.Fragment, null, this.renderNameForm(), React.createElement(HeartBeat, { activity: "2", interval: "3000" })); if (this.state.joinmeeting) { if (this.state.joinmeeting) { let e = "" !== this.state.message ? React.createElement("div", { className: "fixedBottom " }, React.createElement(MessageStrip, { message: this.state.message, bsstyle: this.state.bsstyle })) : null, t = this.state.showinvite ? this.renderInviteModal() : null, a = this.renderVideoTags(), s = this.renderMessageList(null != a), i = this.state.videoplaying ? React.createElement("button", { type: "button", className: "btn btn-primary ml-1 mr-1 videoctrl", onClick: this.handleVideoToggle, onMouseDown: e => e.stopPropagation() }, React.createElement("img", { src: "/icons/video.svg", alt: "", width: "24", height: "24", title: "Video On" })) : React.createElement("button", { type: "button", className: "btn btn-secondary ml-1 mr-1 videoctrl", onClick: this.handleVideoToggle, onMouseDown: e => e.stopPropagation() }, React.createElement("img", { src: "/icons/video.svg", alt: "", width: "24", height: "24", title: "Video Off" })), n = this.state.audioplaying ? React.createElement("button", { type: "button", className: "btn btn-primary ml-1 mr-1 audioctrl", onClick: this.handleAudioToggle, onMouseDown: e => e.stopPropagation() }, React.createElement("img", { src: "/icons/mic.svg", alt: "", width: "24", height: "24", title: "Microphone On" })) : React.createElement("button", { type: "button", className: "btn btn-secondary ml-1 mr-1 audioctrl", onClick: this.handleAudioToggle, onMouseDown: e => e.stopPropagation() }, React.createElement("img", { src: "/icons/mic-off.svg", alt: "", width: "24", height: "24", title: "Microphone Off" })); return this.detectEdgeorIE() && (n = null, i = null), React.createElement(React.Fragment, null, React.createElement(NavMenu, { onLogin: this.loginHandler, fixed: !1 }), React.createElement("nav", { className: "bg-light border-bottom sticky-top", style: { padding: "4px", textAlign: "center" } }, React.createElement("ul", { className: "list-inline", style: { marginBottom: "0px" } }, React.createElement("li", { className: "list-inline-item" }, React.createElement("div", { className: "dropdown" }, React.createElement("a", { className: "btn btn-light dropdown-toggle", href: "#", role: "button", id: "navbarDropdown", "data-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" }, React.createElement("img", { src: "/icons/file-plus.svg", alt: "", width: "24", height: "24", title: "Share Files" })), React.createElement("div", { className: "dropdown-menu", "aria-labelledby": "navbarDropdown" }, React.createElement("a", { className: "dropdown-item", href: "#", onClick: this.handlePhotoClick, title: "20 Files at a time, max files size 10 MB" }, "Photos and Videos"), React.createElement("a", { className: "dropdown-item", href: "#", onClick: this.handleDocClick, title: "20 Files at a time, max files size 10 MB" }, "Documents"), React.createElement("input", { type: "file", style: { display: "none" }, ref: e => { this.fileinput = e }, accept: ".html,.htm,.doc,.pdf,.xls,.xlsx,.docx,audio/*,video/*,image/*", onChange: this.handleFileInput, multiple: "multiple" })))), React.createElement("li", { className: "list-inline-item" }, i), React.createElement("li", { className: "list-inline-item" }, n), React.createElement("li", { className: "list-inline-item" }, React.createElement("button", { type: "button", className: "btn btn-info", onClick: this.inviteHandler }, React.createElement("span", { className: "d-none d-sm-inline" }, "Invite "), React.createElement("img", { src: "/icons/plus-circle.svg", alt: "", width: "24", height: "24", title: "Invite" }))), React.createElement("li", { className: "list-inline-item" }, React.createElement("button", { type: "button", className: "btn btn-danger", onClick: this.leaveMeeting }, React.createElement("span", { className: "d-none d-sm-inline" }, "Leave "), React.createElement("img", { src: "/icons/user-minus.svg", alt: "", width: "24", height: "24", title: "Leave Meeting" }))))), React.createElement("div", { className: "container-fluid" }, React.createElement("div", { className: "row" }, a, s), e, t, React.createElement("audio", { id: "chatbeep", muted: "muted", volume: "0" }, React.createElement("source", { src: "/media/swiftly.mp3" }), React.createElement("source", { src: "/media/swiftly.m4r" }), React.createElement("source", { src: "/media/swiftly.ogg" })), React.createElement("audio", { id: "joinedbeep", muted: "muted", volume: "0" }, React.createElement("source", { src: "/media/got-it-done.mp3" }), React.createElement("source", { src: "/media/got-it-done.m4r" }), React.createElement("source", { src: "/media/got-it-done.ogg" })), React.createElement("audio", { id: "userleftbeep", muted: "muted", volume: "0" }, React.createElement("source", { src: "/media/get-outta-here.mp3" }), React.createElement("source", { src: "/media/get-outta-here.m4r" }), React.createElement("source", { src: "/media/get-outta-here.ogg" }))), this.renderFileUploadProcessModal(), this.renderEmojiModal(), React.createElement(HeartBeat, { activity: "2", interval: "3000" })) } return null } return React.createElement(React.Fragment, null, this.renderJoinMeetingModal(), React.createElement(HeartBeat, { activity: "2", interval: "3000" })) } return React.createElement(React.Fragment, null, " ", this.renderValidateModal(), React.createElement(HeartBeat, { activity: "2", interval: "3000" })) } }