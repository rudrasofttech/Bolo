"use strict"; function _defineProperty(e, t, a) { return t in e ? Object.defineProperty(e, t, { value: a, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = a, e } class App extends React.Component { constructor(e) { super(e), _defineProperty(this, "setToken", e => { this.setState({ token: e }) }), _defineProperty(this, "setData", e => { this.setState({ data: e }) }), this.state = { token: localStorage.getItem("token"), user: localStorage.getItem("user"), mainview: null === localStorage.getItem("token") ? "login" : "conversation", loginform: { email: "", password: "" }, registerform: { name: "", email: "" } }, this.fetchData = this.fetchData.bind(this), this.loginHandler = this.loginHandler.bind(this) } componentDidMount() { null !== localStorage.getItem("token") && this.fetchData() } loginHandler() { null != localStorage.getItem("token") && this.fetchData() } fetchData() { fetch("//" + window.location.host + "/api/Members/Validate", { method: "get", headers: { Authorization: "Bearer " + localStorage.getItem("token") } }).then(e => { 401 === e.status ? (localStorage.removeItem("token"), localStorage.clear(), this.setState({ bsstyle: "danger", message: "Authorization has been denied for this request.", loggedin: !1, loading: !1, user: null, token: "" })) : 200 === e.status && e.json().then(e => { this.setState({ bsstyle: "", message: "", loggedin: !0, loading: !1, user: e, mainview: "conversation" }) }) }) } renderHeader() { if ("login" !== this.state.mainview && "register" !== this.state.mainview) { let e = [], t = !0; null === localStorage.getItem("token") && (t = !1); let a = null; return t && null !== this.state.user && (a = React.createElement("img", { src: this.state.user.pic, width: "20", height: "20", className: "rounded-circle" })), t ? (e.push(React.createElement("button", { key: "memberlinkli", type: "button", className: "btn btn-dark me-2 membernavlink", onClick: () => { this.setState({ mainview: "profile" }) } }, a, " ", null !== this.state.user ? this.state.user.name : "")), e.push(React.createElement("button", { key: "logoutlinkli", type: "button", className: "btn btn-dark", title: "Sign out", onClick: e => { e.preventDefault(), localStorage.clear(), location.reload() } }, React.createElement("i", { className: "bi bi-power" })))) : (e.push(React.createElement("button", { key: "loginlinkli", type: "button", className: "btn btn-dark me-2", onClick: () => { this.setState({ mainview: "login" }) } }, "Login")), e.push(React.createElement("button", { key: "registerlinkli", type: "button", className: "btn btn-dark", onClick: () => { this.setState({ mainview: "register" }) } }, "Register"))), React.createElement("div", { className: "container-fluid bg-dark" }, React.createElement("header", { className: "d-flex flex-wrap align-items-center justify-content-center justify-content-md-between py-1 " }, React.createElement("a", { href: "/", className: "d-flex align-items-center col-md-3 mb-2 mb-md-0 text-white text-decoration-none" }, "Waarta"), React.createElement("ul", { className: "nav col-12 col-md-auto mb-2 justify-content-center mb-md-0" }, React.createElement("li", null, React.createElement("a", { className: "nav-link px-2 text-white", onClick: () => { this.setState({ mainview: "conversation" }) }, title: "Chat" }, React.createElement("i", { className: "bi bi-chat-dots" }), " Chat")), React.createElement("li", null, React.createElement("a", { className: "nav-link px-2 text-white", onClick: () => { this.setState({ mainview: "discussion" }) }, title: "Discussion" }, React.createElement("i", { className: "bi bi-people-fill" }), " Discussion"))), React.createElement("div", { className: "col-md-3 text-end" }, e, React.createElement("a", { className: "px-2 text-white", href: "/faq", title: "Frequently Asked Questions" }, React.createElement("i", { className: "bi bi-patch-question" })), React.createElement("a", { className: "px-2 text-white", href: "/privacy", title: "Privacy" }, React.createElement("i", { className: "bi bi-eye-slash-fill" }))))) } return null } renderLogin() { return "login" == this.state.mainview ? React.createElement("div", { className: "row align-items-center justify-content-center m-3", style: { height: "85vh" } }, React.createElement("div", { className: "col-4" }, React.createElement("h1", { className: "cover-heading", style: { fontSize: "3.5rem" } }, "Waarta"), React.createElement("p", { className: "lead" }, "Easily connect with people. Have meaningful conversations. Free exchange of Ideas. Get things done.", React.createElement("br", null), " Made in India.")), React.createElement("div", { className: "col-4" }, React.createElement(RegisterForm, { onLogin: this.loginHandler, beginWithRegister: !1 }))) : null } renderRegister(e, t) { return "register" === this.state.mainview ? React.createElement("div", { className: "row justify-content-center m-3" }, React.createElement("div", { className: "col-4" }), React.createElement("div", { className: "col-4" }, React.createElement(RegisterForm, { onLogin: this.loginHandler, beginWithRegister: !1 }))) : null } renderProfile() { return "profile" === this.state.mainview ? React.createElement("div", { className: "container" }, React.createElement(ManageProfile, { onProfileChange: () => { this.fetchData() } })) : null } renderConversation() { return "conversation" === this.state.mainview ? React.createElement(Conversation, null) : null } render() { let e = this.state.loading ? React.createElement("div", { className: "progress", style: { height: "5px" } }, React.createElement("div", { className: "progress-bar progress-bar-striped progress-bar-animated", role: "progressbar", "aria-valuenow": "75", "aria-valuemin": "0", "aria-valuemax": "100", style: { width: "100%" } })) : null, t = "" !== this.state.message ? React.createElement("div", { className: "mt-1 alert alert-" + this.state.bsstyle }, this.state.message) : null; return React.createElement(AuthContext.Provider, { value: { data: this.state.data, token: this.state.token, setToken: this.setToken, setData: this.setData } }, this.renderHeader(), this.renderLogin(), this.renderProfile(), this.renderRegister(t, e), this.renderConversation()) } }