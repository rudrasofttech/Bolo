"use strict"; class Welcome extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: null, bsstyle: '', message: '', token: localStorage.getItem("token") === null ? '' : localStorage.getItem("token"), registermodal: false, showprofilemodal: false, memberpic: '' }; this.loginHandler = this.loginHandler.bind(this); this.handleLogin = this.handleLogin.bind(this); this.toggleProfileModal = this.toggleProfileModal.bind(this); this.closeRegisterModal = this.closeRegisterModal.bind(this) } componentDidMount() { if (localStorage.getItem("token") != null) { this.validate(localStorage.getItem("token")) } } loginHandler() { if (localStorage.getItem("token") != null) { this.validate(localStorage.getItem("token")); this.setState({ loggedin: true, registermodal: false, registerFormBeginWith: false }) } } validate(t) { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Members/Validate', { method: 'get', headers: { 'Authorization': 'Bearer ' + t } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false, token: null }) } else if (response.status === 200) { response.json().then(data => { this.setState({ loggedin: true, loading: false, myself: data, memberpic: data.pic }) }) } }) } handleLogin(e) { e.preventDefault(); this.setState({ registermodal: true, registerFormBeginWith: false }) } toggleProfileModal() { this.setState({ showprofilemodal: !this.state.showprofilemodal }) } closeRegisterModal() { this.setState({ registermodal: false }) } renderRegisterModal() { if (this.state.registermodal) { return React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-lg", style: { color: '#000', textShadow: 'none', textAlign: 'left', borderRadius: '5px' } }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, React.createElement("button", { type: "button", className: "close pull-right", "data-dismiss": "modal", "aria-label": "Close", onClick: this.closeRegisterModal }, React.createElement("span", { "aria-hidden": "true" }, "X")), React.createElement(RegisterForm, { onLogin: this.loginHandler, beginWithRegister: this.state.registerFormBeginWith }))))) } else { return null } } renderProfileModal() { if (this.state.showprofilemodal) { return React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-dialog-scrollable modal-xl", style: { color: '#000', textShadow: 'none', textAlign: 'left', borderRadius: '5px' } }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title" }, "Profile Information"), React.createElement("button", { type: "button", className: "btn-close", "data-bs-dismiss": "modal", "aria-label": "Close", onClick: this.toggleProfileModal })), React.createElement(ManageProfile, { onProfileChange: this.handleProfileChange })))) } else { return null } } render() { let profilepic = null; let loading = this.state.loading ? React.createElement("div", { className: "progress", style: { height: "5px" } }, React.createElement("div", { className: "progress-bar progress-bar-striped progress-bar-animated", role: "progressbar", "aria-valuenow": "75", "aria-valuemin": "0", "aria-valuemax": "100", style: { width: "100%" } })) : null; let profileinfo = null; if (this.state.myself === null) { profileinfo = React.createElement("button", { className: "btn btn-lg btn-link m-2", style: { color: '#fff' }, onClick: this.handleLogin }, "Sign In / Register") } else { if (this.state.loggedin && this.state.memberpic !== "") { profilepic = React.createElement("img", { src: this.state.memberpic, style: { border: '2px solid #fff', marginRight: '10px' }, width: "40", height: "40", className: "rounded-circle" }) } profileinfo = React.createElement("button", { className: "btn btn-lg btn-link m-2", style: { color: '#fff' }, onClick: this.toggleProfileModal }, profilepic, "Welcome, ", this.state.myself.name) } let welcomehtml = React.createElement("p", { className: "lead" }, profileinfo, React.createElement("br", null), React.createElement("a", { href: "/discussions", className: "btn btn-lg btn-secondary m-2" }, "Discussions"), React.createElement("a", { href: "/chat", className: "btn btn-lg btn-secondary m-2" }, "Conversations")); return React.createElement(React.Fragment, null, loading, welcomehtml, this.renderRegisterModal(), this.renderProfileModal()) } }