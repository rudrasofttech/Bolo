"use strict"; function _defineProperty(e, t, a) { return t in e ? Object.defineProperty(e, t, { value: a, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = a, e } class Discussion extends React.Component { constructor(e) { super(e), _defineProperty(this, "scrollToBottom", () => { this.detectMobileorTablet() || void 0 !== this.messagesEnd && null !== this.messagesEnd && this.messagesEnd.scrollIntoView({ behavior: "smooth" }) }); let t = !0; null == localStorage.getItem("token") && (t = !1), this.state = { redirectto: "", textinput: "", filestoupload: [], myself: null, showadd: !1, videoplaying: !1, audioplaying: !1, loading: !1, loggedin: t, bsstyle: "", message: "", members: [], discussion: null === this.props.discussion ? { id: "", name: "", purpose: "", pic: "" } : this.props.discussion, messages: new Map, token: null == localStorage.getItem("token") ? "" : localStorage.getItem("token"), dummydate: new Date, idvalid: !0, showemojimodal: !1, screensplit: !1, showmembers: !1 }, this.hasVideoAudioCapability = this.hasVideoAudioCapability.bind(this), this.handleChange = this.handleChange.bind(this), this.handleBackButton = this.handleBackButton.bind(this), this.updateTextInputHeight = this.updateTextInputHeight.bind(this), this.sendMessage = this.sendMessage.bind(this), this.freader = new FileReader, this.handleEmojiModal = this.handleEmojiModal.bind(this), this.handleEmojiSelect = this.handleEmojiSelect.bind(this), this.handlePhotoClick = this.handlePhotoClick.bind(this), this.handleDocClick = this.handleDocClick.bind(this), this.handleFileInput = this.handleFileInput.bind(this), this.handleFileChunkUpload = this.handleFileChunkUpload.bind(this), this.processFileUpload = this.processFileUpload.bind(this), this.uploadFile = this.uploadFile.bind(this), this.handleMembersButton = this.handleMembersButton.bind(this), this.handleMembersModalClose = this.handleMembersModalClose.bind(this), this.handleAdd = this.handleAdd.bind(this), this.handleInviteModalClose = this.handleInviteModalClose.bind(this), this.handleLeave = this.handleLeave.bind(this), this.handlePurgeDiscussion = this.handlePurgeDiscussion.bind(this) } detectEdgeorIE() { !!!document.documentMode && window.StyleMedia; return !1 } detectMobileorTablet() { let e = !1; var t; return t = navigator.userAgent || navigator.vendor || window.opera, (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0, 4))) && (e = !0), e || window.matchMedia("(max-width: 768px)").matches } detectXtralargeScreen() { return window.matchMedia("(min-width: 1024px)").matches } hasVideoAudioCapability() { return !(!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) } validateDiscussionObject(e) { void 0 === this.state.discussion || "" === this.state.discussion.id ? this.setState({ idvalid: !1 }) : fetch("/api/Discussions/" + this.state.discussion.id, { method: "get", headers: { Authorization: "Bearer " + e } }).then(e => { 200 === e.status ? e.json().then(e => { this.setState({ idvalid: !0, loading: !1, meetingname: e.name }), this.getMessages(), this.getMembers(), this.startHub() }) : this.setState({ idvalid: !1 }) }) } validate(e) { this.setState({ loading: !0 }), fetch("/api/Members/Validate", { method: "get", headers: { Authorization: "Bearer " + e } }).then(e => { 401 === e.status ? (localStorage.removeItem("token"), this.props.handleShowDiscussions(!0)) : 200 === e.status && e.json().then(e => { console.log(e), this.setState({ loggedin: !0, loading: !1, myself: { id: e.id, name: e.name, videoCapable: this.hasVideoAudioCapability() && !this.detectEdgeorIE(), peerCapable: SimplePeer.WEBRTC_SUPPORT && !this.detectEdgeorIE(), pic: e.pic } }) }) }) } getMessages() { fetch("/api/MeetingMessage?mid=" + this.state.discussion.id, { method: "get", headers: { Authorization: "Bearer " + this.state.token } }).then(e => { 200 === e.status && e.json().then(e => { console.log(e); var t = new Map; for (var a in e) t.set(e[a].id, e[a]); this.setState({ messages: t }) }) }) } getMembers() { fetch("/api/Discussions/members/" + this.state.discussion.id, { method: "get", headers: { Authorization: "Bearer " + this.state.token } }).then(e => { 200 === e.status && e.json().then(e => { console.log(e), this.setState({ members: e }) }) }) } updateTextInputHeight() { if ("" !== this.state.textinput) { const e = window.getComputedStyle(this.textinput); parseInt(e.getPropertyValue("border-top-width"), 10), parseInt(e.getPropertyValue("padding-top"), 10), this.textinput.scrollHeight, parseInt(e.getPropertyValue("padding-bottom"), 10), parseInt(e.getPropertyValue("border-bottom-width"), 10); this.textinput.style.height = `${this.textinput.scrollHeight}px` } else this.textinput.style.height = "40px", this.textinput.style.minHeight = "40px" } startHub() { this.hubConnection = (new signalR.HubConnectionBuilder).withUrl("/personchathub", { accessTokenFactory: () => this.state.token }).withAutomaticReconnect().build(), this.hubConnection.serverTimeoutInMilliseconds = 1e5, this.hubConnection.start().then(() => { console.log("Hub Connection started!") }).catch(e => { console.log("Error while establishing connection :("), console.log(e) }), this.hubConnection.onclose(this.hubConnectionClosed), this.hubConnection.onreconnecting(this.hubConnectionReconnecting), this.hubConnection.onreconnected(this.hubConnectionReconnected), this.hubConnection.on("ReceiveDiscussionMessage", (e, t) => { console.log("rec"), this.receiveTextMessage(e, t) }) } receiveTextMessage(e, t) { console.log("receive message"); let a = this.state.messages; a.set(t.id, t), this.setState({ messages: a, showalert: !this.state.showchatlist }, () => { null !== this.state.discussion && localStorage.setItem(this.state.discussion.id, JSON.stringify(a)) }), this.playmsgbeep() } playmsgbeep() { let e = document.getElementById("chatbeep"); null != e && (e.currentTime = 0, e.volume = .15, e.muted = !1, e.play()) } playjoinbeep() { let e = document.getElementById("joinedbeep"); null != e && (e.currentTime = 0, e.volume = .15, e.muted = !1, e.play()) } playleftbeep() { let e = document.getElementById("userleftbeep"); null != e && (e.currentTime = 0, e.volume = .15, e.muted = !1, e.play()) } componentDidMount() { this.validate(this.state.token), this.validateDiscussionObject(this.state.discussion), this.scrollToBottom() } generateVideoThumbnail(e, t) { fetch("//" + window.location.host + "/api/members/GenerateThumbnail?filename=" + e + "&id=" + t, { headers: { Authorization: "Bearer " + localStorage.getItem("token") } }) } processFileUpload() { let e = null; this.state.filestoupload.length > 0 && (e = this.state.filestoupload[0]), null !== e && (this.freader = new FileReader, this.freader.uploadFile = this.uploadFile, this.uploadFile(this.state.discussion.id, e, 0)) } uploadFile(e, t, a) { var s = a + 1024e3 + 1, i = t.filedata.slice(a, s); this.freader.onloadend = (e => { e.target.readyState === FileReader.DONE && this.handleFileChunkUpload(e.target.result, t, a, s, 1024e3) }), this.freader.readAsDataURL(i) } handleFileChunkUpload(e, t, a, s, i) { const l = new FormData; l.set("f", e), l.set("meetingid", this.state.discussion.id), l.set("filename", t.name), l.set("gfn", !1), fetch("//" + window.location.host + "/api/Discussions/uploadfile", { method: "post", body: l, headers: { Authorization: "Bearer " + localStorage.getItem("token") } }).then(e => { 200 === e.status && e.json().then(e => { t.serverfname = e.filename; let l = this.state.filestoupload; for (var n = 0; l.length > n; n++) { let e = l[n]; if (e.name === t.name) { var o = a + i; t.progresspercent = Math.floor(o / t.filedata.size * 100), e.progresspercent = t.progresspercent, s > t.filedata.size ? (l.splice(n, 1), t.filedata = null, fetch("api/MeetingMessage", { method: "post", body: JSON.stringify({ meetingid: this.state.discussion.id, message: "https://" + window.location.host + "/api/Discussions/media/" + this.state.discussion.id + "?f=" + t.serverfname }), headers: { Authorization: "Bearer " + localStorage.getItem("token"), "Content-Type": "application/json" } }), this.setState({ filestoupload: l }), this.generateVideoThumbnail(t.serverfname, this.state.discussion.id), this.processFileUpload()) : (this.setState({ filestoupload: l }), this.uploadFile(this.state.discussion.id, t, s)); break } } }) }) } handleChange(e) { switch (e.target.name) { case "textinput": this.setState({ textinput: e.target.value }, () => { this.updateTextInputHeight() }) } } handleBackButton() { this.props.handleShowDiscussions(!0) } handlePurgeDiscussion() { confirm("You are about purge this discussion, are you sure?") && fetch("/api/Discussions/purge/" + this.state.discussion.id, { method: "get", headers: { Authorization: "Bearer " + this.state.token } }).then(e => { 200 === e.status && this.props.handleShowDiscussions(!0) }) } handleAdd() { this.setState({ showadd: !0 }) } handleInviteModalClose() { this.setState({ showadd: !1 }) } handleLeave() { confirm("You are about leave this discussion, are you sure?") && fetch("/api/Discussions/leave/" + this.state.discussion.id, { method: "get", headers: { Authorization: "Bearer " + this.state.token } }).then(e => { 200 === e.status && this.props.handleShowDiscussions(!0) }) } handleAddMemberButton(e) { fetch("/api/Discussions/addto/" + this.state.discussion.id + "?memberid=" + e, { method: "get", headers: { Authorization: "Bearer " + this.state.token } }).then(e => { 200 === e.status && (alert("Member Added"), this.getMembers()) }) } handleMembersButton() { this.setState({ showmembers: !0 }) } handleMembersModalClose() { this.setState({ showmembers: !1 }) } handleEmojiSelect(e) { this.setState({ textinput: this.state.textinput + e }), this.textinput.focus() } handleEmojiModal() { this.setState({ showemojimodal: !this.state.showemojimodal }) } handlePhotoClick(e) { e.preventDefault(), this.state.loggedin ? this.fileinput.click() : alert("Log in to use this feature. Share files upto 300 MB in size.") } handleDocClick(e) { e.preventDefault(), this.state.loggedin ? this.fileinput.click() : alert("Log in to use this feature. Share files upto 300 MB in size.") } handleFileUploadCancel(e, t) { let a = this.state.filestoupload; for (var s = 0; a.length > s; s++) { if (a[s].name === t) { a.splice(s, 1), this.setState({ filestoupload: a }); break } } } handleFileInput(e) { if (this.fileinput.files.length > 10) return void alert("Only 10 files at a time."); for (var t = 0; t < this.fileinput.files.length; t++)if ((this.fileinput.files[t].size / 1048576).toFixed(1) > 300) return void alert("File size cannot exceed 300 MB"); let a = this.state.filestoupload; for (t = 0; t < this.fileinput.files.length; t++) { let e = { name: this.fileinput.files[t].name, filedata: this.fileinput.files[t], progresspercent: 0, serverfname: "", cancel: !1 }; a.push(e) } this.setState({ filestoupload: a }), this.fileinput.value = "", this.processFileUpload() } sendMessage() { fetch("api/MeetingMessage", { method: "post", body: JSON.stringify({ meetingid: this.state.discussion.id, message: this.state.textinput }), headers: { Authorization: "Bearer " + localStorage.getItem("token"), "Content-Type": "application/json" } }).then(e => { this.setState({ loading: !1 }), 200 === e.status ? e.json().then(e => { console.log(e), this.setState({ textinput: "" }, () => { this.updateTextInputHeight() }) }) : this.setState({ bsstyle: "danger", message: "Unable to send message. Please try again." }) }) } renderFileUploadProcessModal() { let e = []; for (var t = 0; t < this.state.filestoupload.length; t++) { let a = this.state.filestoupload[t]; e.push(React.createElement("div", { className: "row", key: t }, React.createElement("div", { className: "col-9 col-sm-10" }, React.createElement("div", { className: "progress" }, React.createElement("div", { className: "progress-bar progress-bar-animated", role: "progressbar", "aria-valuenow": a.progresspercent, "aria-valuemin": "0", "aria-valuemax": "100", style: { width: a.progresspercent + "%" } }))), React.createElement("div", { className: "col-3 col-sm-2" }, React.createElement("button", { type: "button", className: "btn btn-sm btn-light", onClick: e => this.handleFileUploadCancel(e, a.name) }, "Cancel")))) } return this.state.filestoupload.length > 0 ? React.createElement(React.Fragment, null, React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, e))))) : null } renderEmojiModal() { return this.state.showemojimodal ? React.createElement("tr", null, React.createElement("td", { colSpan: "3" }, React.createElement(Emoji, { onSelect: this.handleEmojiSelect }))) : null } getUrlParameter(e, t) { e = e.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]"); var a = new RegExp("[\\?&]" + e + "=([^&#]*)").exec(t); return null === a ? "" : decodeURIComponent(a[1].replace(/\+/g, " ")) } getFileExtensionBasedName(e) { return this.getUrlParameter("f", e) } renderAddModal() { if (this.state.showadd) { const e = []; return (null !== localStorage.getItem("contacts") ? new Map(JSON.parse(localStorage.getItem("contacts"))) : new Map).forEach((t, a) => { let s = t.person, i = t.boloRelation === BoloRelationType.Blocked ? React.createElement("span", { className: "badge bg-danger" }, "Blocked") : null, l = "" !== s.pic ? React.createElement("img", { src: s.pic, className: "img-fluid", style: { width: "30px" }, alt: "" }) : null; e.push(React.createElement("tr", null, React.createElement("td", null, l, s.name, " ", i), React.createElement("td", { style: { width: "40px" } }, React.createElement("button", { type: "button", className: "btn btn-sm btn-link", onClick: () => { this.handleAddMemberButton(s.id) } }, "Add")))) }), React.createElement("div", { className: "modal d-block", id: "invitesModal", tabIndex: "-1", "aria-labelledby": "invitesModalLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-dialog-scrollable" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title", id: "invitesModalLabel" }, "Contacts"), React.createElement("button", { type: "button", className: "btn-close", "data-bs-dismiss": "modal", "aria-label": "Close", onClick: this.handleInviteModalClose })), React.createElement("div", { className: "modal-body" }, React.createElement("table", { className: "table table-hover", style: { width: "100%" } }, React.createElement("tbody", null, e)))))) } return null } renderMembers() { if (this.state.showmembers) { const t = []; if (null != this.state.myself) for (var e in this.state.members) { let a = this.state.members[e], s = "" !== a.member.pic ? React.createElement("img", { src: a.member.pic, className: "img-fluid", style: { width: "30px" }, alt: "" }) : null, i = "", l = null; switch (this.state.myself.id === a.member.id && (l = React.createElement("span", { className: "badge bg-primary" }, "You")), a.memberType) { case 6: i = React.createElement("span", { className: "badge bg-success" }, "Owner"); break; case 3: i = React.createElement("span", { className: "badge bg-primary" }, "Admin"); break; case 1: i = React.createElement("span", { className: "badge bg-light text-dark" }, "General"); break; case 4: i = React.createElement("span", { className: "badge bg-warning text-dark" }, "Pending"); break; case 5: i = React.createElement("span", { className: "badge bg-danger" }, "Blocked") }t.push(React.createElement("tr", null, React.createElement("td", null, s, " ", a.member.name, " ", l), React.createElement("td", { style: { width: "40px" } }, i))) } return React.createElement("div", { className: "modal d-block", id: "membersModal", tabIndex: "-1", "aria-labelledby": "membersModalLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-dialog-scrollable" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title", id: "membersModalLabel" }, "Members"), React.createElement("button", { type: "button", className: "btn-close", "data-bs-dismiss": "modal", "aria-label": "Close", onClick: this.handleMembersModalClose })), React.createElement("div", { className: "modal-body" }, React.createElement("table", { className: "table table-hover", style: { width: "100%" } }, React.createElement("tbody", null, t)))))) } return null } renderLinksInMessage(e) { var t = e.id; return e.message.startsWith("https://" + window.location.host + "/api/Discussions/media/") ? e.message.toLowerCase().endsWith(".jpg") || e.message.toLowerCase().endsWith(".jpeg") || e.message.toLowerCase().endsWith(".png") || e.message.toLowerCase().endsWith(".gif") || e.message.toLowerCase().endsWith(".bmp") ? React.createElement("img", { src: e.message, className: "img-fluid mt-2 mb-2", style: { maxWidth: "300px" }, title: "", alt: "" }) : e.message.toLowerCase().endsWith(".mp3") ? React.createElement("audio", { src: e.message, controls: !0, playsInline: !0, style: { maxWidth: "300px" }, className: "mt-2 mb-2" }) : e.message.toLowerCase().endsWith(".ogg") || e.message.toLowerCase().endsWith(".mp4") || e.message.toLowerCase().endsWith(".webm") || e.message.toLowerCase().endsWith(".mov") ? React.createElement("video", { src: e.message.toLowerCase(), controls: !0, playsInline: !0, style: { maxWidth: "300px" }, className: "mt-2 mb-2" }) : React.createElement("a", { href: e.message, target: "_blank" }, this.getFileExtensionBasedName(e.message.toLowerCase())) : React.createElement("span", { id: t }, e.message.split("\n").map((e, t) => React.createElement(React.Fragment, { key: t }, e, React.createElement("br", null)))) } renderMessageList() { const e = []; if (null != this.state.myself) for (const [t, a] of this.state.messages.entries()) if (null === a.sentBy) e.push(React.createElement("li", { className: "notify", key: t }, a.message)); else if (a.sentBy.id === this.state.myself.id) e.push(React.createElement("li", { className: "sent p-2 border-bottom border-dark border-1", key: t }, React.createElement("small", { className: "d-block" }, React.createElement("strong", null, "You"), " sent ", moment.utc(a.sentDate).local().fromNow()), this.renderLinksInMessage(a))); else { let s = "" !== a.sentBy.pic ? React.createElement("img", { src: a.sentBy.pic, width: "15", height: "15", className: "rounded img-fluid" }) : null; e.push(React.createElement("li", { className: "receive p-2 border-bottom border-primary border-1", key: t }, React.createElement("small", { className: "d-block", style: { fontSize: "0.75rem" } }, s, " ", React.createElement("strong", null, a.sentBy.name), " sent ", moment.utc(a.sentDate).local().fromNow()), this.renderLinksInMessage(a))) } let t = "col-12"; return this.state.screensplit && (t = "col-9"), React.createElement(React.Fragment, null, React.createElement("div", { className: t }, React.createElement("div", { id: "msgcont" }, React.createElement("ul", { id: "msglist", style: { margin: "45px 0px" } }, e, React.createElement("li", { style: { float: "left", clear: "both" }, ref: e => { this.messagesEnd = e } }))))) } render() { let e = null, t = null, a = React.createElement("li", null, React.createElement("a", { className: "dropdown-item", onClick: this.handleMembersButton }, React.createElement("i", { className: "bi bi-people-fill" }), " Members")), s = null; switch (this.state.discussion.memberRelation) { case 6: t = React.createElement("li", null, React.createElement("a", { className: "dropdown-item", onClick: this.handleAdd }, React.createElement("i", { className: "bi bi-person-plus" }), " Add")), s = React.createElement("li", null, React.createElement("a", { className: "dropdown-item", onClick: this.handlePurgeDiscussion, title: "Delete this discussion" }, React.createElement("i", { className: "bi bi-trash-fill" }), " Purge")); break; case 3: t = React.createElement("li", null, React.createElement("a", { className: "dropdown-item", onClick: this.handleAdd }, React.createElement("i", { className: "bi bi-person-plus" }), " Add")), e = React.createElement("button", { className: "btn btn-dark me-2 float-end", type: "button" }, React.createElement("i", { className: "bi bi-box-arrow-left" }), " Leave"); break; case 1: e = React.createElement("li", null, React.createElement("a", { className: "dropdown-item", onClick: this.handleLeave }, React.createElement("i", { className: "bi bi-box-arrow-left" }), " Leave")); break; case 5: a = null }return React.createElement(React.Fragment, null, React.createElement("div", { className: "fixed-top bg-light container-fluid p-2" }, React.createElement("button", { className: "btn  btn-light me-2", type: "button", onClick: this.handleBackButton }, "❮"), React.createElement("h4", { style: { display: "inline-block" } }, this.state.discussion.name), React.createElement("div", { className: "dropdown float-end" }, React.createElement("button", { className: "btn btn-secondary dropdown-toggle", type: "button", id: "actionDropDownButton", "data-bs-toggle": "dropdown", "aria-expanded": "false" }, React.createElement("i", { className: "bi bi-tools" }), " Actions"), React.createElement("ul", { className: "dropdown-menu", "aria-labelledby": "actionDropDownButton" }, e, t, a, s))), React.createElement("div", { className: "row-fluid" }, this.renderMessageList(), this.renderMembers(), this.renderAddModal()), React.createElement("div", { className: "fixed-bottom bg-light container-fluid p-2" }, React.createElement("table", { style: { width: "100%" } }, React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", { style: { width: "60px" } }, React.createElement("div", { className: "btn-group dropup" }, React.createElement("button", { className: "btn  btn-light dropdown-toggle", type: "button", id: "fileDropdown", "data-bs-toggle": "dropdown", "aria-expanded": "false" }, React.createElement("img", { src: "/icons/file-plus.svg", alt: "", width: "24", height: "24", title: "Share Files" })), React.createElement("ul", { className: "dropdown-menu", "aria-labelledby": "fileDropdown" }, React.createElement("li", null, React.createElement("a", { className: "dropdown-item", href: "#", onClick: this.handlePhotoClick, title: "20 Files at a time, max files size 10 MB" }, "Photos and Videos")), React.createElement("li", null, React.createElement("a", { className: "dropdown-item", href: "#", onClick: this.handleDocClick, title: "20 Files at a time, max files size 10 MB" }, "Documents"), React.createElement("input", { type: "file", style: { display: "none" }, ref: e => { this.fileinput = e }, accept: ".html,.htm,.doc,.pdf,.xls,.xlsx,.docx,audio/*,video/*,image/*", onChange: this.handleFileInput, multiple: "multiple" }), "                            ")))), React.createElement("td", null, React.createElement("textarea", { ref: e => { this.textinput = e }, name: "textinput", id: "msginput", placeholder: "Type a text message...", autoComplete: "off", className: "form-control", value: this.state.textinput, onChange: this.handleChange, rows: "1", style: { height: "40px", overflow: "hidden", resize: "none", maxHeight: "200px" } })), React.createElement("td", { style: { width: "100px" } }, React.createElement("button", { className: this.state.showemojimodal ? "btn  btn-warning" : "btn  btn-light", type: "button", onClick: this.handleEmojiModal }, React.createElement("img", { src: "/icons/smile.svg", alt: "", width: "15", height: "15", title: "Send Message" })), React.createElement("button", { className: "btn  btn-dark me-2", type: "button", onClick: this.sendMessage }, React.createElement("img", { src: "/icons/send.svg", alt: "", width: "15", height: "15", title: "Send Message" })))), this.renderEmojiModal())))) } }