class MemberPost extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, bsstyle: '', message: '', myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), post: this.props.post, showreactionlist: false, hashtag: this.props.hashtag ? this.props.hashtag : '', showCommentBox: false }; this.addReaction = this.addReaction.bind(this) } addReaction() { fetch('//' + window.location.host + '/api/post/addreaction/' + this.state.post.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { var p = this.state.post; p.hasReacted = data.hasReacted; p.reactionCount = data.reactionCount; this.setState({ loading: false, message: '', bsstyle: '', post: p }) }) } else if (response.status === 400) { try { response.json().then(data => { this.setState({ loading: false, message: data.error, bsstyle: 'danger' }) }) } catch (err) { this.setState({ loading: false, message: 'Unable to save ' + name, bsstyle: 'danger' }) } } else { try { response.json().then(data => { this.setState({ loading: false, message: data.error, bsstyle: 'danger' }) }) } catch (err) { this.setState({ loading: false, message: 'Unable to save ' + name, bsstyle: 'danger' }) } } }) } render() { var p = this.state.post; var ownerlink = this.state.hashtag !== '' ? React.createElement("div", { className: "d-inline-block" }, React.createElement("a", { href: '//' + window.location.host + '/post/hastag?ht=' + this.state.hashtag, className: "fs-6 ms-2 fw-bold  text-dark text-decoration-none" }, p.owner.userName), React.createElement("a", { href: '//' + window.location.host + '/profile?un=' + p.owner.userName, className: "fs-6 ms-2  text-dark text-decoration-none" }, p.owner.userName)) : React.createElement("a", { href: '//' + window.location.host + '/profile?un=' + p.owner.userName, className: "fs-6 ms-2 fw-bold pointer d-inline-block text-dark text-decoration-none" }, p.owner.userName); var owner = React.createElement("div", { className: "row align-items-center g-1" }, React.createElement("div", { className: "col" }, React.createElement(MemberPicSmall, { member: p.owner }), ownerlink), React.createElement("div", { className: "col-md-1 col-2 text-end" }, React.createElement("button", { className: "btn btn-link text-dark" }, React.createElement("i", { className: "bi bi-three-dots" })))); var postshtml = null; if (p.videoURL !== "") { } else if (p.photos) { if (p.photos.length == 1) { postshtml = React.createElement("div", { className: "text-center" }, React.createElement("img", { src: p.photos[0].photo, className: "img-fluid", onDoubleClick: () => { this.addReaction() } })) } else { var imgs = []; for (var i in p.photos) { imgs.push(React.createElement("li", { key: "img" + p.photos[i].id, className: "list-group-item p-0 me-1 border-0" }, React.createElement("img", { src: p.photos[i].photo, style: { maxHeight: "450px", maxWidth: "450px" } }))) } postshtml = React.createElement("div", { className: "table-responsive" }, React.createElement("ul", { className: "list-group list-group-horizontal", onDoubleClick: () => { this.addReaction() } }, imgs)) } } var commentbox = !this.state.showCommentBox ? null : React.createElement(MemberComment, { post: p, cancel: () => { this.setState({ showCommentBox: false }) } }); var reactionCountHtml = p.reactionCount > 0 ? React.createElement("button", { className: "btn btn-link text-dark text-decoration-none fw-bold ps-0", type: "button", onClick: () => { this.setState({ showreactionlist: true }) } }, p.reactionCount, " Likes") : null; var reactionhtml = React.createElement("button", { type: "button", className: "btn btn-link fs-4 fw-bold text-dark pe-2 ps-0", onClick: () => { this.addReaction() } }, React.createElement("i", { className: "bi bi-heart" })); if (p.hasReacted) { reactionhtml = React.createElement("button", { type: "button", className: "btn btn-link fs-4 fw-bold text-danger pe-2 ps-0", onClick: () => { this.addReaction() } }, React.createElement("i", { className: "bi bi-heart-fill" })) } var commentBtn = null, commentCountHtml = null; if (p.acceptComment) { commentCountHtml = React.createElement("button", { className: "btn btn-link text-dark text-decoration-none fw-bold ps-0", type: "button", onClick: () => { this.setState({ showCommentBox: true }) } }, p.commentCount > 0 ? p.commentCount + " Comments" : "None"); commentBtn = React.createElement("button", { type: "button", className: "btn btn-link fs-4 fw-bold text-dark pe-1", onClick: () => { this.setState({ showCommentBox: true }) } }, React.createElement("i", { className: "bi bi-chat-square-text" })) } var likemodal = null; if (this.state.showreactionlist) { likemodal = React.createElement("div", { className: "modal fade show d-block", id: "reactionListModal-" + this.state.post.id, tabIndex: "-1", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-fullscreen-lg-down" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title" }, "Likes"), React.createElement("button", { type: "button", className: "btn-close", "data-bs-dismiss": "modal", "aria-label": "Close", onClick: () => { this.setState({ showreactionlist: false }) } })), React.createElement("div", { className: "modal-body p-1" }, React.createElement(MemberSmallList, { target: "reaction", postid: this.state.post.id }))))) } return React.createElement("div", { id: this.state.post.id, className: "border my-2" }, owner, React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-md-6" }, postshtml, React.createElement("div", { className: "text-center my-1" })), React.createElement("div", { className: "col-md-6" }, React.createElement("div", { className: "mt-1" }, React.createElement("button", { type: "button", className: "btn btn-link text-decoration-none fw-bold text-dark pe-2 ps-0" }, React.createElement(DateLabel, { value: p.postDate })), reactionhtml, reactionCountHtml, " ", commentBtn, commentCountHtml), React.createElement("div", null, React.createElement(ExpandableTextLabel, { text: p.describe === null ? "" : p.describe, maxlength: 200 })))), likemodal, commentbox) } } class MemberComment extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, bsstyle: '', message: '', myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), post: this.props.post, comments: { current: 0, pageSize: 20, total: 0, commentList: [] }, commenttext: '', commentiddel: 0 }; this.fetchComments = this.fetchComments.bind(this); this.removeComment = this.removeComment.bind(this) } componentDidMount() { this.fetchComments() } addComment() { this.setState({ loading: true }); const fd = new FormData(); fd.set("comment", this.state.commenttext); fd.set("postId", this.state.post.id); fetch('//' + window.location.host + '/api/post/addcomment', { method: 'post', body: fd, headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { console.log(data); var temp = this.state.comments.commentList; temp.unshift(data); let comments = { current: data.current, pageSize: data.pageSize, total: data.total, totalPages: data.totalPages, commentList: temp }; this.setState({ loading: false, comments }) }); this.setState({ loading: false, commenttext: "" }) } else { this.setState({ loading: false, message: 'Unable to save comment', bsstyle: 'danger' }) } }) } removeComment() { let url = '//' + window.location.host + '/api/post/removecomment/' + this.state.commentiddel; fetch(url, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { var temp = this.state.comments.commentList.filter(t => t.id !== this.state.commentiddel); let comments = { current: this.state.comments.current, pageSize: this.state.comments.pageSize, total: this.state.comments.total, totalPages: this.state.comments.totalPages, commentList: temp }; this.setState({ loading: false, commentiddel: 0, comments }) } }) } fetchComments() { let url = '//' + window.location.host + '/api/post/comments/' + this.state.post.id + '?ps=' + this.state.comments.pageSize + '&p=' + this.state.comments.current; fetch(url, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { console.log(data); var temp = this.state.comments.commentList; for (var k in data.commentList) { if (temp.filter(t => t.id == data.commentList[k].id).length === 0) { temp.push(data.commentList[k]) } } let comments = { current: data.current, pageSize: data.pageSize, total: data.total, totalPages: data.totalPages, commentList: temp }; this.setState({ loggedin: true, loading: false, comments }) }) } }) } render() { var items = []; if (this.state.comments.commentList.length === 0) { items.push(React.createElement("p", { key: 0, className: "px-2" }, "No Comments Found.")) } for (var k in this.state.comments.commentList) { var p = this.state.comments.commentList[k]; var ownedCommentMenu = null; if (this.state.myself.id === p.postedBy.id) { ownedCommentMenu = React.createElement(React.Fragment, null, React.createElement("button", { "data-id": p.id, onClick: e => { this.setState({ commentiddel: parseInt(e.target.getAttribute("data-id"), 10) }) }, className: "btn btn-link text-secondary text-decoration-none px-0 fs-12", type: "button" }, "Remove")) } items.push(React.createElement("table", { key: p.id, cellPadding: "0", cellSpacing: "0", width: "100%", border: "0" }, React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", { width: "50px", valign: "middle" }, React.createElement(MemberPicSmall, { member: p.postedBy })), React.createElement("td", { valign: "middle", className: "px-2" }, React.createElement("a", { href: '//' + window.location.host + '/profile?un=' + p.postedBy.userName, className: "fs-6 fw-bold pointer d-inline-block text-dark text-decoration-none" }, p.postedBy.userName), React.createElement(ExpandableTextLabel, { text: p.comment, maxlength: 200 }))), React.createElement("tr", null, React.createElement("td", null), React.createElement("td", { className: "px-2" }, React.createElement("span", { className: "fs-12 text-secondary" }, React.createElement(DateLabel, { value: p.postDate })), " ", ownedCommentMenu))))) } let confirmdelete = null; if (this.state.commentiddel > 0) { confirmdelete = React.createElement(ConfirmBox, { title: "Remove Comment", message: "Are you sure you want to remove this comment?", ok: () => { this.removeComment() }, cancel: () => { this.setState({ commentiddel: 0 }) } }) } return React.createElement("div", { className: "modal fade show", style: { display: "block" }, tabIndex: "-1" }, React.createElement("div", { className: "modal-dialog modal-xl modal-fullscreen-md-down" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title" }, "Comments"), React.createElement("button", { type: "button", className: "btn-close", onClick: () => { this.props.cancel() } })), React.createElement("div", { className: "modal-body p-1", style: { minHeight: "300px" } }, items, confirmdelete), React.createElement("div", { className: "modal-footer" }, React.createElement("table", { width: "100%", cellPadding: "0", cellSpacing: "0" }, React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", { valign: "middle", align: "right" }, React.createElement("textarea", { rows: "1", className: "form-control", value: this.state.commenttext, onChange: e => { this.setState({ commenttext: e.target.value }) } })), React.createElement("td", { valign: "middle", width: "58px" }, React.createElement("button", { type: "button", className: "btn btn-link text-decoration-none", onClick: () => { this.addComment() } }, "Post"))))))))) } } class MemberPostList extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), model: null, q: this.props.search, p: 0, posts: [], viewMode: parseInt(this.props.viewMode, 10), viewModeAllowed: this.props.viewModeAllowed === "true" ? true : false, post: null }; this.selectPost = this.selectPost.bind(this); this.addReaction = this.addReaction.bind(this) } selectPost(id) { this.setState({ viewMode: 2 }, () => { document.getElementById(id).scrollIntoView({ behavior: "auto", block: "center", inline: "center" }) }) } addReaction(id) { fetch('//' + window.location.host + '/api/Post/addreaction/' + id, { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { var temp = this.state.posts; for (var k in temp) { var p = temp[k]; if (p.id == id) { p.hasReacted = data.hasReacted; p.reactionCount = data.reactionCount } } this.setState({ loading: false, message: '', bsstyle: '', posts: temp }) }) } else if (response.status === 400) { try { response.json().then(data => { this.setState({ loading: false, message: data.error, bsstyle: 'danger' }) }) } catch (err) { this.setState({ loading: false, message: 'Unable to save ' + name, bsstyle: 'danger' }) } } else { try { response.json().then(data => { this.setState({ loading: false, message: data.error, bsstyle: 'danger' }) }) } catch (err) { this.setState({ loading: false, message: 'Unable to save ' + name, bsstyle: 'danger' }) } } }) } componentDidMount() { this.loadFeed() } loadFeed() { this.setState({ loading: true }); let url = '//' + window.location.host + '/api/post?q=' + this.state.q + '&p=' + this.state.p; if (this.state.q === "userfeed") { url = '//' + window.location.host + '/api/post/feed?p=' + this.state.p } fetch(url, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { console.log(data); var temp = this.state.posts; for (var k in data.posts) { temp.push(data.posts[k]) } this.setState({ loggedin: true, loading: false, model: { current: data.current, pageSize: data.pageSize, total: data.total, totalPages: data.totalPages }, posts: temp }) }) } }) } renderPosts() { var empty = React.createElement("div", { key: 0 }, React.createElement("p", { className: "text-center fs-3 mt-5" }, React.createElement("i", { className: "bi bi-emoji-dizzy me-2" }), "Nothing to see here")); if (this.state.viewMode === 2) { var items = []; if (this.state.model !== null) { for (var k in this.state.posts) { items.push(React.createElement(MemberPost, { key: this.state.posts[k].id, post: this.state.posts[k] })) } } if (items.length == 0) { items.push(empty) } return items } else if (this.state.viewMode === 1) { var items = []; for (var k in this.state.posts) { var p = this.state.posts[k]; if (p.videoURL !== "") { } else { items.push(React.createElement("div", { className: "col", key: p.id }, React.createElement("div", { className: "card border-0 rounded-0 pointer" }, React.createElement("img", { src: p.photos[0].photo, "data-postid": p.id, onClick: e => { this.selectPost(e.target.getAttribute("data-postid")) }, className: "card-img border-0 rounded-0", style: { padding: "1px" } })))) } } if (items.length == 0) { items.push(empty); return items } return React.createElement("div", { className: "row row-cols-3 row-cols-md-4 g-0" }, items) } } render() { var html = this.state.loading === false ? this.renderPosts() : null; var loadmore = null; if (!this.state.loggedin) { return React.createElement(RegisterForm, { beginWithRegister: false, onLogin: () => { this.setState({ loggedin: localStorage.getItem("token") === null ? false : true, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token") }) } }) } let loading = null; if (this.state.loading) { loading = React.createElement("div", { className: "progress fixed-bottom", style: { height: "5px" } }, React.createElement("div", { className: "progress-bar progress-bar-striped progress-bar-animated", role: "progressbar", "aria-valuenow": "100", "aria-valuemin": "0", "aria-valuemax": "100", style: { width: "100%" } })) } if (this.state.model !== null) { if (this.state.model.current + 1 < this.state.model.totalPages) { loadmore = React.createElement("div", { className: "text-center bg-white p-3" }, React.createElement("button", { className: "btn btn-light", onClick: () => { this.setState({ p: this.state.model.current + 1 }, () => { this.loadFeed() }) } }, "Load More")) } } var viewmodetabhtml = null; if (this.state.viewModeAllowed && this.state.posts.length > 0) { viewmodetabhtml = React.createElement("div", null, React.createElement("nav", { className: "nav nav-pills nav-fill" }, React.createElement("a", { onClick: () => { this.setState({ viewMode: 1 }) }, className: this.state.viewMode === 1 ? "nav-link fs-4 active bg-white text-success rounded-0" : "nav-link fs-4 bg-white text-dark rounded-0" }, React.createElement("i", { className: "bi bi-grid-3x3-gap-fill" })), React.createElement("a", { onClick: () => { this.setState({ viewMode: 2 }) }, className: this.state.viewMode === 2 ? "nav-link fs-4 active bg-white text-success rounded-0" : "nav-link fs-4 bg-white text-dark rounded-0" }, React.createElement("i", { className: "bi bi-view-list" })))) } return React.createElement(React.Fragment, null, viewmodetabhtml, html, loadmore, loading) } } class MemberSmallList extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), model: null, q: '', p: 0, reactions: [], followList: [] }; if (this.props.target === 'reaction') { this.url = '//' + window.location.host + '/api/post/reactionlist/' + this.props.postid } else if (this.props.target === 'follower') { this.url = '//' + window.location.host + '/api/Follow/Follower/' + this.props.memberid } else if (this.props.target === 'following') { this.url = '//' + window.location.host + '/api/Follow/Following/' + this.props.memberid } this.followerRemoved = this.followerRemoved.bind(this) } componentDidMount() { this.loadFeed() } followerRemoved(id) { var items = []; for (var k in this.state.followList) { var p = this.state.followList[k]; if (p.follower.id != id) { items.push(p) } } this.setState({ followList: items }) } loadFeed() { this.setState({ loading: true }); fetch(this.url + "?q=" + this.state.q + "&p=" + this.state.p, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { console.log(data); if (this.props.target === 'reaction') { console.log(data); var temp = this.state.reactions; for (var k in data.reactions) { temp.push(data.reactions[k]) } this.setState({ loggedin: true, loading: false, model: { current: data.current, pageSize: data.pageSize, total: data.total, totalPages: data.totalPages }, reactions: temp }) } else if (this.props.target === 'follower' || this.props.target === 'following') { var temp = this.state.followList; for (var k in data.followList) { temp.push(data.followList[k]) } this.setState({ loggedin: true, loading: false, model: { current: data.current, pageSize: data.pageSize, total: data.total, totalPages: data.totalPages }, followList: temp }) } }) } }) } renderPosts() { if (this.props.target === 'reaction') { var items = []; for (var k in this.state.reactions) { var p = this.state.reactions[k]; items.push(React.createElement(MemberSmallRow, { key: p.member.id, member: p.member, status: p.status })) } return React.createElement(React.Fragment, null, items) } else if (this.props.target === 'follower') { var items = []; for (var k in this.state.followList) { var p = this.state.followList[k]; items.push(React.createElement(MemberSmallRow, { key: p.follower.id, member: p.follower, status: p.status, showRemove: this.state.myself.id === this.props.memberid ? true : false, removed: id => { this.followerRemoved(id) } })) } return React.createElement(React.Fragment, null, items) } else if (this.props.target === 'following') { var items = []; for (var k in this.state.followList) { var p = this.state.followList[k]; if (p.tag !== null && p.tag !== "") { } else { items.push(React.createElement(MemberSmallRow, { key: p.following.id, member: p.following, status: p.status })) } } return React.createElement(React.Fragment, null, items) } } render() { var loadmore = null; if (this.state.model !== null) { if (this.state.model.current + 1 < this.state.model.totalPages) { loadmore = React.createElement("div", { className: "text-center bg-white p-3" }, React.createElement("button", { className: "btn btn-light", onClick: () => { this.setState({ p: this.state.model.current + 1 }, () => { this.loadFeed() }) } }, "Load More")) } } return React.createElement("div", { style: { minHeight: "50vh" } }, this.renderPosts(), loadmore) } } class MemberSmallRow extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), member: this.props.member, status: this.props.status, showRemove: this.props.showRemove, showRemoveConfirm: false }; this.removeFollow = this.removeFollow.bind(this) } removeFollow() { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/follow/remove/' + this.state.member.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { this.setState({ status: 0, showRemove: false, loading: false }); if (this.props.removed) { this.props.removed(this.state.member.id) } } }) } render() { var followbtn = React.createElement(FollowButton, { member: this.state.member, status: this.state.status }); if (this.state.showRemove) { followbtn = React.createElement("button", { type: "button", className: "btn btn-light text-dark", onClick: () => { this.setState({ showRemoveConfirm: true }) } }, "Remove") } var removeConfirmBox = null; if (this.state.showRemoveConfirm) { removeConfirmBox = React.createElement(ConfirmBox, { cancel: () => { this.setState({ showRemoveConfirm: false }) }, ok: () => { this.setState({ showRemoveConfirm: false }); this.removeFollow() }, message: "Are you sure you want to remove this member from your followers?" }) } return React.createElement("div", { className: "row mx-0  justify-content-center align-items-center" }, React.createElement("div", { className: "col px-0" }, React.createElement(MemberPicSmall, { member: this.state.member }), React.createElement("a", { href: '//' + window.location.host + '/profile?un=' + this.state.member.userName, className: "fs-6 ms-2 fw-bold pointer d-inline-block text-dark text-decoration-none" }, this.state.member.userName)), React.createElement("div", { className: "col-3 col-md-3 px-0 text-end pe-2" }, followbtn, removeConfirmBox)) } } class MemberPicSmall extends React.Component { constructor(props) { super(props); this.state = { member: this.props.member } } render() { var memberpic = this.state.member.pic !== "" ? React.createElement("a", { href: '//' + window.location.host + '/profile?un=' + this.state.member.userName, className: "border-0" }, React.createElement("img", { src: this.state.member.pic, className: "d-inline-block p-1 img-fluid pointer rounded-3 owner-thumb-small", alt: "" })) : React.createElement("a", { href: '//' + window.location.host + '/profile?un=' + this.state.member.userName, className: "border-0" }, React.createElement("img", { src: "/images/nopic.jpg", className: "img-fluid p-1 owner-thumb-small d-inline-block rounded-3", alt: "" })); return React.createElement(React.Fragment, null, memberpic) } } class FollowButton extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), member: this.props.member, status: null, notify: this.props.notify }; this.askToFollow = this.askToFollow.bind(this); this.unFollow = this.unFollow.bind(this); this.loadStatus = this.loadStatus.bind(this) } componentDidMount() { this.loadStatus() } loadStatus() { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/follow/Status/' + this.state.member.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { this.setState({ status: data.status, loading: false }) }) } }).catch(error => { this.setState({ bsstyle: 'text-danger', message: 'Unable to contact server', loading: false }) }) } askToFollow() { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/follow/ask/' + this.state.member.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { console.log(data); this.setState({ status: data.status, loading: false }); if (this.props.notify) { this.props.notify(this.state.member.id, this.state.status) } }) } }).catch(error => { this.setState({ bsstyle: 'text-danger', message: 'Unable to contact server', loading: false }) }) } unFollow() { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/follow/unfollow/' + this.state.member.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { this.setState({ status: data.status, loading: false }); if (this.props.notify) { this.props.notify(this.state.member.id, this.state.status) } }) } else { this.setState({ bsstyle: 'text-danger', message: 'Unable to process request', loading: false }) } }).catch(error => { this.setState({ bsstyle: 'text-danger', message: 'Unable to contact server', loading: false }) }) } render() { var followbtn = null; if (this.state.loading === false) { if (this.state.status === 0) { if (this.state.member.id !== this.state.myself.id) { followbtn = React.createElement("button", { type: "button", className: "btn btn-primary fw-bold", onClick: this.askToFollow }, "Follow") } } else if (this.state.status === 1) { followbtn = React.createElement("button", { type: "button", className: "btn btn-light fw-bold", onClick: this.unFollow }, "Unfollow") } else if (this.state.status === 2) { followbtn = React.createElement("button", { type: "button", className: "btn btn-light fw-bold", onClick: this.unFollow }, "Requested") } } else if (this.state.loading === true) { followbtn = React.createElement("button", { type: "button", className: "btn btn-light fw-bold", disabled: true }, "Working...") } return React.createElement(React.Fragment, null, followbtn) } } class ConfirmBox extends React.Component { constructor(props) { super(props); this.state = { open: true } } render() { if (this.state.open) { return React.createElement("div", { className: "modal fade show", style: { display: "block" }, tabIndex: "-1" }, React.createElement("div", { className: "modal-dialog modal-dialog-centered" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title" }, this.props.title), React.createElement("button", { type: "button", className: "btn-close", onClick: () => { this.setState({ open: false }, () => { this.props.cancel() }) } })), React.createElement("div", { className: "modal-body" }, React.createElement("p", { className: "text-center" }, this.props.message)), React.createElement("div", { className: "modal-footer" }, React.createElement("button", { type: "button", className: "btn btn-primary", style: { minWidth: "60px" }, onClick: () => { this.props.ok() } }, "Yes"), React.createElement("button", { type: "button", className: "btn btn-secondary", style: { minWidth: "60px" }, onClick: () => { this.setState({ open: false }, () => { this.props.cancel() }) } }, "No"))))) } else { return null } } } class ExpandableTextLabel extends React.Component { constructor(props) { super(props); this.state = { text: this.props.text, expand: false, showexpand: false, maxlength: parseInt(this.props.maxlength, 10), cssclass: this.props.cssclass !== undefined ? this.props.cssclass : "" } } componentDidMount() { if (this.state.text.length > this.state.maxlength || (this.state.text.match(/\n/g) || []).length > 3) { this.setState({ showexpand: true }) } } render() { var length = this.state.text.length < this.state.maxlength ? this.state.text.length : this.state.maxlength; var text = null, expandbtn = null; if (this.state.expand) { text = React.createElement(React.Fragment, null, this.state.text.split('\n').map((item, key) => { return React.createElement(React.Fragment, { key: key }, item, React.createElement("br", null)) })) } else { text = React.createElement("div", { style: { maxHeight: "28px", overflowY: "hidden", display: "inline-flex" } }, this.state.text.substring(0, length).split('\n').map((item, key) => { return React.createElement(React.Fragment, { key: key }, item, React.createElement("br", null)) })) } if (this.state.showexpand) { expandbtn = React.createElement("button", { type: "button", onClick: () => { this.setState({ expand: !this.state.expand }) }, className: "btn btn-link d-block p-0 text-secondary text-decoration-none" }, !this.state.expand ? "More" : "Less") } return React.createElement("div", { className: this.state.cssclass }, text, expandbtn) } } class DateLabel extends React.Component { constructor(props) { super(props); this.state = { value: this.props.value } } transformData() { var d = new Date(this.state.value); return d.getDate() + "." + d.getMonth() + "." + d.getFullYear() } render() { return React.createElement(React.Fragment, null, this.transformData()) } } class MessageStrip extends React.Component { constructor(props) { super(props); this.state = { bsstyle: this.props.bsstyle !== undefined ? this.props.bsstyle : "", message: this.props.message !== undefined ? this.props.message : "" } } static getDerivedStateFromProps(nextProps, prevState) { if (nextProps.message !== prevState.message) { return { message: nextProps.message, bsstyle: nextProps.bsstyle } } else { return null } } render() { if (this.state.message !== '') { return React.createElement("div", { className: 'noMargin noRadius alert alert-' + this.state.bsstyle, role: "alert" }, this.state.message) } else { return null } } } class Emoji extends React.Component { constructor(props) { super(props); this.onEmojiClick = this.onEmojiClick.bind(this) } onEmojiClick(value) { this.props.onSelect(value) } render() { return React.createElement("div", { className: "emojicont p-2 border-top border-bottom border-right border-left bg-light", style: { maxWidth: "100%" } }, React.createElement("ul", { className: "list-inline mb-1" }, React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "GRINNING FACE", onClick: () => this.onEmojiClick('😀') }, "\uD83D\uDE00")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "GRINNING FACE WITH SMILING EYES", onClick: () => this.onEmojiClick('😁') }, "\uD83D\uDE01")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH TEARS OF JOY", onClick: () => this.onEmojiClick('😂') }, "\uD83D\uDE02")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH OPEN MOUTH", onClick: () => this.onEmojiClick('😃') }, "\uD83D\uDE03")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH OPEN MOUTH AND SMILING EYES", onClick: () => this.onEmojiClick('😄') }, "\uD83D\uDE04")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH OPEN MOUTH AND COLD SWEAT", onClick: () => this.onEmojiClick('😅') }, "\uD83D\uDE05")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH OPEN MOUTH AND TIGHTLY-CLOSED EYES", onClick: () => this.onEmojiClick('😆') }, "\uD83D\uDE06")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH HALO", onClick: () => this.onEmojiClick('😇') }, "\uD83D\uDE07")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH HORNS", onClick: () => this.onEmojiClick('😈') }, "\uD83D\uDE08")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "WINKING FACE", onClick: () => this.onEmojiClick('😉') }, "\uD83D\uDE09")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH SMILING EYES", onClick: () => this.onEmojiClick('😊') }, "\uD83D\uDE0A")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE SAVOURING DELICIOUS FOOD", onClick: () => this.onEmojiClick('😋') }, "\uD83D\uDE0B")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "RELIEVED FACE", onClick: () => this.onEmojiClick('😌') }, "\uD83D\uDE0C")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH HEART-SHAPED EYES", onClick: () => this.onEmojiClick('😍') }, "\uD83D\uDE0D")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH SUNGLASSES", onClick: () => this.onEmojiClick('😎') }, "\uD83D\uDE0E")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMIRKING FACE", onClick: () => this.onEmojiClick('😏') }, "\uD83D\uDE0F")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "NEUTRAL FACE", onClick: () => this.onEmojiClick('😐') }, "\uD83D\uDE10")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "EXPRESSIONLESS FACE", onClick: () => this.onEmojiClick('😑') }, "\uD83D\uDE11")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "UNAMUSED FACE", onClick: () => this.onEmojiClick('😒') }, "\uD83D\uDE12")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH COLD SWEAT", onClick: () => this.onEmojiClick('😓') }, "\uD83D\uDE13")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "PENSIVE FACE", onClick: () => this.onEmojiClick('😔') }, "\uD83D\uDE14")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "CONFUSED FACE", onClick: () => this.onEmojiClick('😕') }, "\uD83D\uDE15")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "CONFOUNDED FACE", onClick: () => this.onEmojiClick('😖') }, "\uD83D\uDE16")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "KISSING FACE", onClick: () => this.onEmojiClick('😗') }, "\uD83D\uDE17")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE THROWING A KISS", onClick: () => this.onEmojiClick('😘') }, "\uD83D\uDE18")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "KISSING FACE WITH SMILING EYES", onClick: () => this.onEmojiClick('😙') }, "\uD83D\uDE19")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "KISSING FACE WITH CLOSED EYES", onClick: () => this.onEmojiClick('😚') }, "\uD83D\uDE1A")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH STUCK-OUT TONGUE", onClick: () => this.onEmojiClick('😛') }, "\uD83D\uDE1B")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH STUCK-OUT TONGUE AND WINKING EYE", onClick: () => this.onEmojiClick('😜') }, "\uD83D\uDE1C")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH STUCK-OUT TONGUE AND TIGHTLY-CLOSED EYES", onClick: () => this.onEmojiClick('😝') }, "\uD83D\uDE1D")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "DISAPPOINTED FACE", onClick: () => this.onEmojiClick('😞') }, "\uD83D\uDE1E")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "WORRIED FACE", onClick: () => this.onEmojiClick('😟') }, "\uD83D\uDE1F")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "ANGRY FACE", onClick: () => this.onEmojiClick('😠') }, "\uD83D\uDE20")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "POUTING FACE", onClick: () => this.onEmojiClick('😡') }, "\uD83D\uDE21")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "CRYING FACE", onClick: () => this.onEmojiClick('😢') }, "\uD83D\uDE22")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "PERSEVERING FACE", onClick: () => this.onEmojiClick('😣') }, "\uD83D\uDE23")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH LOOK OF TRIUMPH", onClick: () => this.onEmojiClick('😤') }, "\uD83D\uDE24")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "DISAPPOINTED BUT RELIEVED FACE", onClick: () => this.onEmojiClick('😥') }, "\uD83D\uDE25")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FROWNING FACE WITH OPEN MOUTH", onClick: () => this.onEmojiClick('😦') }, "\uD83D\uDE26")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "ANGUISHED FACE", onClick: () => this.onEmojiClick('😧') }, "\uD83D\uDE27")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FEARFUL FACE", onClick: () => this.onEmojiClick('😨') }, "\uD83D\uDE28")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "WEARY FACE", onClick: () => this.onEmojiClick('😩') }, "\uD83D\uDE29")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SLEEPY FACE", onClick: () => this.onEmojiClick('😪') }, "\uD83D\uDE2A")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "TIRED FACE", onClick: () => this.onEmojiClick('😫') }, "\uD83D\uDE2B")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "GRIMACING FACE", onClick: () => this.onEmojiClick('😬') }, "\uD83D\uDE2C")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "LOUDLY CRYING FACE", onClick: () => this.onEmojiClick('😭') }, "\uD83D\uDE2D")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH OPEN MOUTH", onClick: () => this.onEmojiClick('😮') }, "\uD83D\uDE2E")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "HUSHED FACE", onClick: () => this.onEmojiClick('😯') }, "\uD83D\uDE2F")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH OPEN MOUTH AND COLD SWEAT", onClick: () => this.onEmojiClick('😰') }, "\uD83D\uDE30")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE SCREAMING IN FEAR", onClick: () => this.onEmojiClick('😱') }, "\uD83D\uDE31")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "ASTONISHED FACE", onClick: () => this.onEmojiClick('😲') }, "\uD83D\uDE32")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FLUSHED FACE", onClick: () => this.onEmojiClick('😳') }, "\uD83D\uDE33")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SLEEPING FACE", onClick: () => this.onEmojiClick('😴') }, "\uD83D\uDE34")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "DIZZY FACE", onClick: () => this.onEmojiClick('😵') }, "\uD83D\uDE35")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITHOUT MOUTH", onClick: () => this.onEmojiClick('😶') }, "\uD83D\uDE36")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH MEDICAL MASK", onClick: () => this.onEmojiClick('😷') }, "\uD83D\uDE37")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FROWN FACE", onClick: () => this.onEmojiClick('🙁') }, "\uD83D\uDE41")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE", onClick: () => this.onEmojiClick('🙂') }, "\uD83D\uDE42")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "UPSIDEDOWN FACE", onClick: () => this.onEmojiClick('🙃') }, "\uD83D\uDE43")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "EYES ROLLING FACE", onClick: () => this.onEmojiClick('🙄') }, "\uD83D\uDE44")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "ZIPPED FACE", onClick: () => this.onEmojiClick('🤐') }, "\uD83E\uDD10")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "MONEY FACE", onClick: () => this.onEmojiClick('🤑') }, "\uD83E\uDD11")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FEVERISH FACE", onClick: () => this.onEmojiClick('🤒') }, "\uD83E\uDD12")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SPECTACLED FACE", onClick: () => this.onEmojiClick('🤓') }, "\uD83E\uDD13")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "WONDERING FACE", onClick: () => this.onEmojiClick('🤔') }, "\uD83E\uDD14")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "HURT FACE", onClick: () => this.onEmojiClick('🤕') }, "\uD83E\uDD15")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "COWBOY FACE", onClick: () => this.onEmojiClick('🤠') }, "\uD83E\uDD20")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "CLOWN FACE", onClick: () => this.onEmojiClick('🤡') }, "\uD83E\uDD21")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SICK VOMIT FACE", onClick: () => this.onEmojiClick('🤢') }, "\uD83E\uDD22")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "LAUGHING ROLLING FACE", onClick: () => this.onEmojiClick('🤣') }, "\uD83E\uDD23")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "LEERING FACE", onClick: () => this.onEmojiClick('🤤') }, "\uD83E\uDD24")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "LEING FACE", onClick: () => this.onEmojiClick('🤥') }, "\uD83E\uDD25")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "BLOWING NOSE FACE", onClick: () => this.onEmojiClick('🤧') }, "\uD83E\uDD27")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "ROCK FACE", onClick: () => this.onEmojiClick('🤨') }, "\uD83E\uDD28")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "STARY EYES FACE", onClick: () => this.onEmojiClick('🤩') }, "\uD83E\uDD29")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "MAD FACE", onClick: () => this.onEmojiClick('🤪') }, "\uD83E\uDD2A")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SHUSHING FACE", onClick: () => this.onEmojiClick('🤫') }, "\uD83E\uDD2B")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "CURSING FACE", onClick: () => this.onEmojiClick('🤬') }, "\uD83E\uDD2C")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "CHUGLI FACE", onClick: () => this.onEmojiClick('🤭') }, "\uD83E\uDD2D")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "VOMIT FACE", onClick: () => this.onEmojiClick('🤮') }, "\uD83E\uDD2E")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "MIND BLOWN FACE", onClick: () => this.onEmojiClick('🤯') }, "\uD83E\uDD2F")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "VICTORIAN FACE", onClick: () => this.onEmojiClick('🧐') }, "\uD83E\uDDD0")))) } } class HeartBeat extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), activity: this.props.activity === undefined ? 1 : this.props.activity, interval: this.props.interval === undefined ? 3000 : this.props.interval }; this.pulseinterval = null; this.sendHeartbeat = this.sendHeartbeat.bind(this) } componentDidMount() { this.sendHeartbeat(); if (this.pulseinterval === null) { this.pulseinterval = setInterval(this.sendHeartbeat, this.state.interval) } } componentWillUnmount() { if (this.pulseinterval !== null) { clearInterval(this.pulseinterval) } } sendHeartbeat() { if (this.state.loggedin) { fetch('//' + window.location.host + '/api/Members/savepulse?s=' + this.state.activity, { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { }) } } render() { return null } } class BlockContact extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: this.props.myself, person: this.props.person, bsstyle: '', message: '', token: localStorage.getItem("token") === null ? '' : localStorage.getItem("token"), blocked: null }; this.fetchContactDetail = this.fetchContactDetail.bind(this); this.handleUnblockClick = this.handleUnblockClick.bind(this); this.handleBlockClick = this.handleBlockClick.bind(this); this.setContactRelation = this.setContactRelation.bind(this) } componentDidMount() { this.fetchContactDetail() } handleUnblockClick() { this.setContactRelation(BoloRelationType.Confirmed) } handleBlockClick() { this.setContactRelation(BoloRelationType.Blocked) } setContactRelation(relationship) { fetch('//' + window.location.host + '/api/Contacts/ChangeRelation/' + this.state.person.id + '?t=' + relationship, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 200) { response.json().then(data => { if (data.boloRelation === BoloRelationType.Blocked) { this.setState({ blocked: true }) } else { this.setState({ blocked: false }) } var contactlist = localStorage.getItem("contacts") !== null ? new Map(JSON.parse(localStorage.getItem("contacts"))) : new Map(); if (contactlist.get(this.state.person.id) !== undefined) { contactlist.get(this.state.person.id).boloRelation = data.boloRelation; localStorage.setItem("contacts", JSON.stringify(Array.from(contactlist))) } }) } }) } fetchContactDetail() { try { fetch('//' + window.location.host + '/api/Contacts/' + this.state.person.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 200) { response.json().then(data => { if (data.boloRelation === BoloRelationType.Blocked) { this.setState({ blocked: true }) } else if (data.boloRelation === BoloRelationType.Confirmed) { this.setState({ blocked: false }) } else { this.setState({ blocked: null }) } if (this.props.onRelationshipChange !== undefined) { this.props.onRelationshipChange(data.boloRelation) } }) } }) } catch (err) { if (this.contactlist.get(this.state.person.id) !== undefined) { this.setState({ blocked: this.contactlist.get(this.state.person.id).boloRelation === BoloRelationType.Blocked }) } } } render() { if (this.state.blocked === true) { return React.createElement("button", { className: "btn mr-1 ml-1 btn-danger", onClick: this.handleUnblockClick }, "Unblock") } else if (this.state.blocked === false) { return React.createElement("button", { className: "btn mr-1 ml-1 btn-secondary", onClick: this.handleBlockClick }, "Block") } else { return null } } } function transformMessage(text, id) { try { const reglink = /([^\S]|^)(((https?\:\/\/)|(www\.))(\S+))/gi; let match; var links = []; while ((match = reglink.exec(text)) !== null) { isthere = false; for (link of links) { if (link === match[0].trim()) { isthere = true; break } } if (!isthere) { links.push(match[0].trim()) } } for (l of links) { var imgreg = /(http(s?):)([/|.|\w|\s|-])*\.(?:jpg|gif|png|jpeg)/g; if (imgreg.test(l)) { let img = "<a href='" + l + "' target='_blank'><img src='" + l + "' class='img-fluid d-block mt-1 mb-1 img-thumbnail' style='width:300px; '/></a>"; text = text.replaceAllOccurence(l, img, true) } else { let anchor = "<a href='" + l + "' target='_blank'>" + l + "</a>"; text = text.replaceAllOccurence(l, anchor, true) } } } catch (err) { console.log(err) } return text } String.prototype.replaceAllOccurence = function (str1, str2, ignore) { return this.replace(new RegExp(str1.replace(/([\/\,\!\\\^\$\{\}\[\]\(\)\.\*\+\?\|\<\>\-\&])/g, "\\$&"), ignore ? "gi" : "g"), typeof str2 == "string" ? str2.replace(/\$/g, "$$$$") : str2) };