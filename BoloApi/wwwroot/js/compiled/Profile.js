function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }) } else { obj[key] = value } return obj } class Profile extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), member: null, bsstyle: '', message: '', followStatus: null, token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), showfollowers: false, showfollowing: false } } componentDidMount() { if (localStorage.getItem("token") !== null) { this.validate(localStorage.getItem("token")) } if (this.props.username == undefined || this.props.username == null || this.props.username == "") { this.setState({ member: JSON.parse(localStorage.getItem("myself")) }) } else { this.loadMember(localStorage.getItem("token"), this.props.username) } } loadMember(t, username) { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Members/' + username, { method: 'get', headers: { 'Authorization': 'Bearer ' + t } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { this.setState({ loggedin: true, loading: false, member: data }, () => { this.loadFollowStatus(localStorage.getItem("token"), this.state.member.id) }) }) } }) } loadFollowStatus(t, username) { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Follow/Status/' + username, { method: 'get', headers: { 'Authorization': 'Bearer ' + t } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { this.setState({ loggedin: true, loading: false, followStatus: data.status }) }) } }) } validate(t) { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Members/Validate', { method: 'get', headers: { 'Authorization': 'Bearer ' + t } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { localStorage.setItem("myself", JSON.stringify(data)); this.setState({ loggedin: true, loading: false, myself: data }) }) } }) } renderFollowHtml() { if (this.state.followStatus != null) { return React.createElement(FollowButton, { member: this.state.member, status: this.state.followStatus }) } } renderFollowers() { if (this.state.showfollowers) { return React.createElement("div", { className: "modal fade show", style: { display: "block" }, id: "followersModal", tabindex: "-1", "aria-labelledby": "followersModalLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-dialog-centered" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title", id: "followersModalLabel" }, "Followers"), React.createElement("button", { type: "button", className: "btn-close", "data-bs-dismiss": "modal", "aria-label": "Close", onClick: () => { this.setState({ showfollowers: false }) } })), React.createElement("div", { className: "modal-body" }, React.createElement(MemberSmallList, { memberid: this.state.member.id, target: "follower" }))))) } return null } renderFollowing() { if (this.state.showfollowing) { return React.createElement("div", { className: "modal fade show", style: { display: "block" }, id: "followingModal", tabindex: "-1", "aria-labelledby": "followingModalLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-dialog-centered" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title", id: "followingModalLabel" }, "Following"), React.createElement("button", { type: "button", className: "btn-close", "data-bs-dismiss": "modal", "aria-label": "Close", onClick: () => { this.setState({ showfollowing: false }) } })), React.createElement("div", { className: "modal-body" }, React.createElement(MemberSmallList, { memberid: this.state.member.id, target: "following" }))))) } return null } render() { if (!this.state.loggedin) { return React.createElement(RegisterForm, { beginWithRegister: false, onLogin: () => { this.setState({ loggedin: localStorage.getItem("token") === null ? false : true, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token") }) } }) } var followlist = null; if (this.state.showfollowing) { followlist = React.createElement(React.Fragment, null, this.renderFollowing()) } else if (this.state.showfollowers) { followlist = React.createElement(React.Fragment, null, this.renderFollowers()) } let loading = null; if (this.state.loading) { loading = React.createElement("div", { className: "progress fixed-bottom", style: { height: "5px" } }, React.createElement("div", { className: "progress-bar progress-bar-striped progress-bar-animated", role: "progressbar", "aria-valuenow": "100", "aria-valuemin": "0", "aria-valuemax": "100", style: { width: "100%" } })) } let me = null, pic = null, settings = null, followhtml = null; if (this.state.member !== null) { pic = this.state.member.pic !== "" ? React.createElement("img", { src: this.state.member.pic, className: "img-fluid rounded profile-thumb", alt: "" }) : React.createElement("img", { src: "/images/nopic.jpg", className: "img-fluid profile-thumb rounded", alt: "" }); let name = null, thought = null, email = null, phone = null; if (this.state.member.name !== "") { name = React.createElement("div", { className: "fs-6 p-1 ms-2 fw-bold" }, this.state.member.name) } if (this.state.member.thoughtStatus !== "") { thought = React.createElement("p", null, this.state.member.thoughtStatus) } if (this.state.myself != null && this.state.member != null && this.state.myself.id == this.state.member.id) { settings = React.createElement("div", { className: "p-1 ms-2" }, React.createElement("a", { className: "text-dark text-decoration-none", onClick: () => { this.props.onClickSettings() } }, React.createElement("i", { className: "bi bi-gear" }), " Settings")) } else { followhtml = this.renderFollowHtml() } me = React.createElement(React.Fragment, null, React.createElement("div", { className: "pt-2 border-bottom mb-1" }, React.createElement("div", { className: "row mx-0" }, React.createElement("div", { className: "col-5 p-1 col-md-3 text-end" }, pic), React.createElement("div", { className: "col-7 col-md-9 p-1" }, React.createElement("div", { className: "fs-6 p-1 ms-2 fw-bold" }, "@", this.state.member.userName), name, settings, followhtml)), React.createElement("div", { className: "row mx-0" }, React.createElement("div", { className: "col px-0 text-center" }, React.createElement("button", { type: "button", className: "btn btn-link text-dark fw-bold text-decoration-none" }, this.state.member.postCount, " Posts")), React.createElement("div", { className: "col px-0 text-center" }, React.createElement("button", { type: "button", className: "btn btn-link text-dark fw-bold text-decoration-none", onClick: () => { this.setState({ showfollowing: true }) } }, this.state.member.followingCount, " Following")), React.createElement("div", { className: "col px-0 text-center" }, React.createElement("button", { type: "button", className: "btn btn-link text-dark fw-bold text-decoration-none", onClick: () => { this.setState({ showfollowers: true }) } }, this.state.member.followerCount, " Followers"))), thought, React.createElement("p", null, this.state.member.bio)), React.createElement(MemberPostList, { search: this.state.member.userName, viewMode: 2, viewModeAllowed: "true" }), followlist) } return React.createElement(React.Fragment, null, loading, me) } } class ManageProfile extends React.Component { constructor(props) { super(props); _defineProperty(this, "handleFile", e => { const fileReader = new FileReader(); fileReader.onloadend = () => { this.setState({ src: fileReader.result }, () => { if (this.profilePicCanvas === null) { this.profilePicCanvas = new fabric.Canvas('profilePicCanvas'); this.profilePicCanvas.setDimensions({ width: 300, height: 300 }); this.profilePicCanvas.setZoom(1); this.hammer = new Hammer.Manager(this.profilePicCanvas.upperCanvasEl); this.pinch = new Hammer.Pinch(); this.hammer.add([this.pinch]); this.hammer.on('pinch', ev => { this.profilePicCanvas.setZoom(this.state.profilepiczoom * ev.scale) }) } var img = new Image(); img.onload = this.handleProfileImageLoaded; img.src = this.state.src }) }; fileReader.readAsDataURL(e.target.files[0]) }); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: null, bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), onProfileChange: this.props.onProfileChange === undefined ? null : this.props.onProfileChange, showProfilePicModal: false, src: null, crop: { unit: "px", x: 0, y: 0, width: 300, height: 300, locked: true }, croppedImageUrl: null, profilepiczoom: 1 }; this.hammer = null; this.pinch = null; this.profilePicCanvas = null; this.profilePicImgInst = null; this.handleChange = this.handleChange.bind(this); this.saveData = this.saveData.bind(this); this.toggleProfilePicModal = this.toggleProfilePicModal.bind(this); this.saveProfilePic = this.saveProfilePic.bind(this); this.removeProfilePicture = this.removeProfilePicture.bind(this); this.handleProfileImageLoaded = this.handleProfileImageLoaded.bind(this); this.handleProfileZoom = this.handleProfileZoom.bind(this) } componentDidMount() { if (localStorage.getItem("token") !== null) { this.validate(localStorage.getItem("token")) } } handleChange(e) { let m = this.state.myself; switch (e.target.name) { case 'userName': m.userName = e.target.value.replace(" ", "").replace("\\", "").replace("/", "").replace(";", "").replace("\"", "").replace("'", "").replace("#", ""); break; case 'phone': m.phone = e.target.value; break; case 'email': m.email = e.target.value; break; case 'bio': m.bio = e.target.value; break; case 'name': if (e.target.value.trim() === "") { alert("Name is required."); e.target.focus() } else { m.name = e.target.value } break; case 'birthYear': m.birthYear = e.target.value; break; case 'gender': m.gender = e.target.value; break; case 'visibility': m.visibility = e.target.value; break; case 'country': m.country = e.target.value; break; case 'state': m.state = e.target.value; break; case 'city': m.city = e.target.value; break; case 'thoughtStatus': m.thoughtStatus = e.target.value; break; default: break }this.setState({ myself: m }) } handleProfileImageLoaded(e) { this.profilePicCanvas.remove(this.profilePicImgInst); this.profilePicImgInst = new fabric.Image(e.target, { angle: 0, padding: 0, cornersize: 0 }); if (e.target.width >= e.target.height) { this.profilePicImgInst.scaleToHeight(this.profilePicCanvas.height) } else if (e.target.height > e.target.width) { this.profilePicImgInst.scaleToWidth(this.profilePicCanvas.width) } this.profilePicImgInst.hasControls = false; this.profilePicCanvas.centerObject(this.profilePicImgInst); this.profilePicCanvas.add(this.profilePicImgInst) } handleProfileZoom() { this.profilePicCanvas.setZoom(this.state.profilepiczoom * 0.1) } toggleProfilePicModal() { this.setState({ showProfilePicModal: !this.state.showProfilePicModal }) } removeProfilePicture(e) { this.setState({ loading: true }); const fd = new FormData(); fd.set("pic", ""); fetch('//' + window.location.host + '/api/Members/savepic', { method: 'post', body: fd, headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { this.setState({ loading: false, showProfilePicModal: false }); if (localStorage.getItem("token") !== null) { this.validate(localStorage.getItem("token")) } if (this.state.onProfileChange !== null) { this.state.onProfileChange() } } else { this.setState({ loading: false, message: 'Unable to save profile pic', bsstyle: 'danger' }) } }) } saveProfilePic() { this.setState({ croppedImageUrl: this.profilePicCanvas.toDataURL("image/png") }, () => { this.hammer = null; this.pinch = null; this.profilePicCanvas = null; this.profilePicImgInst = null; this.setState({ loading: true }); const fd = new FormData(); fd.set("pic", this.state.croppedImageUrl); fetch('//' + window.location.host + '/api/Members/savepic', { method: 'post', body: fd, headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { this.setState({ loading: false, showProfilePicModal: false, profilepiczoom: 1 }); if (localStorage.getItem("token") !== null) { this.validate(localStorage.getItem("token")) } if (this.state.onProfileChange !== null) { this.state.onProfileChange() } } else { this.setState({ loading: false, message: 'Unable to save profile pic', bsstyle: 'danger' }) } }) }) } saveData(name, value) { this.setState({ loading: true }); if (name !== 'bio') { fetch('//' + window.location.host + '/api/Members/Save' + name + '?d=' + value, { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { this.setState({ loading: false, message: '', bsstyle: '' }); if (this.state.onProfileChange) { this.state.onProfileChange() } } else if (response.status === 400) { try { response.json().then(data => { this.setState({ loading: false, message: data.error, bsstyle: 'danger' }, () => { if (this.props.onProfileChange) { this.props.onProfileChange() } }) }) } catch (err) { this.setState({ loading: false, message: 'Unable to save ' + name, bsstyle: 'danger' }) } } else { try { response.json().then(data => { this.setState({ loading: false, message: data.error, bsstyle: 'danger' }) }) } catch (err) { this.setState({ loading: false, message: 'Unable to save ' + name, bsstyle: 'danger' }) } } }) } else { const fd = new FormData(); fd.set("d", value); fetch('//' + window.location.host + '/api/Members/savebio', { method: 'post', body: fd, headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { this.setState({ loading: false }); if (this.state.onProfileChange !== null) { this.state.onProfileChange() } } else { this.setState({ loading: false, message: 'Unable to save data', bsstyle: 'danger' }) } }) } } validate(t) { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Members/Validate', { method: 'get', headers: { 'Authorization': 'Bearer ' + t } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { this.setState({ loggedin: true, loading: false, myself: data }) }) } }) } renderUSStates() { return React.createElement("select", { name: "state", id: "state", className: "form-control", value: this.state.myself.state, onChange: this.handleChange, onBlur: this.saveData }, React.createElement("option", { value: "" }), React.createElement("option", { value: "Alabama" }, "Alabama"), React.createElement("option", { value: "Alaska" }, "Alaska"), React.createElement("option", { value: "Arizona" }, "Arizona"), React.createElement("option", { value: "Arkansas" }, "Arkansas"), React.createElement("option", { value: "California" }, "California"), React.createElement("option", { value: "Colorado" }, "Colorado"), React.createElement("option", { value: "Connecticut" }, "Connecticut"), React.createElement("option", { value: "Delaware" }, "Delaware"), React.createElement("option", { value: "District of Columbia" }, "District of Columbia"), React.createElement("option", { value: "Florida" }, "Florida"), React.createElement("option", { value: "Georgia" }, "Georgia"), React.createElement("option", { value: "Guam" }, "Guam"), React.createElement("option", { value: "Hawaii" }, "Hawaii"), React.createElement("option", { value: "Idaho" }, "Idaho"), React.createElement("option", { value: "Illinois" }, "Illinois"), React.createElement("option", { value: "Indiana" }, "Indiana"), React.createElement("option", { value: "Iowa" }, "Iowa"), React.createElement("option", { value: "Kansas" }, "Kansas"), React.createElement("option", { value: "Kentucky" }, "Kentucky"), React.createElement("option", { value: "Louisiana" }, "Louisiana"), React.createElement("option", { value: "Maine" }, "Maine"), React.createElement("option", { value: "Maryland" }, "Maryland"), React.createElement("option", { value: "Massachusetts" }, "Massachusetts"), React.createElement("option", { value: "Michigan" }, "Michigan"), React.createElement("option", { value: "Minnesota" }, "Minnesota"), React.createElement("option", { value: "Mississippi" }, "Mississippi"), React.createElement("option", { value: "Missouri" }, "Missouri"), React.createElement("option", { value: "Montana" }, "Montana"), React.createElement("option", { value: "Nebraska" }, "Nebraska"), React.createElement("option", { value: "Nevada" }, "Nevada"), React.createElement("option", { value: "New Hampshire" }, "New Hampshire"), React.createElement("option", { value: "New Jersey" }, "New Jersey"), React.createElement("option", { value: "New Mexico" }, "New Mexico"), React.createElement("option", { value: "New York" }, "New York"), React.createElement("option", { value: "North Carolina" }, "North Carolina"), React.createElement("option", { value: "North Dakota" }, "North Dakota"), React.createElement("option", { value: "Northern Marianas Islands" }, "Northern Marianas Islands"), React.createElement("option", { value: "Ohio" }, "Ohio"), React.createElement("option", { value: "Oklahoma" }, "Oklahoma"), React.createElement("option", { value: "Oregon" }, "Oregon"), React.createElement("option", { value: "Pennsylvania" }, "Pennsylvania"), React.createElement("option", { value: "Puerto Rico" }, "Puerto Rico"), React.createElement("option", { value: "Rhode Island" }, "Rhode Island"), React.createElement("option", { value: "South Carolina" }, "South Carolina"), React.createElement("option", { value: "South Dakota" }, "South Dakota"), React.createElement("option", { value: "Tennessee" }, "Tennessee"), React.createElement("option", { value: "Texas" }, "Texas"), React.createElement("option", { value: "Utah" }, "Utah"), React.createElement("option", { value: "Vermont" }, "Vermont"), React.createElement("option", { value: "Virginia" }, "Virginia"), React.createElement("option", { value: "Virgin Islands" }, "Virgin Islands"), React.createElement("option", { value: "Washington" }, "Washington"), React.createElement("option", { value: "West Virginia" }, "West Virginia"), React.createElement("option", { value: "Wisconsin" }, "Wisconsin"), React.createElement("option", { value: "Wyoming" }, "Wyoming")) } renderIndianStates() { return React.createElement("select", { name: "state", id: "state", className: "form-control", value: this.state.myself.state, onChange: this.handleChange, onBlur: this.saveData }, React.createElement("option", { value: "Andhra Pradesh" }, "Andhra Pradesh"), React.createElement("option", { value: "Andaman and Nicobar Islands" }, "Andaman and Nicobar Islands"), React.createElement("option", { value: "Arunachal Pradesh" }, "Arunachal Pradesh"), React.createElement("option", { value: "Assam" }, "Assam"), React.createElement("option", { value: "Bihar" }, "Bihar"), React.createElement("option", { value: "Chandigarh" }, "Chandigarh"), React.createElement("option", { value: "Chhattisgarh" }, "Chhattisgarh"), React.createElement("option", { value: "Dadar and Nagar Haveli" }, "Dadar and Nagar Haveli"), React.createElement("option", { value: "Daman and Diu" }, "Daman and Diu"), React.createElement("option", { value: "Delhi" }, "Delhi"), React.createElement("option", { value: "Lakshadweep" }, "Lakshadweep"), React.createElement("option", { value: "Puducherry" }, "Puducherry"), React.createElement("option", { value: "Goa" }, "Goa"), React.createElement("option", { value: "Gujarat" }, "Gujarat"), React.createElement("option", { value: "Haryana" }, "Haryana"), React.createElement("option", { value: "Himachal Pradesh" }, "Himachal Pradesh"), React.createElement("option", { value: "Jammu and Kashmir" }, "Jammu and Kashmir"), React.createElement("option", { value: "Jharkhand" }, "Jharkhand"), React.createElement("option", { value: "Karnataka" }, "Karnataka"), React.createElement("option", { value: "Kerala" }, "Kerala"), React.createElement("option", { value: "Madhya Pradesh" }, "Madhya Pradesh"), React.createElement("option", { value: "Maharashtra" }, "Maharashtra"), React.createElement("option", { value: "Manipur" }, "Manipur"), React.createElement("option", { value: "Meghalaya" }, "Meghalaya"), React.createElement("option", { value: "Mizoram" }, "Mizoram"), React.createElement("option", { value: "Nagaland" }, "Nagaland"), React.createElement("option", { value: "Odisha" }, "Odisha"), React.createElement("option", { value: "Punjab" }, "Punjab"), React.createElement("option", { value: "Rajasthan" }, "Rajasthan"), React.createElement("option", { value: "Sikkim" }, "Sikkim"), React.createElement("option", { value: "Tamil Nadu" }, "Tamil Nadu"), React.createElement("option", { value: "Telangana" }, "Telangana"), React.createElement("option", { value: "Tripura" }, "Tripura"), React.createElement("option", { value: "Uttar Pradesh" }, "Uttar Pradesh"), React.createElement("option", { value: "Uttarakhand" }, "Uttarakhand"), React.createElement("option", { value: "West Bengal" }, "West Bengal")) } renderStates() { if (this.state.myself.country.toLowerCase() == "india") { return this.renderIndianStates() } else if (this.state.myself.country.toLowerCase() == "usa") { return this.renderUSStates() } else { return React.createElement("input", { type: "text", name: "state", className: "form-control", maxLength: "100", value: this.state.myself.state, onChange: this.handleChange, onBlur: this.saveData }) } } renderProfilePicModal() { if (this.state.showProfilePicModal) { const { crop, profile_pic, src } = this.state; return React.createElement("div", { className: "modal  d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title" }, "Profile Picture"), React.createElement("button", { type: "button", className: "btn-close", "data-dismiss": "modal", "aria-label": "Close", onClick: this.toggleProfilePicModal })), React.createElement("div", { className: "modal-body" }, React.createElement("div", { className: "mb-3" }, React.createElement("button", { className: "btn btn-primary", type: "button", onClick: () => { document.getElementById("profile_pic").click() } }, "Choose Picture"), React.createElement("input", { type: "file", className: "d-none", id: "profile_pic", value: profile_pic, onChange: this.handleFile })), React.createElement("div", { className: "row justify-content-center" }, React.createElement("div", { className: "col" }, React.createElement("canvas", { id: "profilePicCanvas", style: { width: "300px", height: "300px" } })))), React.createElement("div", { className: "modal-footer" }, React.createElement("button", { type: "button", className: "btn btn-primary", onClick: this.saveProfilePic }, "Save"))))) } else { return null } } render() { if (!this.state.loggedin) { return React.createElement(RegisterForm, { beginWithRegister: false, onLogin: () => { this.setState({ loggedin: localStorage.getItem("token") === null ? false : true, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token") }) } }) } var yearitems = []; for (var i = 1947; i <= 2004; i += 1) { yearitems.push(React.createElement("option", { value: i }, i)) } let loading = this.state.loading ? React.createElement("div", { className: "progress fixed-bottom rounded-0", style: { height: "5px" } }, React.createElement("div", { className: "progress-bar progress-bar-striped progress-bar-animated", role: "progressbar", "aria-valuenow": "100", "aria-valuemin": "0", "aria-valuemax": "100", style: { width: '100%' } })) : null; if (this.state.loggedin && this.state.myself !== null) { let message = this.state.message !== "" ? React.createElement("div", { className: 'text-center noMargin noRadius alert alert-' + this.state.bsstyle, role: "alert" }, this.state.message) : null; let pic = this.state.myself.pic !== "" ? React.createElement(React.Fragment, null, React.createElement("img", { src: this.state.myself.pic, className: " mx-auto d-block img-fluid", alt: "", style: { maxWidth: "200px" } }), React.createElement("button", { type: "button", className: "btn btn-sm btn-secondary m-1", onClick: this.removeProfilePicture }, "Remove")) : React.createElement("img", { src: "/images/nopic.jpg", className: " mx-auto d-block img-fluid", alt: "", style: { maxWidth: "200px" } }); return React.createElement(React.Fragment, null, React.createElement("div", { className: "container py-5" }, loading, message, React.createElement("div", { className: "row align-items-center" }, React.createElement("div", { className: "col-md-6 text-center" }, pic, React.createElement("button", { type: "button", className: "btn btn-sm btn-secondary m-1", onClick: this.toggleProfilePicModal }, "Change"), this.renderProfilePicModal()), React.createElement("div", { className: "col-md-6" }, React.createElement("div", { className: "mb-2" }, React.createElement("label", { htmlFor: "channelnametxt", className: "form-label" }, "Username"), React.createElement("input", { type: "text", id: "channelnametxt", readOnly: true, name: "userName", placeholder: "Unique Channel Name", className: "form-control", value: this.state.myself.userName })), React.createElement("div", { className: "mb-2" }, React.createElement("label", { htmlFor: "nametxt", className: "form-label" }, "Name ", React.createElement("span", { className: "text-danger" }, "(Required)")), React.createElement("input", { type: "text", id: "nametxt", name: "name", placeholder: "Your Name", className: "form-control", value: this.state.myself.name, onChange: this.handleChange, onBlur: () => { this.saveData("name", this.state.myself.name) } })), React.createElement("div", { className: "mb-2" }, React.createElement("label", { className: "form-label" }, "Mobile ", React.createElement("span", { className: "text-danger" }, "(Required)")), React.createElement("input", { type: "text", name: "phone", className: "form-control", maxLength: "15", value: this.state.myself.phone, onChange: this.handleChange, onBlur: () => { this.saveData("phone", this.state.myself.phone) } })), React.createElement("div", { className: "mb-2" }, React.createElement("label", { className: "form-label" }, "Email ", React.createElement("span", { className: "text-danger" }, "(Required)")), React.createElement("input", { type: "email", name: "email", className: "form-control", maxLength: "250", value: this.state.myself.email, onChange: this.handleChange, onBlur: () => { this.saveData("email", this.state.myself.email) } })), React.createElement("div", { className: "mb-2" }, React.createElement("label", { htmlFor: "birthyeartxt", className: "form-label" }, "Year of Birth (optional)"), React.createElement("select", { id: "birthyeartxt", name: "birthYear", className: "form-select", value: this.state.myself.birthYear, onChange: this.handleChange, onBlur: () => { this.saveData("birthYear", this.state.myself.birthYear) } }, yearitems)))), React.createElement("div", { className: "mb-3" }, React.createElement("label", { htmlFor: "thoughtStatus", className: "form-label" }, "One line Introduction (Optional)"), React.createElement("input", { type: "text", name: "thoughtStatus", className: "form-control", maxLength: "195", value: this.state.myself.thoughtStatus, onChange: this.handleChange, onBlur: () => { this.saveData("thoughtstatus", this.state.myself.thoughtStatus) } })), React.createElement("div", { className: "mb-3" }, React.createElement("label", { htmlFor: "biotxt", className: "form-label" }, "About Me (Optional)"), React.createElement("textarea", { className: "form-control", id: "biotxt", maxLength: "950", name: "bio", value: this.state.myself.bio, onChange: this.handleChange, rows: "4", placeholder: "Write something about yourself.", onBlur: () => { this.saveData("bio", this.state.myself.bio) } })), React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-md-6" }, React.createElement("label", { htmlFor: "visibilityselect", className: "form-label" }, "Profile Visibility (Optional)"), React.createElement("select", { className: "form-select", id: "genderselect", name: "visibility", value: this.state.myself.visibility, onChange: this.handleChange, onBlur: () => { this.saveData("visibility", this.state.myself.visibility) } }, React.createElement("option", { value: "0" }), React.createElement("option", { value: "2" }, "Public"), React.createElement("option", { value: "1" }, "Private"))), React.createElement("div", { className: "col-md-6" }, React.createElement("label", { htmlFor: "countryselect", className: "form-label" }, "Country (Optional)"), React.createElement("select", { className: "form-select", id: "countryselect", name: "country", value: this.state.myself.country, onChange: this.handleChange, onBlur: () => { this.saveData("country", this.state.myself.country) } }, React.createElement("option", { value: "" }), React.createElement("option", { value: "Afganistan" }, "Afghanistan"), React.createElement("option", { value: "Albania" }, "Albania"), React.createElement("option", { value: "Algeria" }, "Algeria"), React.createElement("option", { value: "American Samoa" }, "American Samoa"), React.createElement("option", { value: "Andorra" }, "Andorra"), React.createElement("option", { value: "Angola" }, "Angola"), React.createElement("option", { value: "Anguilla" }, "Anguilla"), React.createElement("option", { value: "Antigua & Barbuda" }, "Antigua & Barbuda"), React.createElement("option", { value: "Argentina" }, "Argentina"), React.createElement("option", { value: "Armenia" }, "Armenia"), React.createElement("option", { value: "Aruba" }, "Aruba"), React.createElement("option", { value: "Australia" }, "Australia"), React.createElement("option", { value: "Austria" }, "Austria"), React.createElement("option", { value: "Azerbaijan" }, "Azerbaijan"), React.createElement("option", { value: "Bahamas" }, "Bahamas"), React.createElement("option", { value: "Bahrain" }, "Bahrain"), React.createElement("option", { value: "Bangladesh" }, "Bangladesh"), React.createElement("option", { value: "Barbados" }, "Barbados"), React.createElement("option", { value: "Belarus" }, "Belarus"), React.createElement("option", { value: "Belgium" }, "Belgium"), React.createElement("option", { value: "Belize" }, "Belize"), React.createElement("option", { value: "Benin" }, "Benin"), React.createElement("option", { value: "Bermuda" }, "Bermuda"), React.createElement("option", { value: "Bhutan" }, "Bhutan"), React.createElement("option", { value: "Bolivia" }, "Bolivia"), React.createElement("option", { value: "Bonaire" }, "Bonaire"), React.createElement("option", { value: "Bosnia & Herzegovina" }, "Bosnia & Herzegovina"), React.createElement("option", { value: "Botswana" }, "Botswana"), React.createElement("option", { value: "Brazil" }, "Brazil"), React.createElement("option", { value: "British Indian Ocean Ter" }, "British Indian Ocean Ter"), React.createElement("option", { value: "Brunei" }, "Brunei"), React.createElement("option", { value: "Bulgaria" }, "Bulgaria"), React.createElement("option", { value: "Burkina Faso" }, "Burkina Faso"), React.createElement("option", { value: "Burundi" }, "Burundi"), React.createElement("option", { value: "Cambodia" }, "Cambodia"), React.createElement("option", { value: "Cameroon" }, "Cameroon"), React.createElement("option", { value: "Canada" }, "Canada"), React.createElement("option", { value: "Canary Islands" }, "Canary Islands"), React.createElement("option", { value: "Cape Verde" }, "Cape Verde"), React.createElement("option", { value: "Cayman Islands" }, "Cayman Islands"), React.createElement("option", { value: "Central African Republic" }, "Central African Republic"), React.createElement("option", { value: "Chad" }, "Chad"), React.createElement("option", { value: "Channel Islands" }, "Channel Islands"), React.createElement("option", { value: "Chile" }, "Chile"), React.createElement("option", { value: "China" }, "China"), React.createElement("option", { value: "Christmas Island" }, "Christmas Island"), React.createElement("option", { value: "Cocos Island" }, "Cocos Island"), React.createElement("option", { value: "Colombia" }, "Colombia"), React.createElement("option", { value: "Comoros" }, "Comoros"), React.createElement("option", { value: "Congo" }, "Congo"), React.createElement("option", { value: "Cook Islands" }, "Cook Islands"), React.createElement("option", { value: "Costa Rica" }, "Costa Rica"), React.createElement("option", { value: "Cote DIvoire" }, "Cote DIvoire"), React.createElement("option", { value: "Croatia" }, "Croatia"), React.createElement("option", { value: "Cuba" }, "Cuba"), React.createElement("option", { value: "Curaco" }, "Curacao"), React.createElement("option", { value: "Cyprus" }, "Cyprus"), React.createElement("option", { value: "Czech Republic" }, "Czech Republic"), React.createElement("option", { value: "Denmark" }, "Denmark"), React.createElement("option", { value: "Djibouti" }, "Djibouti"), React.createElement("option", { value: "Dominica" }, "Dominica"), React.createElement("option", { value: "Dominican Republic" }, "Dominican Republic"), React.createElement("option", { value: "East Timor" }, "East Timor"), React.createElement("option", { value: "Ecuador" }, "Ecuador"), React.createElement("option", { value: "Egypt" }, "Egypt"), React.createElement("option", { value: "El Salvador" }, "El Salvador"), React.createElement("option", { value: "Equatorial Guinea" }, "Equatorial Guinea"), React.createElement("option", { value: "Eritrea" }, "Eritrea"), React.createElement("option", { value: "Estonia" }, "Estonia"), React.createElement("option", { value: "Ethiopia" }, "Ethiopia"), React.createElement("option", { value: "Falkland Islands" }, "Falkland Islands"), React.createElement("option", { value: "Faroe Islands" }, "Faroe Islands"), React.createElement("option", { value: "Fiji" }, "Fiji"), React.createElement("option", { value: "Finland" }, "Finland"), React.createElement("option", { value: "France" }, "France"), React.createElement("option", { value: "French Guiana" }, "French Guiana"), React.createElement("option", { value: "French Polynesia" }, "French Polynesia"), React.createElement("option", { value: "French Southern Ter" }, "French Southern Ter"), React.createElement("option", { value: "Gabon" }, "Gabon"), React.createElement("option", { value: "Gambia" }, "Gambia"), React.createElement("option", { value: "Georgia" }, "Georgia"), React.createElement("option", { value: "Germany" }, "Germany"), React.createElement("option", { value: "Ghana" }, "Ghana"), React.createElement("option", { value: "Gibraltar" }, "Gibraltar"), React.createElement("option", { value: "Great Britain" }, "Great Britain"), React.createElement("option", { value: "Greece" }, "Greece"), React.createElement("option", { value: "Greenland" }, "Greenland"), React.createElement("option", { value: "Grenada" }, "Grenada"), React.createElement("option", { value: "Guadeloupe" }, "Guadeloupe"), React.createElement("option", { value: "Guam" }, "Guam"), React.createElement("option", { value: "Guatemala" }, "Guatemala"), React.createElement("option", { value: "Guinea" }, "Guinea"), React.createElement("option", { value: "Guyana" }, "Guyana"), React.createElement("option", { value: "Haiti" }, "Haiti"), React.createElement("option", { value: "Hawaii" }, "Hawaii"), React.createElement("option", { value: "Honduras" }, "Honduras"), React.createElement("option", { value: "Hong Kong" }, "Hong Kong"), React.createElement("option", { value: "Hungary" }, "Hungary"), React.createElement("option", { value: "Iceland" }, "Iceland"), React.createElement("option", { value: "Indonesia" }, "Indonesia"), React.createElement("option", { value: "India" }, "India"), React.createElement("option", { value: "Iran" }, "Iran"), React.createElement("option", { value: "Iraq" }, "Iraq"), React.createElement("option", { value: "Ireland" }, "Ireland"), React.createElement("option", { value: "Isle of Man" }, "Isle of Man"), React.createElement("option", { value: "Israel" }, "Israel"), React.createElement("option", { value: "Italy" }, "Italy"), React.createElement("option", { value: "Jamaica" }, "Jamaica"), React.createElement("option", { value: "Japan" }, "Japan"), React.createElement("option", { value: "Jordan" }, "Jordan"), React.createElement("option", { value: "Kazakhstan" }, "Kazakhstan"), React.createElement("option", { value: "Kenya" }, "Kenya"), React.createElement("option", { value: "Kiribati" }, "Kiribati"), React.createElement("option", { value: "Korea North" }, "Korea North"), React.createElement("option", { value: "Korea South" }, "Korea South"), React.createElement("option", { value: "Kuwait" }, "Kuwait"), React.createElement("option", { value: "Kyrgyzstan" }, "Kyrgyzstan"), React.createElement("option", { value: "Laos" }, "Laos"), React.createElement("option", { value: "Latvia" }, "Latvia"), React.createElement("option", { value: "Lebanon" }, "Lebanon"), React.createElement("option", { value: "Lesotho" }, "Lesotho"), React.createElement("option", { value: "Liberia" }, "Liberia"), React.createElement("option", { value: "Libya" }, "Libya"), React.createElement("option", { value: "Liechtenstein" }, "Liechtenstein"), React.createElement("option", { value: "Lithuania" }, "Lithuania"), React.createElement("option", { value: "Luxembourg" }, "Luxembourg"), React.createElement("option", { value: "Macau" }, "Macau"), React.createElement("option", { value: "Macedonia" }, "Macedonia"), React.createElement("option", { value: "Madagascar" }, "Madagascar"), React.createElement("option", { value: "Malaysia" }, "Malaysia"), React.createElement("option", { value: "Malawi" }, "Malawi"), React.createElement("option", { value: "Maldives" }, "Maldives"), React.createElement("option", { value: "Mali" }, "Mali"), React.createElement("option", { value: "Malta" }, "Malta"), React.createElement("option", { value: "Marshall Islands" }, "Marshall Islands"), React.createElement("option", { value: "Martinique" }, "Martinique"), React.createElement("option", { value: "Mauritania" }, "Mauritania"), React.createElement("option", { value: "Mauritius" }, "Mauritius"), React.createElement("option", { value: "Mayotte" }, "Mayotte"), React.createElement("option", { value: "Mexico" }, "Mexico"), React.createElement("option", { value: "Midway Islands" }, "Midway Islands"), React.createElement("option", { value: "Moldova" }, "Moldova"), React.createElement("option", { value: "Monaco" }, "Monaco"), React.createElement("option", { value: "Mongolia" }, "Mongolia"), React.createElement("option", { value: "Montserrat" }, "Montserrat"), React.createElement("option", { value: "Morocco" }, "Morocco"), React.createElement("option", { value: "Mozambique" }, "Mozambique"), React.createElement("option", { value: "Myanmar" }, "Myanmar"), React.createElement("option", { value: "Nambia" }, "Nambia"), React.createElement("option", { value: "Nauru" }, "Nauru"), React.createElement("option", { value: "Nepal" }, "Nepal"), React.createElement("option", { value: "Netherland Antilles" }, "Netherland Antilles"), React.createElement("option", { value: "Netherlands" }, "Netherlands (Holland, Europe)"), React.createElement("option", { value: "Nevis" }, "Nevis"), React.createElement("option", { value: "New Caledonia" }, "New Caledonia"), React.createElement("option", { value: "New Zealand" }, "New Zealand"), React.createElement("option", { value: "Nicaragua" }, "Nicaragua"), React.createElement("option", { value: "Niger" }, "Niger"), React.createElement("option", { value: "Nigeria" }, "Nigeria"), React.createElement("option", { value: "Niue" }, "Niue"), React.createElement("option", { value: "Norfolk Island" }, "Norfolk Island"), React.createElement("option", { value: "Norway" }, "Norway"), React.createElement("option", { value: "Oman" }, "Oman"), React.createElement("option", { value: "Pakistan" }, "Pakistan"), React.createElement("option", { value: "Palau Island" }, "Palau Island"), React.createElement("option", { value: "Palestine" }, "Palestine"), React.createElement("option", { value: "Panama" }, "Panama"), React.createElement("option", { value: "Papua New Guinea" }, "Papua New Guinea"), React.createElement("option", { value: "Paraguay" }, "Paraguay"), React.createElement("option", { value: "Peru" }, "Peru"), React.createElement("option", { value: "Phillipines" }, "Philippines"), React.createElement("option", { value: "Pitcairn Island" }, "Pitcairn Island"), React.createElement("option", { value: "Poland" }, "Poland"), React.createElement("option", { value: "Portugal" }, "Portugal"), React.createElement("option", { value: "Puerto Rico" }, "Puerto Rico"), React.createElement("option", { value: "Qatar" }, "Qatar"), React.createElement("option", { value: "Republic of Montenegro" }, "Republic of Montenegro"), React.createElement("option", { value: "Republic of Serbia" }, "Republic of Serbia"), React.createElement("option", { value: "Reunion" }, "Reunion"), React.createElement("option", { value: "Romania" }, "Romania"), React.createElement("option", { value: "Russia" }, "Russia"), React.createElement("option", { value: "Rwanda" }, "Rwanda"), React.createElement("option", { value: "St Barthelemy" }, "St Barthelemy"), React.createElement("option", { value: "St Eustatius" }, "St Eustatius"), React.createElement("option", { value: "St Helena" }, "St Helena"), React.createElement("option", { value: "St Kitts-Nevis" }, "St Kitts-Nevis"), React.createElement("option", { value: "St Lucia" }, "St Lucia"), React.createElement("option", { value: "St Maarten" }, "St Maarten"), React.createElement("option", { value: "St Pierre & Miquelon" }, "St Pierre & Miquelon"), React.createElement("option", { value: "St Vincent & Grenadines" }, "St Vincent & Grenadines"), React.createElement("option", { value: "Saipan" }, "Saipan"), React.createElement("option", { value: "Samoa" }, "Samoa"), React.createElement("option", { value: "Samoa American" }, "Samoa American"), React.createElement("option", { value: "San Marino" }, "San Marino"), React.createElement("option", { value: "Sao Tome & Principe" }, "Sao Tome & Principe"), React.createElement("option", { value: "Saudi Arabia" }, "Saudi Arabia"), React.createElement("option", { value: "Senegal" }, "Senegal"), React.createElement("option", { value: "Seychelles" }, "Seychelles"), React.createElement("option", { value: "Sierra Leone" }, "Sierra Leone"), React.createElement("option", { value: "Singapore" }, "Singapore"), React.createElement("option", { value: "Slovakia" }, "Slovakia"), React.createElement("option", { value: "Slovenia" }, "Slovenia"), React.createElement("option", { value: "Solomon Islands" }, "Solomon Islands"), React.createElement("option", { value: "Somalia" }, "Somalia"), React.createElement("option", { value: "South Africa" }, "South Africa"), React.createElement("option", { value: "Spain" }, "Spain"), React.createElement("option", { value: "Sri Lanka" }, "Sri Lanka"), React.createElement("option", { value: "Sudan" }, "Sudan"), React.createElement("option", { value: "Suriname" }, "Suriname"), React.createElement("option", { value: "Swaziland" }, "Swaziland"), React.createElement("option", { value: "Sweden" }, "Sweden"), React.createElement("option", { value: "Switzerland" }, "Switzerland"), React.createElement("option", { value: "Syria" }, "Syria"), React.createElement("option", { value: "Tahiti" }, "Tahiti"), React.createElement("option", { value: "Taiwan" }, "Taiwan"), React.createElement("option", { value: "Tajikistan" }, "Tajikistan"), React.createElement("option", { value: "Tanzania" }, "Tanzania"), React.createElement("option", { value: "Thailand" }, "Thailand"), React.createElement("option", { value: "Togo" }, "Togo"), React.createElement("option", { value: "Tokelau" }, "Tokelau"), React.createElement("option", { value: "Tonga" }, "Tonga"), React.createElement("option", { value: "Trinidad & Tobago" }, "Trinidad & Tobago"), React.createElement("option", { value: "Tunisia" }, "Tunisia"), React.createElement("option", { value: "Turkey" }, "Turkey"), React.createElement("option", { value: "Turkmenistan" }, "Turkmenistan"), React.createElement("option", { value: "Turks & Caicos Is" }, "Turks & Caicos Is"), React.createElement("option", { value: "Tuvalu" }, "Tuvalu"), React.createElement("option", { value: "Uganda" }, "Uganda"), React.createElement("option", { value: "United Kingdom" }, "United Kingdom"), React.createElement("option", { value: "Ukraine" }, "Ukraine"), React.createElement("option", { value: "UAE" }, "United Arab Emirates"), React.createElement("option", { value: "USA" }, "United States of America"), React.createElement("option", { value: "Uraguay" }, "Uruguay"), React.createElement("option", { value: "Uzbekistan" }, "Uzbekistan"), React.createElement("option", { value: "Vanuatu" }, "Vanuatu"), React.createElement("option", { value: "Vatican City State" }, "Vatican City State"), React.createElement("option", { value: "Venezuela" }, "Venezuela"), React.createElement("option", { value: "Vietnam" }, "Vietnam"), React.createElement("option", { value: "Virgin Islands (Brit)" }, "Virgin Islands (Brit)"), React.createElement("option", { value: "Virgin Islands (USA)" }, "Virgin Islands (USA)"), React.createElement("option", { value: "Wake Island" }, "Wake Island"), React.createElement("option", { value: "Wallis & Futana Is" }, "Wallis & Futana Is"), React.createElement("option", { value: "Yemen" }, "Yemen"), React.createElement("option", { value: "Zaire" }, "Zaire"), React.createElement("option", { value: "Zambia" }, "Zambia"), React.createElement("option", { value: "Zimbabwe" }, "Zimbabwe")))), React.createElement("div", { className: "p-2 mt-3 border text-end bg-light sticky-bottom" }, React.createElement("button", { className: "btn btn-link text-dark mx-2", onClick: () => { localStorage.clear(); location.reload() } }, "Logout")))) } else { return React.createElement(React.Fragment, null, loading) } } } class RegisterForm extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") == null) { loggedin = false } this.state = { showregisterform: props.beginWithRegister, registerdto: { userName: '', password: '', userEmail: '' }, logindto: { userName: '', password: '' }, loading: false, message: '', bsstyle: '', loggedin: loggedin }; this.handleRegisterSubmit = this.handleRegisterSubmit.bind(this); this.handleLogin = this.handleLogin.bind(this); this.handleRegisterClickHere = this.handleRegisterClickHere.bind(this); this.handleLoginClickHere = this.handleLoginClickHere.bind(this) } handleLogin(e) { e.preventDefault(); this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Members/Login', { method: 'post', body: JSON.stringify({ UserName: this.state.logindto.userName, Password: this.state.logindto.password }), headers: { 'Content-Type': 'application/json' } }).then(response => { if (response.status === 200) { response.json().then(data => { console.log(data); if (data.token !== undefined) { localStorage.setItem("token", data.token); localStorage.setItem("myself", JSON.stringify(data.member)); this.setState({ bsstyle: '', message: '', loggedin: true, loading: false }); if (this.props.onLogin !== undefined) { this.props.onLogin() } else { this.setState({ redirectto: '/' }) } } }) } else if (response.status === 404) { response.json().then(data => { this.setState({ bsstyle: 'danger', message: data.error, loading: false }) }) } }) } handleRegisterSubmit(e) { e.preventDefault(); this.setState({ loading: true }); fetch('//' + window.location.host + '/api/members/register', { method: 'post', body: JSON.stringify({ UserName: this.state.registerdto.userName, Password: this.state.registerdto.password, Email: this.state.registerdto.userEmail }), headers: { 'Content-Type': 'application/json' } }).then(response => { console.log(response.status); if (response.status === 200) { this.setState({ loading: false, bsstyle: 'success', message: 'Your registration is complete.', loggedin: false, logindto: { userName: this.state.registerdto.userName, password: '' }, showregisterform: false }) } else if (response.status === 400) { response.json().then(data => { this.setState({ loading: false, bsstyle: 'danger', message: data.error }) }) } else { this.setState({ loading: false, bsstyle: 'danger', message: 'Unable to process your request please try again.' }) } }); return false } handleRegisterClickHere() { this.setState({ showregisterform: true, message: "" }) } handleLoginClickHere() { this.setState({ showregisterform: false, message: "" }) } renderLoginForm() { return React.createElement("form", { onSubmit: this.handleLogin }, React.createElement("div", { className: "mb-3" }, React.createElement("label", null, "Username"), React.createElement("input", { type: "text", className: "form-control", required: true, name: "userName", value: this.state.logindto.userName, onChange: e => { this.setState({ logindto: { userName: e.target.value, password: this.state.logindto.password } }) } })), React.createElement("div", { className: "mb-3" }, React.createElement("label", null, "Password"), React.createElement("input", { className: "form-control", required: true, name: "password", type: "password", onChange: e => { this.setState({ logindto: { userName: this.state.logindto.userName, password: e.target.value } }) } })), React.createElement("div", { className: "row" }, React.createElement("div", { className: "col" }, React.createElement("button", { className: "btn btn-dark", type: "submit" }, "Login")), React.createElement("div", { className: "col text-end" }, React.createElement("a", { href: "/forgotpassword", className: "btn btn-link text-dark" }, "Forgot Password?")))) } static getDerivedStateFromProps(nextProps, prevState) { if (nextProps.beginWithRegister !== prevState.beginWithRegister) { return { someState: nextProps.beginWithRegister } } else { return null } } render() { let loading = this.state.loading ? React.createElement("div", { className: "progress", style: { height: "5px" } }, React.createElement("div", { className: "progress-bar progress-bar-striped progress-bar-animated", role: "progressbar", "aria-valuenow": "75", "aria-valuemin": "0", "aria-valuemax": "100", style: { width: "100%" } })) : null; let messagecontent = this.state.message !== "" ? React.createElement("div", { className: "mt-1 alert alert-" + this.state.bsstyle }, this.state.message) : null; let logincontents = this.state.GenerateOTPButton ? this.renderOTPForm() : this.renderLoginForm(); let formcontents = this.state.showregisterform ? React.createElement("div", null, React.createElement("h3", null, "Register"), React.createElement("div", null, React.createElement("form", { autoComplete: "off", onSubmit: this.handleRegisterSubmit }, React.createElement("div", { className: "mb-3" }, React.createElement("label", null, "Email"), React.createElement("input", { className: "form-control", maxLength: "250", required: true, name: "userEmail", type: "email", value: this.state.registerdto.userEmail, onChange: e => { this.setState({ registerdto: { userName: this.state.registerdto.userName, password: this.state.registerdto.password, userEmail: e.target.value } }) } })), React.createElement("div", { className: "mb-3" }, React.createElement("label", null, "Username"), React.createElement("input", { type: "text", className: "form-control", required: true, name: "username", value: this.state.registerdto.userName, onChange: e => { this.setState({ registerdto: { userName: e.target.value, password: this.state.registerdto.password, userEmail: this.state.registerdto.userEmail } }) } })), React.createElement("div", { className: "mb-3" }, React.createElement("label", null, "Password"), React.createElement("input", { className: "form-control", minLength: "8", required: true, name: "password", type: "password", onChange: e => { this.setState({ registerdto: { userName: this.state.registerdto.userName, password: e.target.value, userEmail: this.state.registerdto.userEmail } }) } })), React.createElement("button", { className: "btn btn-dark", type: "submit" }, "Register")), React.createElement("p", { className: "text-center mt-2" }, "Already a Member! ", React.createElement("a", { onClick: this.handleLoginClickHere, className: "link-success" }, "Login Here"), " "), messagecontent, loading)) : React.createElement("div", null, React.createElement("h3", null, "Login"), React.createElement("div", null, logincontents, React.createElement("p", { className: "text-center mt-3 p-3 border-top" }, "Register for FREE ", React.createElement("a", { onClick: this.handleRegisterClickHere, className: "link-success" }, "Click Here")), messagecontent, loading)); return React.createElement("div", { className: "row align-items-center justify-content-center mx-0" }, React.createElement("div", { className: "col px-0" }, formcontents)) } } class ViewProfile extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), profile: this.props.profile === undefined ? null : this.props.profile } } componentDidMount() { } componentDidUpdate(prevProps, prevState) { } static getDerivedStateFromProps(props, state) { if (props.channel !== state.channel || props.profileid !== state.profileid || props.profile !== state.profile) { return { channel: props.channel, profileid: props.profileid, profile: props.profile === undefined ? null : props.profile } } return null } processString(options) { var key = 0; function processInputWithRegex(option, input) { if (!option.fn || typeof option.fn !== 'function') { return input } if (!option.regex || !(option.regex instanceof RegExp)) { return input } if (typeof input === 'string') { var regex = option.regex; var result = null; var output = []; while ((result = regex.exec(input)) !== null) { var index = result.index; var match = result[0]; output.push(input.substring(0, index)); output.push(option.fn(key += 1, result)); input = input.substring(index + match.length, input.length + 1); regex.lastIndex = 0 } output.push(input); return output } else if (Array.isArray(input)) { return input.map(function (chunk) { return processInputWithRegex(option, chunk) }) } else { return input } } return function (input) { if (!options || !Array.isArray(options) || !options.length) { return input } options.forEach(function (option) { return input = processInputWithRegex(option, input) }); return input } } renderText(text) { let parts = text.split(/(http|https):\/\/(\S+)\.([a-z]{2,}?)(.*?)( |\,|$|\.)/gim); for (let i = 1; i < parts.length; i += 2) { parts[i] = React.createElement("a", { key: 'link' + i, href: parts[i] }, parts[i].split('\n').map((item, key) => { return React.createElement(React.Fragment, { key: key }, item, React.createElement("br", null)) })) } return parts } render() { if (this.state.profile !== null) { var d = new Date(); let pic = React.createElement(React.Fragment, null, React.createElement("img", { src: "/images/nopic.jpg", style: { width: "50px" }, className: "rounded mx-auto d-block img-fluid", alt: "" })); if (this.state.profile.pic !== "") { pic = React.createElement(React.Fragment, null, React.createElement("img", { src: this.state.profile.pic, className: "rounded mx-auto d-block img-fluid", alt: "" })) } let age = this.state.profile.birthYear > 0 ? React.createElement(React.Fragment, null, d.getFullYear() - this.state.profile.birthYear, " Years Old") : null; let address = this.state.profile.city + ' ' + this.state.profile.state + ' ' + this.state.profile.country; if (address.trim() !== '') { address = 'From ' + address } let config = [{ regex: /(http|https):\/\/(\S+)\.([a-z]{2,}?)(.*?)( |\,|$|\.)/gim, fn: (key, result) => React.createElement("span", { key: key }, React.createElement("a", { target: "_blank", href: `${result[1]}://${result[2]}.${result[3]}${result[4]}` }, result[2], ".", result[3], result[4]), result[5]) }, { regex: /\n/gim, fn: (key, result) => React.createElement("br", { key: key }) }, { regex: /(\S+)\.([a-z]{2,}?)(.*?)( |\,|$|\.)/gim, fn: (key, result) => React.createElement("span", { key: key }, React.createElement("a", { target: "_blank", href: `http://${result[1]}.${result[2]}${result[3]}` }, result[1], ".", result[2], result[3]), result[4]) }]; var bio = React.createElement("p", null, this.processString(config)(this.state.profile.bio)); return React.createElement("div", { className: "text-center" }, pic, React.createElement("h4", null, this.state.profile.name), React.createElement("p", null, bio), React.createElement("p", null, React.createElement("em", null, age, " ", address))) } else { return null } } }