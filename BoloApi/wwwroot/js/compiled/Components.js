function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i += 1) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key] } } } return target }; return _extends.apply(this, arguments) } function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }) } else { obj[key] = value } return obj } function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i) } function _toPrimitive(t, r) { if ("object" != typeof t || !t) { return t } var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) { return i } throw new TypeError("@@toPrimitive must return a primitive value.") } return ("string" === r ? String : Number)(t) } class IgnoredUsers extends React.Component { constructor(props) { super(props); _defineProperty(this, "fetchData", () => { this.setState({ loading: true }); let url = '//' + window.location.host + '/api/Ignored?q=' + this.state.q; fetch(url, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { console.log(data); this.setState({ loggedin: true, loading: false, items: data }) }) } }) }); _defineProperty(this, "removeMember", userid => { this.setState({ loading: true }); let url = '//' + window.location.host + '/api/Ignored/remove/' + userid; fetch(url, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.text().then(data => { console.log(data); if (data === "true") { this.setState({ loading: false, items: this.state.items.filter(t => t.id !== userid) }) } }) } }) }); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), q: '', items: [] } } componentDidMount() { this.fetchData() } render() { if (!this.state.loggedin) { return React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-md-6 offset-md-3" }, React.createElement(RegisterForm, { beginWithRegister: false, onLogin: () => { this.setState({ loggedin: localStorage.getItem("token") === null ? false : true, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token") }) } }))) } let temp = []; for (let k in this.state.items) { temp.push(React.createElement("div", { key: this.state.items[k].id, className: "row g-1 mb-2 border-bottom align-items-center" }, React.createElement("div", { className: "col-2" }, React.createElement(MemberPicSmall, { member: this.state.items[k] })), React.createElement("div", { className: "col" }, React.createElement("a", { href: '//' + window.location.host + '/profile?un=' + this.state.items[k].userName, className: "text-primary fs-20" }, this.state.items[k].userName)), React.createElement("div", { className: "col-3 text-end" }, React.createElement("button", { className: "btn btn-secondary", "data-userid": this.state.items[k].id, onClick: e => { this.removeMember(e.target.getAttribute("data-userid")) }, type: "button" }, "Remove")))) } if (temp.length === 0) { temp.push(React.createElement("table", { className: "w-100 mb-1", cellPadding: "0", cellSpacing: "0" }, React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", { align: "center", valign: "middle" }, "No ignored members found."))))) } return React.createElement("div", null, temp) } } class App extends React.Component { constructor(props) { super(props); _defineProperty(this, "setToken", data => { this.setState({ token: data }) }); _defineProperty(this, "setData", data => { this.setState({ data: data }) }); this.state = { token: localStorage.getItem("token"), user: localStorage.getItem("myself"), mainview: localStorage.getItem("token") === null ? "login" : "home", loginform: { email: "", password: "" }, registerform: { name: "", email: "" }, postid: 0 }; this.fetchData = this.fetchData.bind(this); this.loginHandler = this.loginHandler.bind(this) } componentDidMount() { if (localStorage.getItem("token") !== null) { this.fetchData() } } loginHandler() { if (localStorage.getItem("token") != null) { this.fetchData() } } fetchData() { fetch('//' + window.location.host + '/api/Members/Validate', { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); localStorage.clear(); this.setState({ bsstyle: 'danger', message: "Authorization has been denied for this request.", loggedin: false, loading: false, user: null, token: '' }) } else if (response.status === 200) { response.json().then(data => { this.setState({ bsstyle: '', message: "", loggedin: true, loading: false, user: data }) }) } }) } renderProfileCompleteness() { if (localStorage.getItem("token") != null) { var showprofilecompleteribbon = false; if (this.state.user.emptyFields && this.state.user.emptyFields.indexOf("recoveryquestion") > -1) { showprofilecompleteribbon = true } if (this.state.user.emptyFields && this.state.user.emptyFields.indexOf("recoveryanswer") > -1) { showprofilecompleteribbon = true } if (showprofilecompleteribbon) { return React.createElement("div", { className: "alert alert-light text-center", role: "alert" }, "Password recovery question and answer is missing from you profile.\xA0 ", React.createElement("a", { className: "text-danger fs-bold", onClick: () => { this.setState({ mainview: "manageprofile" }) } }, "Update Profile Now")) } } return null } renderHeader() { if (this.state.mainview !== "login" && this.state.mainview !== "register") { const token = localStorage.getItem("token"); let linkitems = []; let loggedin = true; if (token === null) { loggedin = false } let profilepic = null; if (loggedin && this.state.user !== null && this.state.user.pic !== "") { profilepic = React.createElement("img", { src: this.state.user.pic, width: "20", height: "20", className: "rounded" }) } else { profilepic = React.createElement("i", { className: "bi bi-person-square" }) } if (loggedin) { linkitems.push(React.createElement("td", { key: 1, align: "center", valign: "middle", width: "55px" }, React.createElement("a", { className: "text-dark fs-3", onClick: () => { this.setState({ mainview: "profile" }) }, title: "Profile" }, React.createElement("i", { className: "bi bi-person-badge" })))) } else { linkitems.push(React.createElement("td", { key: 2, align: "center", valign: "middle", width: "55px" }, React.createElement("a", { className: "text-dark fs-3", onClick: () => { this.setState({ mainview: "login" }) }, title: "Login" }, React.createElement("i", { className: "bi bi-person-badge" })))) } return React.createElement("div", { className: "container-xl px-0 fixed-top bg-light maxwidth border-top-0" }, React.createElement("table", { cellPadding: "5", cellSpacing: "0", width: "100%", className: "my-1" }, React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", null, React.createElement("a", { onClick: () => { this.setState({ mainview: "home" }) }, className: "text-dark text-decoration-none fs-4" }, "Waarta")), React.createElement("td", { align: "center", valign: "middle", width: "55px" }, React.createElement("a", { className: "text-dark fs-3", onClick: () => { this.setState({ mainview: "home" }) }, title: "Home" }, React.createElement("i", { className: "bi bi-house" }))), React.createElement("td", { align: "center", valign: "middle", width: "55px" }, React.createElement("a", { className: "text-dark fs-3", onClick: () => { this.setState({ mainview: "add" }) }, title: "Add Post" }, React.createElement("i", { className: "bi bi-journal-plus" }))), React.createElement("td", { align: "center", valign: "middle", width: "55px" }, React.createElement("a", { className: "text-dark fs-3", onClick: () => { this.setState({ mainview: "notification" }) }, title: "Notifications" }, React.createElement("i", { className: "bi bi-bell" }))), linkitems), React.createElement("tr", null, React.createElement("td", { colSpan: "6", align: "left" }, React.createElement(Search, null)))))) } else { return null } } renderFooter() { if (this.state.mainview !== "login" && this.state.mainview !== "register") { return React.createElement("nav", { className: "navbar navbar-expand-lg navbar-light border-top" }, React.createElement("div", { className: "container" }, React.createElement("div", { className: "justify-content-md-end" }, React.createElement("a", { className: "text-dark mx-2", onClick: () => { this.setState({ mainview: "faq" }) }, title: "Frequently Asked Questions" }, React.createElement("i", { className: "bi bi-patch-question" })), React.createElement("a", { className: "text-dark mx-2", onClick: () => { this.setState({ mainview: "privacy" }) }, title: "Privacy" }, React.createElement("i", { className: "bi bi-eye-slash-fill" }))))) } else { return null } } renderLogin() { if (this.state.mainview == "login") { return React.createElement("div", { className: "row align-items-center justify-content-center m-3", style: { height: "85vh" } }, React.createElement("div", { className: "col-md-4" }, React.createElement("h1", { className: "cover-heading", style: { fontSize: "3.5rem" } }, "Waarta"), React.createElement("p", { className: "lead" }, "Easily connect with people. Have meaningful conversations. Free exchange of Ideas. Get things done.", React.createElement("br", null), " Made in India.")), React.createElement("div", { className: "col-md-4" }, React.createElement(RegisterForm, { onLogin: this.loginHandler, beginWithRegister: false }))) } else { return null } } renderRegister(message, loading) { if (this.state.mainview === "register") { return React.createElement("div", { className: "row justify-content-center m-3" }, React.createElement("div", { className: "col-4" }), React.createElement("div", { className: "col-4" }, React.createElement(RegisterForm, { onLogin: this.loginHandler, beginWithRegister: false }))) } else { return null } } renderManageProfile() { if (this.state.mainview === "manageprofile") { return React.createElement(ManageProfile, { onProfileChange: () => { this.fetchData() }, onBack: () => { this.setState({ mainview: "profile" }) } }) } else { return null } } renderProfile() { if (this.state.mainview === "profile") { return React.createElement(Profile, { username: this.state.user.userName, onClickSettings: () => { this.setState({ mainview: "manageprofile" }) } }) } else { return null } } renderConversation() { if (this.state.mainview === "conversation") { return React.createElement(Conversation, null) } else { return null } } renderDiscussion() { if (this.state.mainview === "discussion") { return React.createElement(Meetings, null) } else { return null } } renderHome() { if (this.state.mainview === "home") { return React.createElement(Home, null) } else { return null } } renderPrivacy() { if (this.state.mainview === "privacy") { return React.createElement(Privacy, null) } else { return null } } renderFAQ() { if (this.state.mainview === "faq") { return React.createElement("main", { role: "main", className: "inner cover container py-5" }, React.createElement("h1", null, "Frequently Asked Questions"), React.createElement("h4", null, "What is Waarta?"), React.createElement("p", null, "Waarta is a hindi word which literally means communication."), React.createElement("h4", null, "Purpose of Waarta"), React.createElement("p", null, "Sole purpose of waarta is to help facilitate communication between people. Waarta achieves this by providing a set of powerful features like people search, conversations and meetings."), React.createElement("h4", null, "People Search?"), React.createElement("p", null, "\"People Search\" as the name suggest is a search feature through which you can search member profiles on waarta. For example if you are looking for a software engineer with ASP.net skill and 10 years of experience in New Delhi. You can can search the same on waarta and find elligible profiles. ", React.createElement("br", null), "You have to visit conversations page to do a people search."), React.createElement("h4", null, "Conversations"), React.createElement("p", null, "\"Conversation\" is a powerful one to one online text, audio and video chat feature, through which you can communicate with your contacts on waarta and with the people you searched on waarta."), React.createElement("h4", null, "Discussions"), React.createElement("p", null, "A place where like minded people can share ideas on topics of their choice. There is no restrictions on number of members a dicussion can have.")) } else { return null } } render() { let loading = this.state.loading ? React.createElement("div", { className: "progress", style: { height: "5px" } }, React.createElement("div", { className: "progress-bar progress-bar-striped progress-bar-animated", role: "progressbar", "aria-valuenow": "75", "aria-valuemin": "0", "aria-valuemax": "100", style: { width: "100%" } })) : null; let messagecontent = this.state.message !== "" ? React.createElement("div", { className: "mt-1 alert alert-" + this.state.bsstyle }, this.state.message) : null; return React.createElement(React.Fragment, null, React.createElement("div", { className: "container-xl maxwidth g-0", style: { minHeight: "calc(100vh - 143px)" } }, this.renderProfileCompleteness(), this.renderLogin(), this.renderHome(), this.renderProfile(), this.renderManageProfile(), this.renderRegister(messagecontent, loading), this.renderConversation(), this.renderDiscussion(), this.renderFAQ(), this.renderPrivacy()), this.renderFooter()) } } class Home extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: null, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), search: this.props.search !== "" ? this.props.search : "userfeed" } } render() { if (!this.state.loggedin) { return React.createElement(RegisterForm, { beginWithRegister: false, onLogin: () => { this.setState({ loggedin: localStorage.getItem("token") === null ? false : true, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token") }) } }) } return React.createElement("div", { className: "container my-md-3 my-2" }, React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-lg-8 col-md-8 col-12" }, this.state.search.indexOf("#") > -1 ? React.createElement(HashTagDetail, { search: this.state.search }) : null, React.createElement(MemberPostList, { search: this.state.search, viewMode: 2, viewModeAllowed: "false" })), React.createElement("div", { className: "col-lg-4 col-md-4 d-none d-md-block" }, React.createElement("div", { className: "sticky-column py-2" }, React.createElement(AskPushNotification, null), React.createElement(SendInvite, null), React.createElement(SuggestedAccounts, null))))) } } class HashTagDetail extends React.Component { constructor(props) { super(props); _defineProperty(this, "follow", () => { fetch("//" + window.location.host + "/api/follow/FollowHashtag?q=" + encodeURIComponent(this.state.search), { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(resp => { if (resp.status === 200) { this.setState({ followed: true }) } }) }); _defineProperty(this, "unfollow", () => { fetch("//" + window.location.host + "/api/follow/UnfollowHashtag?q=" + encodeURIComponent(this.state.search), { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(resp => { if (resp.status === 200) { this.setState({ followed: false }) } }) }); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: null, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), search: this.props.search, totalPosts: null, followed: null } } componentDidMount() { this.fetchDetail() } fetchDetail() { fetch("//" + window.location.host + "/api/post/hashtagpostcount?q=" + encodeURIComponent(this.state.search), { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(resp => { if (resp.status === 200) { resp.json().then(d => { this.setState({ totalPosts: d.postCount, followed: d.followed }) }) } }) } render() { return React.createElement("div", { className: " bg-white rounded-3 mb-2 p-2" }, React.createElement("div", { className: "row align-items-center" }, React.createElement("div", { className: "col text-end" }, React.createElement("h4", { className: "fs-6 fw-bold" }, this.state.search, " "), this.state.totalPosts != null ? React.createElement("div", { className: "fw-bold" }, this.state.totalPosts, " posts") : null), React.createElement("div", { className: "col" }, this.state.followed != null ? this.state.followed ? React.createElement("button", { type: "button", className: "btn btn-primary", onClick: this.unfollow }, "Unfollow") : React.createElement("button", { type: "button", className: "btn btn-primary", onClick: this.follow }, "Follow") : null))) } } class Explore extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: null, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), search: this.props.search !== "" ? this.props.search : "userfeed" } } render() { if (!this.state.loggedin) { return React.createElement(RegisterForm, { beginWithRegister: false, onLogin: () => { this.setState({ loggedin: localStorage.getItem("token") === null ? false : true, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token") }) } }) } return React.createElement("div", { className: "container my-md-3 my-2" }, React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-lg-8 col-12" }, React.createElement(MemberPostList, { search: "explore", viewMode: 1, viewModeAllowed: "true" })), React.createElement("div", { className: "col-lg-4 d-none d-md-block" }, React.createElement(AskPushNotification, null), React.createElement(SendInvite, null), React.createElement("div", { className: "sticky-column py-2" }, React.createElement(SuggestedAccounts, null))))) } } class Search extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), q: '', items: [], eitems: new Map(), emodel: null, searchactivetab: 'people' }; this.search = this.search.bind(this) } search() { this.setState({ loading: true }); let url = '//' + window.location.host + '/api/search?q=' + this.state.q.replace("#", ""); fetch(url, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { this.setState({ loggedin: true, loading: false, items: data }, () => { }) }) } }) } renderSearchResult() { var items = []; var i = 1; for (var k in this.state.items) { var p = this.state.items[k]; if (p.member) { items.push(React.createElement("li", { key: i, className: "list-group-item border-0 p-2" }, React.createElement(MemberSmallRow, { member: p.member }))) } else if (p.hashtag) { items.push(React.createElement("li", { key: i, className: "list-group-item border-0 p-2" }, React.createElement("div", null, React.createElement("a", { className: "text-dark fw-bold text-decoration-none", href: '//' + window.location.host + '/?q=%23' + p.hashtag.tag }, "#", p.hashtag.tag), React.createElement("div", null, p.hashtag.postCount, " Posts")))) } i += 1 } if (items.length > 0) { return React.createElement("ul", { className: "list-group list-group-flush" }, items) } else { return null } } render() { if (!this.state.loggedin) { return null } let loading = null; if (this.state.loading) { loading = React.createElement("div", { className: "p-2 text-center" }, React.createElement("div", { class: "spinner-border", role: "status" }, React.createElement("span", { class: "visually-hidden" }, "Loading..."))) } let clearsearchhtml = React.createElement("div", { className: "col-md-1 col-2 p-0 text-center" }, React.createElement("button", { type: "button", className: "btn btn-light", "aria-label": "Close", onClick: () => { this.setState({ q: '', items: [] }) } }, React.createElement("i", { className: "bi bi-trash" }))); if (this.state.q === '') { clearsearchhtml = null } return React.createElement(React.Fragment, null, React.createElement("div", { className: "row g-1" }, React.createElement("div", { className: "col" }, React.createElement("input", { type: "text", className: "form-control shadow-none border", value: this.state.q, onChange: e => { this.setState({ q: e.target.value }, () => { this.search() }) }, placeholder: "Search People, Topics, Hashtags", maxLength: "150", onKeyUp: e => { if (e.keyCode === 13) { this.search() } } })), clearsearchhtml), loading, this.renderSearchResult()) } } class Post extends React.Component { constructor(props) { super(props); _defineProperty(this, "fetchPost", () => { this.setState({ loading: true }); let url = '//' + window.location.host + '/api/post/' + this.state.id; fetch(url, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { console.log(data); this.setState({ loading: false, post: data }) }) } }) }); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: null, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), id: this.props.id, post: null } } componentDidMount() { this.fetchPost() } render() { if (!this.state.loggedin) { return React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-md-6 offset-md-3" }, React.createElement(RegisterForm, { beginWithRegister: false, onLogin: () => { this.setState({ loggedin: localStorage.getItem("token") === null ? false : true, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token") }) } }))) } if (this.state.post !== null) { return React.createElement("div", { className: "container-lg my-md-3 my-2" }, React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-md-7 col-12" }, React.createElement(MemberPost, { post: this.state.post, ondelete: id => { this.setState({ post: null }) }, onIgnoredMember: userid => { } })), React.createElement("div", { className: "col-md-5 d-none d-md-block" }, React.createElement(AskPushNotification, null), React.createElement("div", { className: "sticky-column py-3" }, React.createElement(SendInvite, null), React.createElement(SuggestedAccounts, null))))) } else { return React.createElement("div", { className: "container-lg my-md-3 my-2" }, React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-md-7 col-12" }, !this.state.loading ? React.createElement("h1", null, "Incorrect Data, No Post Found.") : ""), React.createElement("div", { className: "col-md-5 d-none d-md-block" }, React.createElement(AskPushNotification, null), React.createElement("div", { className: "sticky-column py-3" }, React.createElement(SendInvite, null), React.createElement(SuggestedAccounts, null))))) } } } class MemberPost extends React.Component { constructor(props) { super(props); _defineProperty(this, "editPost", () => { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/post/edit/' + this.state.post.id, { method: 'post', body: JSON.stringify({ describe: this.state.post.describe, acceptComment: this.state.post.acceptComment, allowShare: this.state.post.allowShare }), headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token"), 'Content-Type': 'application/json' } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { this.setState({ loading: false, message: '', bsstyle: '', showModal: '' }) } else if (response.status > 400 && response.status < 500) { this.setState({ loading: false, message: 'Unable to process request', bsstyle: 'danger' }) } else { try { response.json().then(data => { this.setState({ loading: false, message: data.error, bsstyle: 'danger' }) }) } catch (err) { this.setState({ loading: false, message: 'Unable to save ' + name, bsstyle: 'danger' }) } } }).catch(() => { this.setState({ loading: false, message: 'Unable to contact server', bsstyle: 'danger' }) }) }); _defineProperty(this, "removeMessage", () => { this.setState({ bsstyle: '', message: '' }) }); _defineProperty(this, "deletePost", () => { fetch('//' + window.location.host + '/api/post/delete/' + this.state.post.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { let id = this.state.post.id; this.setState({ loading: false, message: '', bsstyle: '', showModal: '', post: null }, () => { if (this.props.ondelete !== undefined && this.props.ondelete !== null) { this.props.ondelete(id) } }) } else if (response.status === 400) { try { response.json().then(data => { this.setState({ showModal: '', loading: false, message: data.error, bsstyle: 'danger' }) }) } catch (err) { this.setState({ showModal: '', loading: false, message: 'Unable to save ' + name, bsstyle: 'danger' }) } } else { try { response.json().then(data => { this.setState({ showModal: '', loading: false, message: data.error, bsstyle: 'danger' }) }) } catch (err) { this.setState({ showModal: '', loading: false, message: 'Unable to save ' + name, bsstyle: 'danger' }) } } }).catch(data => { this.setState({ showModal: '', loading: false, message: 'Unable to contact server', bsstyle: 'danger' }) }) }); _defineProperty(this, "ignoreMember", () => { fetch('//' + window.location.host + '/api/ignored/' + this.state.post.owner.id, { method: 'post', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 200) { response.text().then(data => { if (data == "false") { } else if (data == "true") { if (this.props.onIgnoredMember !== undefined && this.props.onIgnoredMember !== null) { this.props.onIgnoredMember(this.state.post.owner.id) } } }) } }) }); _defineProperty(this, "flagPost", typeid => { fetch('//' + window.location.host + '/api/post/flag/' + this.state.post.id + "?type=" + typeid, { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 200) { this.setState({ showModal: '' }, () => { alert("Thank you! for reporting the post.") }) } else { this.setState({ showModal: '' }, () => { alert("Unable to process your request") }) } }).catch(() => { this.setState({ showModal: '' }, () => { alert("Unable to process your request") }) }) }); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, bsstyle: '', message: '', myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), post: this.props.post, showreactionlist: false, hashtag: this.props.hashtag ? this.props.hashtag : '', showCommentBox: false, showpostoptions: false, showeditform: false, showdeletemodal: false, showflagmodal: false, showModal: '', muted: true }; this.addReaction = this.addReaction.bind(this); this.sharePost = this.sharePost.bind(this) } addReaction() { fetch('//' + window.location.host + '/api/post/addreaction/' + this.state.post.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { var p = this.state.post; p.hasReacted = data.hasReacted; p.reactionCount = data.reactionCount; this.setState({ loading: false, message: '', bsstyle: '', post: p }) }) } else if (response.status === 400) { try { response.json().then(data => { this.setState({ loading: false, message: data.error, bsstyle: 'danger' }) }) } catch (err) { this.setState({ loading: false, message: 'Unable to save ' + name, bsstyle: 'danger' }) } } else { try { response.json().then(data => { this.setState({ loading: false, message: data.error, bsstyle: 'danger' }) }) } catch (err) { this.setState({ loading: false, message: 'Unable to save ' + name, bsstyle: 'danger' }) } } }) } sharePost(sharewithid) { fetch('//' + window.location.host + '/api/post/share/' + this.state.post.id + "?uid=" + sharewithid, { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { this.setState({ loading: false, bsstyle: "success", message: "Post is shared." }); setTimeout(this.removeMessage, 1500) } else if (response.status === 400 || response.status === 500) { try { response.json().then(data => { this.setState({ loading: false, message: data.error, bsstyle: 'danger' }) }) } catch (err) { this.setState({ loading: false, message: 'Unable to process your request', bsstyle: 'danger' }) } } else { try { response.json().then(data => { this.setState({ loading: false, message: data.error, bsstyle: 'danger' }) }) } catch (err) { this.setState({ loading: false, message: 'Unable to save ' + name, bsstyle: 'danger' }) } } }) } renderPostOptions() { if (this.state.showModal === "post") { let deletebtn = null; let ignoreaccbtn = null, editbtn = null; if (this.state.post.owner.id === this.state.myself.id) { editbtn = React.createElement("div", { className: "text-center border-bottom mb-1 p-1" }, React.createElement("button", { type: "button", className: "btn btn-link btn-lg text-decoration-none text-primary fw-normal", onClick: () => { this.setState({ showModal: 'edit' }) } }, React.createElement("i", { className: "bi bi-pencil-fill me-2" }), " Edit")); deletebtn = React.createElement("div", { className: "text-center border-bottom mb-1 p-1" }, React.createElement("button", { type: "button", className: "btn btn-link btn-lg text-decoration-none text-danger  fw-normal", onClick: () => { this.setState({ showModal: 'delete' }) } }, React.createElement("i", { className: "bi bi-trash3-fill  me-2" }), " Delete")) } if (this.state.post.owner.id !== this.state.myself.id) { ignoreaccbtn = React.createElement("div", { className: "text-center mb-1 p-1" }, React.createElement("button", { type: "button", className: "btn btn-link btn-lg text-decoration-none text-danger  fw-normal", onClick: () => { this.ignoreMember() } }, React.createElement("i", { className: "bi bi-sign-stop-fill me-2" }), " Ignore Member")) } return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal d-block", tabIndex: "-1" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, editbtn, deletebtn, ignoreaccbtn, React.createElement("div", { className: "text-center mb-1 p-1" }, React.createElement("button", { type: "button", className: "btn btn-link btn-lg text-decoration-none text-danger  fw-normal", onClick: () => { this.setState({ showModal: 'flag' }) } }, React.createElement("i", { className: "bi bi-flag-fill me-2" }), " Report"))), React.createElement("div", { className: "modal-footer text-center" }, React.createElement("button", { type: "button", className: "btn btn-secondary", onClick: () => { this.setState({ showModal: '' }) }, "data-bs-dismiss": "modal" }, "Close"))))), React.createElement("div", { className: "modal-backdrop fade show" })) } } renderPostDisplay(p) { p.describe = p.describe + " "; let ownerlink = this.state.hashtag !== '' ? React.createElement("div", { className: "d-inline-block" }, React.createElement("a", { href: '//' + window.location.host + '/post/hastag?ht=' + this.state.hashtag, className: "text-primary fw-semibold fs-20" }, p.owner.userName), React.createElement("a", { href: '//' + window.location.host + '/profile?un=' + p.owner.userName, className: "text-primary fw-semibold fs-20" }, p.owner.userName)) : React.createElement("a", { href: '//' + window.location.host + '/profile?un=' + p.owner.userName, className: "text-primary fw-semibold fs-20" }, p.owner.userName); let owner = React.createElement("div", { className: "p-lg-3 p-2" }, React.createElement("div", { className: "row g-0 align-items-center " }, React.createElement("div", { className: "col-2 col-lg-2 px-md-1", style: { maxWidth: "60px" } }, React.createElement(MemberPicSmall, { member: p.owner })), React.createElement("div", { className: "col col-lg ps-1" }, ownerlink), React.createElement("div", { className: "col-1 text-end" }, React.createElement("button", { className: "btn btn-link text-primary fs-4", onClick: () => { this.setState({ showModal: 'post' }) } }, React.createElement("i", { className: "bi bi-three-dots" }))))); let postshtml = null; if (p.videoURL !== "") { postshtml = React.createElement("div", { style: { minHeight: "300px" } }, React.createElement("video", { src: "//" + location.host + "/" + p.videoURL, className: "w-100" })) } else if (p.photos) { if (p.photos.length == 1) { postshtml = React.createElement("div", { className: "text-center bg-light", style: { minHeight: "300px" } }, React.createElement("img", { src: "//" + location.host + "/" + p.photos[0].photo, className: "img-fluid", onDoubleClick: () => { this.addReaction() } })) } else { postshtml = React.createElement("div", { className: "text-center bg-light", style: { minHeight: "400px" } }, React.createElement(PhotoCarousel, { photos: p.photos, postid: p.id })) } } let commentbox = this.state.showModal === "comment" ? React.createElement(MemberComment, { post: p, cancel: () => { this.setState({ showModal: '' }) }, onCommentAdded: count => { this.state.post.commentCount = count; this.setState({ post: this.state.post }) }, onCommentRemoved: count => { this.state.post.commentCount = count; this.setState({ post: this.state.post }) } }) : null; if (!p.acceptComment) { commentbox = null } let reactionCountHtml = p.reactionCount > 0 ? React.createElement(React.Fragment, null, React.createElement("a", { style: { fontSize: "12px" }, href: "javascript:void(0);", className: "text-primary", role: "button", title: "Show Reactions", onClick: () => { this.setState({ showModal: 'reaction' }) } }, p.reactionCount, React.createElement("br", null), "Likes")) : null; let reactionhtml = React.createElement("a", { href: "javascript:void(0);", className: "fs-3 text-primary mb-2", onClick: () => { this.addReaction() } }, React.createElement("i", { className: "bi bi-heart" })); if (p.hasReacted) { reactionhtml = React.createElement("a", { className: "fs-3 text-danger mb-2", href: "javascript:void(0);", onClick: () => { this.addReaction() } }, React.createElement("i", { className: "bi bi-heart-fill" })) } let commentBtn = null, commentCountHtml = null; if (p.acceptComment) { commentCountHtml = p.commentCount > 0 ? React.createElement(React.Fragment, null, React.createElement("a", { style: { fontSize: "12px" }, className: "text-primary", href: "javascript:void(0);", title: "Show Comments", onClick: () => { this.setState({ showModal: 'comment' }) } }, p.commentCount, React.createElement("br", null), "Comments")) : null; commentBtn = React.createElement("a", { href: "javascript:void(0);", className: "fs-3 text-primary mb-2", onClick: () => { this.setState({ showModal: 'comment' }) } }, React.createElement("i", { className: "bi bi-chat-square-text" })) } let shareBtn = null; if (p.allowShare) { shareBtn = React.createElement("a", { href: "javascript:void(0);", title: "Share post with people", className: "fs-3 text-primary mb-2", onClick: () => { this.setState({ showModal: 'share' }) } }, React.createElement("i", { className: "bi bi-share-fill" })) } let likemodal = null; if (this.state.showModal === "reaction") { likemodal = React.createElement(React.Fragment, null, React.createElement("div", { className: "modal fade show d-block", id: "reactionListModal-" + this.state.post.id, tabIndex: "-1", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-fullscreen-lg-down" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h4", { className: "modal-title fw-semibold" }, "Likes"), React.createElement("button", { type: "button", className: "btn-close", "data-bs-dismiss": "modal", "aria-label": "Close", onClick: () => { this.setState({ showModal: '' }) } })), React.createElement("div", { className: "modal-body p-2" }, React.createElement(MemberSmallList, { target: "reaction", postid: this.state.post.id }))))), React.createElement("div", { className: "modal-backdrop fade show" })) } return React.createElement("div", { id: this.state.post.id, className: "mb-2 bg-white memberpost" }, owner, React.createElement("div", null, React.createElement("div", { className: "px-lg-5" }, postshtml), React.createElement("div", { className: "px-lg-5" }, React.createElement("div", { className: "row g-1 mt-2" }, React.createElement("div", { className: "col" }, React.createElement("div", { className: " text-secondary", style: { fontSize: "13px" } }, React.createElement(DateLabel, { value: p.postDate }))), React.createElement("div", { className: "col text-end" }, React.createElement("table", { className: "d-inline-block", cellPadding: "0", cellSpacing: "0" }, React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", { className: "px-3 pb-0", align: "center", valign: "top" }, reactionhtml), p.acceptComment ? React.createElement("td", { className: "px-3 pb-0", align: "center", valign: "top" }, commentBtn) : null, p.allowShare ? React.createElement("td", { className: "px-3 pb-0", align: "center", valign: "top" }, shareBtn) : null), React.createElement("tr", null, React.createElement("td", { align: "center", valign: "top" }, reactionCountHtml), p.acceptComment ? React.createElement("td", { align: "center", valign: "top" }, commentCountHtml) : null, p.allowShare ? React.createElement("td", null) : null))))), React.createElement("div", { className: "lh-sm" }, React.createElement(ExpandableTextLabel, { cssclass: "fs-small", text: p.describe === null ? "" : p.describe, maxlength: 100 })))), likemodal, commentbox, this.renderPostOptions(), React.createElement("div", { className: "border-bottom my-3" })) } renderShareModal() { if (this.state.showModal === "share") { return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal fade show d-block", tabIndex: "-1", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-dialog-scrollable" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h4", { className: "modal-title text-primary fw-semibold fs-4" }, "Share"), React.createElement("button", { type: "button", className: "btn-close", onClick: () => { this.setState({ showModal: '' }) }, "aria-label": "Close" })), React.createElement("div", { className: "modal-body" }, React.createElement(MemberSmallList, { memberid: this.state.myself.id, target: "share", onSelected: id => { this.sharePost(id) } })), this.state.bsstyle === "success" && this.state.message !== "" ? React.createElement("div", { className: "modal-footer" }, React.createElement("div", { className: "text-success text-center my-2" }, this.state.message)) : null))), React.createElement("div", { className: "modal-backdrop fade show" })) } } renderDeleteModal() { if (this.state.showModal === "delete") { return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal fade show d-block", tabIndex: "-1", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h4", { className: "modal-title text-primary fw-semibold fs-5" }, "Delete Post"), React.createElement("button", { type: "button", className: "btn-close", onClick: () => { this.setState({ showModal: '' }) }, "aria-label": "Close" })), React.createElement("div", { className: "modal-body" }, React.createElement("p", null, "You are going to delete this post permanently. Please confirm?")), React.createElement("div", { className: "modal-footer" }, React.createElement("button", { type: "button", className: "btn btn-primary", onClick: this.deletePost }, "Yes"), React.createElement("button", { type: "button", className: "btn btn-secondary", onClick: () => { this.setState({ showModal: '' }) } }, "No"))))), React.createElement("div", { className: "modal-backdrop fade show" })) } } renderFlagModal() { if (this.state.showModal === "flag") { return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal fade show d-block", tabIndex: "-1", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h4", { className: "modal-title text-primary fw-semibold fs-5" }, "Flag Post"), React.createElement("button", { type: "button", className: "btn-close", onClick: () => { this.setState({ showModal: '' }) }, "aria-label": "Close" })), React.createElement("div", { className: "modal-body" }, React.createElement("ul", { className: "list-group" }, React.createElement("li", { className: "list-group-item" }, React.createElement("a", { onClick: () => { this.flagPost(1) }, href: "javascript:void(0);" }, "Abusive Content")), React.createElement("li", { className: "list-group-item" }, React.createElement("a", { onClick: () => { this.flagPost(2) }, href: "javascript:void(0);" }, "Spam Content")), React.createElement("li", { className: "list-group-item" }, React.createElement("a", { onClick: () => { this.flagPost(3) }, href: "javascript:void(0);" }, "Fake / Misleading")), React.createElement("li", { className: "list-group-item" }, React.createElement("a", { onClick: () => { this.flagPost(4) }, href: "javascript:void(0);" }, "Nudity")), React.createElement("li", { className: "list-group-item" }, React.createElement("a", { onClick: () => { this.flagPost(5) }, href: "javascript:void(0);" }, "Promoting Violence"))))))), React.createElement("div", { className: "modal-backdrop fade show" })) } } renderEditModal() { if (this.state.showModal === "edit") { let loading = this.state.loading ? React.createElement("div", { className: "spinner-border", role: "status" }, React.createElement("span", { className: "visually-hidden" }, "Loading...")) : null; let message = this.state.message !== "" && this.state.bsstyle === "danger" ? React.createElement("div", { className: "alert alert-danger", role: "alert" }, this.state.message) : null; return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal d-block", tabIndex: "-1", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-lg modal-dialog-scrollable" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, React.createElement(EditPost, { post: this.state.post, onchange: (describe, ac, as) => { let p = this.state.post; p.describe = describe; p.acceptComment = ac; p.allowShare = as; this.setState({ post: p }) } }), loading, message), React.createElement("div", { className: "modal-footer" }, React.createElement("button", { type: "button", className: "btn btn-primary", onClick: this.editPost }, "Save"), React.createElement("button", { type: "button", className: "btn btn-secondary", onClick: () => { this.setState({ showModal: '' }) } }, "Close"))))), React.createElement("div", { className: "modal-backdrop fade show" })) } return null } render() { let p = this.state.post; if (p === null) { return null } return React.createElement(React.Fragment, null, this.renderPostDisplay(p), this.renderEditModal(), this.renderDeleteModal(), this.renderFlagModal(), this.renderShareModal()) } } class EditPost extends React.Component { constructor(props) { super(props); _defineProperty(this, "acceptCommentChanged", () => { this.setState({ acceptComment: !this.state.acceptComment }, () => { this.props.onchange(this.state.describe, this.state.acceptComment, this.state.allowShare) }) }); _defineProperty(this, "allowShareChanged", () => { this.setState({ allowShare: !this.state.allowShare }, () => { this.props.onchange(this.state.describe, this.state.acceptComment, this.state.allowShare) }) }); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, bsstyle: '', message: '', myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), describe: this.props.post.describe, acceptComment: this.props.post.acceptComment, allowShare: this.props.post.allowShare, rows: 7 } } render() { let chk = React.createElement("input", { className: "form-check-input", type: "checkbox", id: "acceptcommentchk", role: "switch", onChange: this.acceptCommentChanged }); if (this.state.acceptComment) { chk = React.createElement("input", { className: "form-check-input", checked: true, type: "checkbox", id: "acceptcommentchk", role: "switch", onChange: this.acceptCommentChanged }) } let chk2 = React.createElement("input", { className: "form-check-input", type: "checkbox", id: "allowsharechk", role: "switch", onChange: this.allowShareChanged }); if (this.state.allowShare) { chk2 = React.createElement("input", { className: "form-check-input", checked: true, type: "checkbox", id: "allowsharechk", role: "switch", onChange: this.allowShareChanged }) } return React.createElement("div", null, React.createElement("div", { className: "mb-3" }, React.createElement("textarea", { className: "form-control border shadow-none", onChange: e => { this.setState({ describe: e.target.value }, () => { this.props.onchange(this.state.describe, this.state.acceptComment, this.state.allowShare) }) }, value: this.state.describe, rows: this.state.rows, placeholder: "Add some description to your photo...", maxlength: "7000" })), React.createElement("div", { className: "mb-3 ps-3" }, React.createElement("div", { className: "form-check form-switch" }, chk, React.createElement("label", { className: "form-check-label", htmlFor: "acceptcommentchk" }, "Accept comment On Post"))), React.createElement("div", { className: "mb-3 ps-3" }, React.createElement("div", { className: "form-check form-switch" }, chk2, React.createElement("label", { className: "form-check-label", htmlFor: "allowsharechk" }, "Allow sharing of Post")))) } } class MemberComment extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loadingComments: false, loading: false, loggedin: loggedin, bsstyle: '', message: '', myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), post: this.props.post, comments: { current: 0, pageSize: 20, total: 0, commentList: [] }, commenttext: '', commentiddel: 0, textarearows: 1 }; this.fetchComments = this.fetchComments.bind(this); this.removeComment = this.removeComment.bind(this) } componentDidMount() { this.fetchComments() } addComment() { this.setState({ loading: true }); const fd = new FormData(); fd.set("comment", this.state.commenttext); fd.set("postId", this.state.post.id); fetch('//' + window.location.host + '/api/post/addcomment', { method: 'post', body: fd, headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { var temp = this.state.comments.commentList; temp.unshift(data); let comments = { current: this.state.comments.current, pageSize: this.state.comments.pageSize, total: this.state.comments.total + 1, totalPages: this.state.comments.totalPages, commentList: temp }; this.setState({ loading: false, comments, commenttext: "" }); if (this.props.onCommentAdded !== undefined && this.props.onCommentAdded !== null) { this.props.onCommentAdded(comments.total) } }) } else { this.setState({ loading: false, message: 'Unable to save comment', bsstyle: 'danger' }) } }) } removeComment() { let url = '//' + window.location.host + '/api/post/removecomment/' + this.state.commentiddel; fetch(url, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { let temp = this.state.comments.commentList.filter(t => t.id !== this.state.commentiddel); let comments = { current: this.state.comments.current, pageSize: this.state.comments.pageSize, total: this.state.comments.total - 1, totalPages: this.state.comments.totalPages, commentList: temp }; this.setState({ loading: false, commentiddel: 0, comments }); if (this.props.onCommentRemoved !== undefined && this.props.onCommentRemoved !== null) { this.props.onCommentRemoved(comments.total) } } }) } fetchComments() { this.setState({ loadingComments: true }); let url = '//' + window.location.host + '/api/post/comments/' + this.state.post.id + '?ps=' + this.state.comments.pageSize + '&p=' + this.state.comments.current; fetch(url, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loadingComments: false }) } else if (response.status === 200) { response.json().then(data => { console.log(data); var temp = this.state.comments.commentList; for (var k in data.commentList) { if (temp.filter(t => t.id == data.commentList[k].id).length === 0) { temp.push(data.commentList[k]) } } let comments = { current: data.current, pageSize: data.pageSize, total: data.total, totalPages: data.totalPages, commentList: temp }; this.setState({ loadingComments: false, comments }) }) } else { this.setState({ loadingComments: false }) } }).catch(() => { this.setState({ loadingComments: false }) }) } render() { var items = []; if (this.state.comments.commentList.length === 0) { items.push(React.createElement("p", { key: 0, className: "px-2" }, "No Comments Found.")) } for (var k in this.state.comments.commentList) { var p = this.state.comments.commentList[k]; var ownedCommentMenu = null; if (this.state.myself.id === p.postedBy.id) { ownedCommentMenu = React.createElement("button", { "data-id": p.id, onClick: e => { this.setState({ commentiddel: parseInt(e.target.getAttribute("data-id"), 10) }) }, className: "btn btn-link text-primary btn-sm mx-2", type: "button" }, React.createElement("i", { "data-id": p.id, className: "bi bi-trash" })) } items.push(React.createElement("div", { key: p.id, className: "row g-1 border-bottom p-1" }, React.createElement("div", { className: "col-2 col-md-1" }, React.createElement(MemberPicSmall, { member: p.postedBy })), React.createElement("div", { className: "col" }, React.createElement("a", { href: '//' + window.location.host + '/profile?un=' + p.postedBy.userName, className: "fw-semibold text-primary" }, p.postedBy.userName), React.createElement("div", { className: "lh-base mt-2 mb-1" }, p.comment.split('\n').map((item, key) => { return React.createElement(React.Fragment, { key: key }, React.createElement("span", { dangerouslySetInnerHTML: { __html: item } }), React.createElement("br", null)) })), React.createElement("div", { className: "mb-2 pb-1" }, React.createElement("span", { className: "text-secondary", style: { fontSize: "12px" } }, React.createElement(DateLabel, { value: p.postDate })), " ", ownedCommentMenu)))) } let confirmdelete = null; if (this.state.commentiddel > 0) { confirmdelete = React.createElement(ConfirmBox, { title: "", message: "Are you sure you want to remove this comment?", ok: () => { this.removeComment() }, cancel: () => { this.setState({ commentiddel: 0 }) } }) } return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal fade show", style: { display: "block" }, "data-bs-backdrop": "static", "data-bs-keyboard": "false", tabIndex: "-1" }, React.createElement("div", { className: "modal-dialog modal-lg modal-dialog-scrollable" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title fw-semibold" }, "Comments"), React.createElement("button", { type: "button", className: "btn-close", onClick: () => { this.props.cancel() } })), React.createElement("div", { className: "modal-body p-1", style: { minHeight: "300px" } }, this.state.loadingComments ? React.createElement("p", null, "Loading Comments...") : items, confirmdelete), React.createElement("div", { className: "modal-footer" }, React.createElement("table", { className: "w-100", cellPadding: "0", cellSpacing: "0" }, React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", { valign: "middle", align: "right" }, React.createElement(AutoAdjustTextArea, { htmlattr: { class: "form-control shadow-none border mb-2", required: "required", placeholder: "Type your comment here...", maxLength: 3000 }, required: true, onChange: val => { this.setState({ commenttext: val }) }, value: this.state.commenttext, maxRows: 5, minRows: 1 })), React.createElement("td", { valign: "middle", width: "58px", className: "ps-1" }, React.createElement("button", { type: "button", className: "btn btn-blue", onClick: () => { this.addComment() } }, "Post"))))))))), React.createElement("div", { className: "modal-backdrop fade show" })) } } class MemberPostList extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } let ls = { model: null, posts: [] }; if (this.props.search === "userfeed" && localStorage.getItem("userfeed") != null) { ls = JSON.parse(localStorage.getItem("userfeed")) } else if (this.props.search === "explore" && localStorage.getItem("explore") != null) { ls = JSON.parse(localStorage.getItem("explore")) } this.state = { loading: false, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), model: ls.model, q: this.props.search, p: 0, posts: ls.posts, viewMode: parseInt(this.props.viewMode, 10), viewModeAllowed: this.props.viewModeAllowed === "true" ? true : false, post: null }; this.selectPost = this.selectPost.bind(this); this.addReaction = this.addReaction.bind(this); this.postDeleted = this.postDeleted.bind(this) } selectPost(id) { this.setState({ viewMode: 2 }, () => { document.getElementById(id).scrollIntoView({ behavior: "auto", block: "center", inline: "center" }) }) } addReaction(id) { fetch('//' + window.location.host + '/api/Post/addreaction/' + id, { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { var temp = this.state.posts; for (var k in temp) { var p = temp[k]; if (p.id == id) { p.hasReacted = data.hasReacted; p.reactionCount = data.reactionCount } } this.setState({ loading: false, message: '', bsstyle: '', posts: temp }) }) } else if (response.status === 400) { try { response.json().then(data => { this.setState({ loading: false, message: data.error, bsstyle: 'danger' }) }) } catch (err) { this.setState({ loading: false, message: 'Unable to save ' + name, bsstyle: 'danger' }) } } else { try { response.json().then(data => { this.setState({ loading: false, message: data.error, bsstyle: 'danger' }) }) } catch (err) { this.setState({ loading: false, message: 'Unable to save ' + name, bsstyle: 'danger' }) } } }) } componentDidMount() { this.loadFeed(true) } loadFeed(firsttime) { this.setState({ loading: true }); let url = '//' + window.location.host + '/api/post?q=' + encodeURIComponent(this.state.q) + '&p=' + this.state.p; if (this.state.q === "userfeed") { url = '//' + window.location.host + '/api/post/feed?p=' + this.state.p } else if (this.state.q === "explore") { url = '//' + window.location.host + '/api/post/explore?p=' + this.state.p } fetch(url, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { console.log(data); let temp = firsttime ? data.posts : this.state.posts; if (!firsttime) { for (var k in data.posts) { temp.push(data.posts[k]) } } this.setState({ loggedin: true, loading: false, model: { current: data.current, pageSize: data.pageSize, total: data.total, totalPages: data.totalPages }, posts: temp }, () => { let obj = { model: this.state.model, posts: this.state.posts }; if (this.state.q === "userfeed") { localStorage.setItem("userfeed", JSON.stringify(obj)) } else if (this.state.q === "explore") { localStorage.setItem("explore", JSON.stringify(obj)) } }) }) } }) } postDeleted(id) { this.setState({ posts: this.state.posts.filter(t => t.id !== id) }) } renderPosts() { let empty = React.createElement("div", { key: 0 }, React.createElement("div", { className: "text-center fs-3 py-5 bg-white rounded-3" }, React.createElement("img", { src: "//" + location.host + "/theme1/images/add-post.svg", className: "img-fluid", style: { maxWidth: "150px" } }), React.createElement("h2", { className: "fw-semibold" }, "Nothing to see here"))); if (this.state.viewMode === 2) { let items = []; if (this.state.model !== null) { for (var k in this.state.posts) { items.push(React.createElement(MemberPost, { key: this.state.posts[k].id, post: this.state.posts[k], ondelete: this.postDeleted, onIgnoredMember: userid => { this.setState({ posts: this.state.posts.filter(t => t.owner.id !== userid) }) } })) } } if (items.length == 0 && !this.state.loading) { items.push(empty) } return React.createElement(React.Fragment, null, items) } else if (this.state.viewMode === 1) { let items = []; for (var k in this.state.posts) { var p = this.state.posts[k]; if (p.videoURL !== "") { } else { items.push(React.createElement("div", { className: "col pointer" }, React.createElement("div", { className: "card border-0" }, React.createElement("div", { className: "imgbg rounded-3", style: { backgroundImage: "url(//" + window.location.host + "/" + p.photos[0].photo + ")" } }, React.createElement("img", { src: "//" + window.location.host + "/" + p.photos[0].photo, className: "opacity-0 img-fluid", "data-postid": p.id, onClick: e => { this.selectPost(e.target.getAttribute("data-postid")) } }))))) } } if (items.length == 0 && !this.state.loading) { items.push(empty); return items } return React.createElement("div", { className: "row row-cols-2 row-cols-md-3 g-4" }, items) } } render() { if (!this.state.loggedin) { return React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-md-6 offset-md-3" }, React.createElement(RegisterForm, { beginWithRegister: false, onLogin: () => { this.setState({ loggedin: localStorage.getItem("token") === null ? false : true, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token") }) } }))) } var html = this.renderPosts(); var loadmore = null; let loading = null; if (this.state.loading) { loading = React.createElement("div", { className: "text-center p-3" }, React.createElement("div", { class: "spinner-border", role: "status" }, React.createElement("span", { class: "visually-hidden" }, "Loading..."))) } if (this.state.model !== null) { if (this.state.model.current + 1 < this.state.model.totalPages) { loadmore = React.createElement("div", { className: "text-center" }, React.createElement("button", { className: "btn btn-light", onClick: () => { this.setState({ p: this.state.model.current + 1 }, () => { this.loadFeed(false) }) } }, "Load More")) } } var viewmodetabhtml = null; if (this.state.viewModeAllowed && this.state.posts.length > 0) { viewmodetabhtml = React.createElement("nav", { className: "nav nav-pills justify-content-center m-1" }, React.createElement("a", { onClick: () => { this.setState({ viewMode: 1 }) }, className: this.state.viewMode === 1 ? "nav-link active bg-primary" : "nav-link text-primary" }, React.createElement("i", { className: "bi bi-grid-3x3-gap-fill" })), React.createElement("a", { onClick: () => { this.setState({ viewMode: 2 }) }, className: this.state.viewMode === 2 ? "nav-link active bg-primary" : "nav-link text-primary" }, React.createElement("i", { className: "bi bi-view-list" }))) } return React.createElement(React.Fragment, null, viewmodetabhtml, loading, html, loadmore) } } class MemberSmallList extends React.Component { constructor(props) { super(props); _defineProperty(this, "hashTagRemove", tag => { fetch('//' + window.location.host + '/api/Follow/UnfollowHashtag?q=' + encodeURIComponent(tag), { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { let items = this.state.followList.filter(t => t.tag !== tag); this.setState({ followList: items }) } }) }); _defineProperty(this, "loadFeed", fresh => { this.setState({ loading: true }); fetch(this.url + "?q=" + encodeURIComponent(this.state.q) + "&p=" + this.state.p, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { if (this.props.target === 'reaction') { var temp = fresh ? [] : this.state.reactions; for (var k in data.reactions) { temp.push(data.reactions[k]) } this.setState({ loading: false, model: { current: data.current, pageSize: data.pageSize, total: data.total, totalPages: data.totalPages }, reactions: temp }) } else if (this.props.target === 'follower' || this.props.target === 'following' || this.props.target === "share") { var temp = fresh ? [] : this.state.followList; for (var k in data.followList) { temp.push(data.followList[k]) } this.setState({ loading: false, model: { current: data.current, pageSize: data.pageSize, total: data.total, totalPages: data.totalPages }, followList: temp }) } }) } }) }); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), model: null, q: '', p: 0, reactions: [], followList: [] }; if (this.props.target === 'reaction') { this.url = '//' + window.location.host + '/api/post/reactionlist/' + this.props.postid } else if (this.props.target === 'follower' || this.props.target === 'share') { this.url = '//' + window.location.host + '/api/Follow/followerlist/' } else if (this.props.target === 'following') { this.url = '//' + window.location.host + '/api/Follow/followinglist/' } this.followerRemoved = this.followerRemoved.bind(this) } componentDidMount() { this.loadFeed(true) } followerRemoved(id) { var items = []; for (var k in this.state.followList) { var p = this.state.followList[k]; if (p.follower.id != id) { items.push(p) } } this.setState({ followList: items }) } renderPosts() { if (this.props.target === 'reaction') { var items = []; for (var k in this.state.reactions) { var p = this.state.reactions[k]; items.push(React.createElement(MemberSmallRow, { key: p.member.id, member: p.member, status: p.status })) } return React.createElement(React.Fragment, null, items) } else if (this.props.target === 'follower') { var items = []; for (var k in this.state.followList) { var p = this.state.followList[k]; items.push(React.createElement(MemberSmallRow, { key: p.follower.id, member: p.follower, status: p.status, showRemove: this.state.myself.id === this.props.memberid ? true : false, removed: id => { this.followerRemoved(id) } })) } return React.createElement(React.Fragment, null, items) } else if (this.props.target === 'share') { var items = []; for (var k in this.state.followList) { var p = this.state.followList[k]; items.push(React.createElement(MemberSmallRow, { key: p.follower.id, member: p.follower, status: p.status, showRemove: false, showShare: true, onShare: id => { if (this.props.onSelected !== undefined && this.props.onSelected !== null) { this.props.onSelected(id) } } })) } return React.createElement(React.Fragment, null, items) } else if (this.props.target === 'following') { let items = []; for (let k in this.state.followList) { let p = this.state.followList[k]; if (p.tag !== null && p.tag !== "") { let h = React.createElement("div", { key: p.id, style: { height: "55px" }, className: "row g-0 my-2 align-items-center justify-items-center" }, React.createElement("div", { className: "col" }, React.createElement("a", { href: "//" + location.host + "/?q=" + encodeURIComponent(p.tag), class: "text-primary text-decoration-none" }, p.tag)), React.createElement("div", { className: "col text-end" }, React.createElement("button", { "data-tag": p.tag, type: "button", style: { width: "110px" }, className: "btn btn-blue", onClick: e => { this.hashTagRemove(e.target.getAttribute("data-tag")) } }, "Unfollow"))); items.push(h) } else { items.push(React.createElement(MemberSmallRow, { key: p.following.id, member: p.following, status: p.status })) } } return React.createElement(React.Fragment, null, items) } } render() { var loadmore = null; if (this.state.model !== null) { if (this.state.model.current + 1 < this.state.model.totalPages) { loadmore = React.createElement("div", { className: "text-center bg-white p-3" }, React.createElement("button", { className: "btn btn-light", onClick: () => { this.setState({ p: this.state.model.current + 1 }, () => { this.loadFeed(false) }) } }, "Load More")) } } return React.createElement("div", { style: { minHeight: "400px" } }, React.createElement("div", { className: "row g-1" }, React.createElement("div", { className: "col-10" }, React.createElement("input", { type: "text", placeholder: "Search keywords...", className: "form-control shadow-none border", value: this.state.q, onChange: e => { this.setState({ q: e.target.value, p: 0 }, () => { if (this.state.q === "") { this.loadFeed(true) } }) } })), React.createElement("div", { className: "col" }, React.createElement("button", { type: "button", disabled: this.state.loading, className: "btn btn-blue", onClick: () => { this.loadFeed(true) } }, this.state.loading ? React.createElement("div", { className: "spinner-border spinner-border-sm", role: "status" }, React.createElement("span", { className: "visually-hidden" }, "Loading...")) : React.createElement("i", { className: "bi bi-search" })))), this.renderPosts(), loadmore, this.state.loading ? React.createElement("div", { className: "text-center p-2" }, React.createElement("div", { className: "spinner-border", role: "status" }, React.createElement("span", { className: "visually-hidden" }, "Loading..."))) : null) } } class MemberSmallRow extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), member: this.props.member, status: this.props.status, showRemove: this.props.showRemove, showShare: this.props.showShare === undefined || this.props.showShare === null ? false : this.props.showShare, showRemoveConfirm: false }; this.removeFollow = this.removeFollow.bind(this) } removeFollow() { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/follow/remove/' + this.state.member.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { this.setState({ status: 0, showRemove: false, loading: false }); if (this.props.removed) { this.props.removed(this.state.member.id) } } }) } render() { var followbtn = React.createElement(FollowButton, { member: this.state.member, status: this.state.status }); if (this.state.showRemove) { followbtn = React.createElement("button", { type: "button", className: "btn btn-secondary", onClick: () => { this.setState({ showRemoveConfirm: true }) } }, "Remove") } if (this.state.showShare) { followbtn = React.createElement("button", { type: "button", "data-id": this.props.member.id, className: "btn btn-blue", onClick: e => { this.props.onShare(e.target.getAttribute("data-id")) } }, "Share") } var removeConfirmBox = null; if (this.state.showRemoveConfirm) { removeConfirmBox = React.createElement(ConfirmBox, { cancel: () => { this.setState({ showRemoveConfirm: false }) }, ok: () => { this.setState({ showRemoveConfirm: false }); this.removeFollow() }, message: "Are you sure you want to remove this member from your followers?" }) } return React.createElement("div", { className: "row g-0 align-items-center justify-items-center" }, React.createElement("div", { className: "col-2 p-2" }, React.createElement(MemberPicSmall, { member: this.state.member })), React.createElement("div", { className: "col px-1" }, React.createElement("a", { href: '//' + window.location.host + '/profile?un=' + this.state.member.userName }, this.state.member.name != "" ? React.createElement("div", { className: "fs-20 text-secondary fw-semibold text-capitalize" }, this.state.member.name) : null, React.createElement("div", { className: this.state.member.name != "" ? "text-primary fs-small mt-2" : "fs-20 text-secondary fw-semibold" }, this.state.member.userName))), React.createElement("div", { className: "col text-end" }, followbtn, removeConfirmBox)) } } class MemberPicSmall extends React.Component { constructor(props) { super(props); this.state = { member: this.props.member } } render() { var memberpic = this.state.member.pic !== "" ? React.createElement("a", { href: '//' + window.location.host + '/profile?un=' + this.state.member.userName, className: "border-0" }, React.createElement("img", { src: '//' + window.location.host + "/" + this.state.member.pic, className: "img-fluid pointer profile-pic-border rounded-circle owner-thumb-small", alt: "" })) : React.createElement("a", { href: '//' + window.location.host + '/profile?un=' + this.state.member.userName, className: "border-0 text-secondary" }, React.createElement("img", { src: '//' + location.host + '/theme1/images/person-fill.svg', alt: "No Pic", className: " img-fluid pointer profile-pic-border owner-thumb-small" })); return React.createElement(React.Fragment, null, memberpic) } } class FollowButton extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), member: this.props.member, status: null, notify: this.props.notify }; this.askToFollow = this.askToFollow.bind(this); this.unFollow = this.unFollow.bind(this); this.loadStatus = this.loadStatus.bind(this) } componentDidMount() { this.loadStatus() } loadStatus() { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/follow/Status/' + this.state.member.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { this.setState({ status: data.status, loading: false }) }) } }).catch(error => { this.setState({ bsstyle: 'text-danger', message: 'Unable to contact server', loading: false }) }) } askToFollow() { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/follow/ask/' + this.state.member.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { console.log(data); this.setState({ status: data.status, loading: false }); if (this.props.notify) { this.props.notify(this.state.member.id, this.state.status) } }) } }).catch(error => { this.setState({ bsstyle: 'text-danger', message: 'Unable to contact server', loading: false }) }) } unFollow() { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/follow/unfollow/' + this.state.member.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { this.setState({ status: data.status, loading: false }); if (this.props.notify) { this.props.notify(this.state.member.id, this.state.status) } }) } else { this.setState({ bsstyle: 'text-danger', message: 'Unable to process request', loading: false }) } }).catch(error => { this.setState({ bsstyle: 'text-danger', message: 'Unable to contact server', loading: false }) }) } render() { var followbtn = null; if (this.state.loading === false) { if (this.state.status === 0) { if (this.state.member.id !== this.state.myself.id) { followbtn = React.createElement("button", { type: "button", className: "btn btn-danger btn-follow", onClick: this.askToFollow }, "Follow") } } else if (this.state.status === 1) { followbtn = React.createElement("button", { type: "button", className: "btn btn-blue btn-follow", onClick: this.unFollow }, "Unfollow") } else if (this.state.status === 2) { followbtn = React.createElement("button", { type: "button", className: "btn btn-danger", onClick: this.unFollow }, "Requested") } } else if (this.state.loading === true) { followbtn = null } return React.createElement(React.Fragment, null, followbtn) } } class ConfirmBox extends React.Component { constructor(props) { super(props); this.state = { open: true } } render() { if (this.state.open) { return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal fade show", style: { display: "block" }, tabIndex: "-1" }, React.createElement("div", { className: "modal-dialog modal-dialog-centered" }, React.createElement("div", { className: "modal-content" }, this.props.title.length !== 0 ? React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title" }, this.props.title), React.createElement("button", { type: "button", className: "btn-close", onClick: () => { this.setState({ open: false }, () => { this.props.cancel() }) } })) : null, React.createElement("div", { className: "modal-body" }, React.createElement("p", { className: "text-center" }, this.props.message)), React.createElement("div", { className: "modal-footer" }, React.createElement("button", { type: "button", className: "btn btn-primary", style: { minWidth: "60px" }, onClick: () => { this.props.ok() } }, "Yes"), React.createElement("button", { type: "button", className: "btn btn-secondary", style: { minWidth: "60px" }, onClick: () => { this.setState({ open: false }, () => { this.props.cancel() }) } }, "No"))))), React.createElement("div", { className: "modal-backdrop fade show" })) } else { return null } } } class ExpandableTextLabel extends React.Component { constructor(props) { super(props); let nlcount = this.props.text.split(/\r\n|\r|\n/).length; let chcount = this.props.text.length; this.state = { text: this.props.text, expand: !(nlcount > 4 || chcount > this.props.maxlength), showexpand: nlcount > 4 || chcount > this.props.maxlength, maxlength: parseInt(this.props.maxlength, 10), cssclass: this.props.cssclass !== undefined ? this.props.cssclass : "" } } componentWillReceiveProps(nextProps) { if (nextProps.text !== this.state.text) { let nlcount = nextProps.text.split(/\r\n|\r|\n/).length; let chcount = nextProps.text.length; this.setState({ text: nextProps.text, maxlength: parseInt(nextProps.maxlength, 10), cssclass: nextProps.cssclass !== undefined ? nextProps.cssclass : "", showexpand: nlcount > 4 || chcount > this.props.maxlength, expand: !(nlcount > 4 || chcount > this.props.maxlength) }) } } render() { if (this.state.text.trim() === "") { return null } let text = null, expandbtn = null; if (this.state.expand) { let tempdescribe = this.state.text; let describe = this.state.text; let hashtagarr = tempdescribe.replace(/\n/g, " ").split(" ").filter(v => v.startsWith('#')); hashtagarr.forEach(function (hashtag) { let myExp = new RegExp(hashtag + "\\s", 'g'); describe = describe.replace(myExp, "<a href='//" + location.host + "/?q=" + encodeURIComponent(hashtag) + "'>" + hashtag + "</a> ") }); text = React.createElement(React.Fragment, null, describe.split('\n').map((item, key) => { return React.createElement(React.Fragment, { key: key }, React.createElement("span", { dangerouslySetInnerHTML: { __html: item } }), React.createElement("br", null)) })) } else { let temp = this.state.text.split(/\r\n|\r|\n/).join(" "); if (temp.length > this.state.maxlength) { temp = temp.substring(0, this.state.maxlength) } text = React.createElement(React.Fragment, null, temp) } if (this.state.showexpand) { expandbtn = React.createElement("a", { href: "javascript:void(0)", onClick: () => { this.setState({ expand: !this.state.expand }) }, className: "text-primary ps-2 fw-semibold" }, !this.state.expand ? "More" : "Less") } return React.createElement("div", { className: this.state.cssclass }, text, expandbtn) } } class DateLabel extends React.Component { constructor(props) { super(props); this.month = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]; this.state = { value: this.props.value } } transformData() { var d = new Date(this.state.value); return d.getDate() + " " + this.month[d.getMonth()] + " " + d.getFullYear() } render() { return React.createElement(React.Fragment, null, this.transformData()) } } class MessageStrip extends React.Component { constructor(props) { super(props); this.state = { bsstyle: this.props.bsstyle !== undefined ? this.props.bsstyle : "", message: this.props.message !== undefined ? this.props.message : "" } } static getDerivedStateFromProps(nextProps, prevState) { if (nextProps.message !== prevState.message) { return { message: nextProps.message, bsstyle: nextProps.bsstyle } } else { return null } } render() { if (this.state.message !== '') { return React.createElement("div", { className: 'noMargin noRadius alert alert-' + this.state.bsstyle, role: "alert" }, this.state.message) } else { return null } } } class Emoji extends React.Component { constructor(props) { super(props); this.onEmojiClick = this.onEmojiClick.bind(this) } onEmojiClick(value) { this.props.onSelect(value) } render() { return React.createElement("div", { className: "emojicont p-2 border-top border-bottom border-right border-left bg-light", style: { maxWidth: "100%" } }, React.createElement("ul", { className: "list-inline mb-1" }, React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "GRINNING FACE", onClick: () => this.onEmojiClick('😀') }, "\uD83D\uDE00")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "GRINNING FACE WITH SMILING EYES", onClick: () => this.onEmojiClick('😁') }, "\uD83D\uDE01")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH TEARS OF JOY", onClick: () => this.onEmojiClick('😂') }, "\uD83D\uDE02")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH OPEN MOUTH", onClick: () => this.onEmojiClick('😃') }, "\uD83D\uDE03")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH OPEN MOUTH AND SMILING EYES", onClick: () => this.onEmojiClick('😄') }, "\uD83D\uDE04")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH OPEN MOUTH AND COLD SWEAT", onClick: () => this.onEmojiClick('😅') }, "\uD83D\uDE05")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH OPEN MOUTH AND TIGHTLY-CLOSED EYES", onClick: () => this.onEmojiClick('😆') }, "\uD83D\uDE06")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH HALO", onClick: () => this.onEmojiClick('😇') }, "\uD83D\uDE07")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH HORNS", onClick: () => this.onEmojiClick('😈') }, "\uD83D\uDE08")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "WINKING FACE", onClick: () => this.onEmojiClick('😉') }, "\uD83D\uDE09")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH SMILING EYES", onClick: () => this.onEmojiClick('😊') }, "\uD83D\uDE0A")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE SAVOURING DELICIOUS FOOD", onClick: () => this.onEmojiClick('😋') }, "\uD83D\uDE0B")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "RELIEVED FACE", onClick: () => this.onEmojiClick('😌') }, "\uD83D\uDE0C")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH HEART-SHAPED EYES", onClick: () => this.onEmojiClick('😍') }, "\uD83D\uDE0D")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE WITH SUNGLASSES", onClick: () => this.onEmojiClick('😎') }, "\uD83D\uDE0E")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMIRKING FACE", onClick: () => this.onEmojiClick('😏') }, "\uD83D\uDE0F")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "NEUTRAL FACE", onClick: () => this.onEmojiClick('😐') }, "\uD83D\uDE10")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "EXPRESSIONLESS FACE", onClick: () => this.onEmojiClick('😑') }, "\uD83D\uDE11")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "UNAMUSED FACE", onClick: () => this.onEmojiClick('😒') }, "\uD83D\uDE12")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH COLD SWEAT", onClick: () => this.onEmojiClick('😓') }, "\uD83D\uDE13")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "PENSIVE FACE", onClick: () => this.onEmojiClick('😔') }, "\uD83D\uDE14")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "CONFUSED FACE", onClick: () => this.onEmojiClick('😕') }, "\uD83D\uDE15")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "CONFOUNDED FACE", onClick: () => this.onEmojiClick('😖') }, "\uD83D\uDE16")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "KISSING FACE", onClick: () => this.onEmojiClick('😗') }, "\uD83D\uDE17")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE THROWING A KISS", onClick: () => this.onEmojiClick('😘') }, "\uD83D\uDE18")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "KISSING FACE WITH SMILING EYES", onClick: () => this.onEmojiClick('😙') }, "\uD83D\uDE19")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "KISSING FACE WITH CLOSED EYES", onClick: () => this.onEmojiClick('😚') }, "\uD83D\uDE1A")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH STUCK-OUT TONGUE", onClick: () => this.onEmojiClick('😛') }, "\uD83D\uDE1B")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH STUCK-OUT TONGUE AND WINKING EYE", onClick: () => this.onEmojiClick('😜') }, "\uD83D\uDE1C")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH STUCK-OUT TONGUE AND TIGHTLY-CLOSED EYES", onClick: () => this.onEmojiClick('😝') }, "\uD83D\uDE1D")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "DISAPPOINTED FACE", onClick: () => this.onEmojiClick('😞') }, "\uD83D\uDE1E")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "WORRIED FACE", onClick: () => this.onEmojiClick('😟') }, "\uD83D\uDE1F")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "ANGRY FACE", onClick: () => this.onEmojiClick('😠') }, "\uD83D\uDE20")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "POUTING FACE", onClick: () => this.onEmojiClick('😡') }, "\uD83D\uDE21")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "CRYING FACE", onClick: () => this.onEmojiClick('😢') }, "\uD83D\uDE22")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "PERSEVERING FACE", onClick: () => this.onEmojiClick('😣') }, "\uD83D\uDE23")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH LOOK OF TRIUMPH", onClick: () => this.onEmojiClick('😤') }, "\uD83D\uDE24")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "DISAPPOINTED BUT RELIEVED FACE", onClick: () => this.onEmojiClick('😥') }, "\uD83D\uDE25")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FROWNING FACE WITH OPEN MOUTH", onClick: () => this.onEmojiClick('😦') }, "\uD83D\uDE26")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "ANGUISHED FACE", onClick: () => this.onEmojiClick('😧') }, "\uD83D\uDE27")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FEARFUL FACE", onClick: () => this.onEmojiClick('😨') }, "\uD83D\uDE28")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "WEARY FACE", onClick: () => this.onEmojiClick('😩') }, "\uD83D\uDE29")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SLEEPY FACE", onClick: () => this.onEmojiClick('😪') }, "\uD83D\uDE2A")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "TIRED FACE", onClick: () => this.onEmojiClick('😫') }, "\uD83D\uDE2B")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "GRIMACING FACE", onClick: () => this.onEmojiClick('😬') }, "\uD83D\uDE2C")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "LOUDLY CRYING FACE", onClick: () => this.onEmojiClick('😭') }, "\uD83D\uDE2D")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH OPEN MOUTH", onClick: () => this.onEmojiClick('😮') }, "\uD83D\uDE2E")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "HUSHED FACE", onClick: () => this.onEmojiClick('😯') }, "\uD83D\uDE2F")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH OPEN MOUTH AND COLD SWEAT", onClick: () => this.onEmojiClick('😰') }, "\uD83D\uDE30")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE SCREAMING IN FEAR", onClick: () => this.onEmojiClick('😱') }, "\uD83D\uDE31")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "ASTONISHED FACE", onClick: () => this.onEmojiClick('😲') }, "\uD83D\uDE32")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FLUSHED FACE", onClick: () => this.onEmojiClick('😳') }, "\uD83D\uDE33")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SLEEPING FACE", onClick: () => this.onEmojiClick('😴') }, "\uD83D\uDE34")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "DIZZY FACE", onClick: () => this.onEmojiClick('😵') }, "\uD83D\uDE35")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITHOUT MOUTH", onClick: () => this.onEmojiClick('😶') }, "\uD83D\uDE36")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FACE WITH MEDICAL MASK", onClick: () => this.onEmojiClick('😷') }, "\uD83D\uDE37")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FROWN FACE", onClick: () => this.onEmojiClick('🙁') }, "\uD83D\uDE41")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SMILING FACE", onClick: () => this.onEmojiClick('🙂') }, "\uD83D\uDE42")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "UPSIDEDOWN FACE", onClick: () => this.onEmojiClick('🙃') }, "\uD83D\uDE43")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "EYES ROLLING FACE", onClick: () => this.onEmojiClick('🙄') }, "\uD83D\uDE44")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "ZIPPED FACE", onClick: () => this.onEmojiClick('🤐') }, "\uD83E\uDD10")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "MONEY FACE", onClick: () => this.onEmojiClick('🤑') }, "\uD83E\uDD11")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "FEVERISH FACE", onClick: () => this.onEmojiClick('🤒') }, "\uD83E\uDD12")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SPECTACLED FACE", onClick: () => this.onEmojiClick('🤓') }, "\uD83E\uDD13")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "WONDERING FACE", onClick: () => this.onEmojiClick('🤔') }, "\uD83E\uDD14")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "HURT FACE", onClick: () => this.onEmojiClick('🤕') }, "\uD83E\uDD15")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "COWBOY FACE", onClick: () => this.onEmojiClick('🤠') }, "\uD83E\uDD20")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "CLOWN FACE", onClick: () => this.onEmojiClick('🤡') }, "\uD83E\uDD21")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SICK VOMIT FACE", onClick: () => this.onEmojiClick('🤢') }, "\uD83E\uDD22")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "LAUGHING ROLLING FACE", onClick: () => this.onEmojiClick('🤣') }, "\uD83E\uDD23")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "LEERING FACE", onClick: () => this.onEmojiClick('🤤') }, "\uD83E\uDD24")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "LEING FACE", onClick: () => this.onEmojiClick('🤥') }, "\uD83E\uDD25")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "BLOWING NOSE FACE", onClick: () => this.onEmojiClick('🤧') }, "\uD83E\uDD27")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "ROCK FACE", onClick: () => this.onEmojiClick('🤨') }, "\uD83E\uDD28")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "STARY EYES FACE", onClick: () => this.onEmojiClick('🤩') }, "\uD83E\uDD29")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "MAD FACE", onClick: () => this.onEmojiClick('🤪') }, "\uD83E\uDD2A")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "SHUSHING FACE", onClick: () => this.onEmojiClick('🤫') }, "\uD83E\uDD2B")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "CURSING FACE", onClick: () => this.onEmojiClick('🤬') }, "\uD83E\uDD2C")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "CHUGLI FACE", onClick: () => this.onEmojiClick('🤭') }, "\uD83E\uDD2D")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "VOMIT FACE", onClick: () => this.onEmojiClick('🤮') }, "\uD83E\uDD2E")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "MIND BLOWN FACE", onClick: () => this.onEmojiClick('🤯') }, "\uD83E\uDD2F")), React.createElement("li", { className: "list-inline-item" }, React.createElement("span", { title: "VICTORIAN FACE", onClick: () => this.onEmojiClick('🧐') }, "\uD83E\uDDD0")))) } } class BlockContact extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: this.props.myself, person: this.props.person, bsstyle: '', message: '', token: localStorage.getItem("token") === null ? '' : localStorage.getItem("token"), blocked: null }; this.fetchContactDetail = this.fetchContactDetail.bind(this); this.handleUnblockClick = this.handleUnblockClick.bind(this); this.handleBlockClick = this.handleBlockClick.bind(this); this.setContactRelation = this.setContactRelation.bind(this) } componentDidMount() { this.fetchContactDetail() } handleUnblockClick() { this.setContactRelation(BoloRelationType.Confirmed) } handleBlockClick() { this.setContactRelation(BoloRelationType.Blocked) } setContactRelation(relationship) { fetch('//' + window.location.host + '/api/Contacts/ChangeRelation/' + this.state.person.id + '?t=' + relationship, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 200) { response.json().then(data => { if (data.boloRelation === BoloRelationType.Blocked) { this.setState({ blocked: true }) } else { this.setState({ blocked: false }) } var contactlist = localStorage.getItem("contacts") !== null ? new Map(JSON.parse(localStorage.getItem("contacts"))) : new Map(); if (contactlist.get(this.state.person.id) !== undefined) { contactlist.get(this.state.person.id).boloRelation = data.boloRelation; localStorage.setItem("contacts", JSON.stringify(Array.from(contactlist))) } }) } }) } fetchContactDetail() { try { fetch('//' + window.location.host + '/api/Contacts/' + this.state.person.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 200) { response.json().then(data => { if (data.boloRelation === BoloRelationType.Blocked) { this.setState({ blocked: true }) } else if (data.boloRelation === BoloRelationType.Confirmed) { this.setState({ blocked: false }) } else { this.setState({ blocked: null }) } if (this.props.onRelationshipChange !== undefined) { this.props.onRelationshipChange(data.boloRelation) } }) } }) } catch (err) { if (this.contactlist.get(this.state.person.id) !== undefined) { this.setState({ blocked: this.contactlist.get(this.state.person.id).boloRelation === BoloRelationType.Blocked }) } } } render() { if (this.state.blocked === true) { return React.createElement("button", { className: "btn mr-1 ml-1 btn-danger", onClick: this.handleUnblockClick }, "Unblock") } else if (this.state.blocked === false) { return React.createElement("button", { className: "btn mr-1 ml-1 btn-secondary", onClick: this.handleBlockClick }, "Block") } else { return null } } } class PhotoCarousel extends React.Component { constructor(props) { super(props); this.state = { photos: this.props.photos, id: "carousel" + this.props.postid, active: 0 } } render() { let items1 = [], items2 = []; for (let k = 0; k < this.state.photos.length; k += 1) { items1.push(React.createElement("button", { type: "button", "data-bs-target": this.state.id, className: k === this.state.active ? "active" : "", "data-index": k, onClick: e => { this.setState({ active: parseInt(e.target.getAttribute("data-index", 10)) }) } })); items2.push(React.createElement("div", { className: k === this.state.active ? "carousel-item text-center active" : "carousel-item text-center" }, React.createElement("img", { src: "//" + location.host + "/" + this.state.photos[k].photo, className: "img-fluid w-100", alt: "" }))) } return React.createElement(React.Fragment, null, React.createElement("div", { id: this.state.id, className: "carousel carousel-dark slide", "data-bs-ride": "true" }, React.createElement("div", { class: "carousel-indicators" }, items1), React.createElement("div", { className: "carousel-inner" }, items2), React.createElement("button", { className: this.state.active === 0 ? "d-none" : "carousel-control-prev", type: "button", "data-bs-target": this.state.id, "data-bs-slide": "prev", onClick: () => { if (this.state.active > 0) { this.setState({ active: this.state.active - 1 }) } } }, React.createElement("span", { className: "carousel-control-prev-icon", "aria-hidden": "true" }), React.createElement("span", { className: "visually-hidden" }, "Previous")), React.createElement("button", { className: this.state.active === this.state.photos.length - 1 ? "d-none" : "carousel-control-next", type: "button", "data-bs-target": this.state.id, "data-bs-slide": "next", onClick: () => { if (this.state.active < this.state.photos.length - 1) { this.setState({ active: this.state.active + 1 }) } } }, React.createElement("span", { className: "carousel-control-next-icon", "aria-hidden": "true" }), React.createElement("span", { className: "visually-hidden" }, "Next")))) } } class Profile extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), member: null, bsstyle: '', message: '', followStatus: null, token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), showfollowers: false, showfollowing: false, showSettings: false, showrequests: false, hasFollowRequest: false }; this.checkIfHasRequest = this.checkIfHasRequest.bind(this) } componentDidMount() { if (localStorage.getItem("token") !== null) { this.validate(localStorage.getItem("token")); if (this.props.username == undefined || this.props.username == null || this.props.username == "") { this.loadMember(localStorage.getItem("token"), JSON.parse(localStorage.getItem("myself")).id) } else { this.loadMember(localStorage.getItem("token"), this.props.username) } } } loadMember(t, username) { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Members/' + username, { method: 'get', headers: { 'Authorization': 'Bearer ' + t } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { this.setState({ loggedin: true, loading: false, member: data }, () => { this.loadFollowStatus(localStorage.getItem("token"), this.state.member.id); this.checkIfHasRequest(this.state.member.id) }) }) } }) } loadFollowStatus(t, username) { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Follow/Status/' + username, { method: 'get', headers: { 'Authorization': 'Bearer ' + t } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { this.setState({ loggedin: true, loading: false, followStatus: data.status }) }) } }) } checkIfHasRequest(username) { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Follow/HasRequest/' + username, { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 200) { this.setState({ loading: false, hasFollowRequest: true }) } else { this.setState({ loading: false, hasFollowRequest: false }) } }) } allowRequest() { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Follow/allow/' + this.state.member.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 200) { this.setState({ loading: false, hasFollowRequest: false }) } else { this.setState({ loading: false }) } }) } rejectRequest() { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Follow/Reject/' + this.state.member.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 200) { this.setState({ loading: false, hasFollowRequest: false }) } else { this.setState({ loading: false }) } }) } validate(t) { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Members/Validate', { method: 'get', headers: { 'Authorization': 'Bearer ' + t } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { localStorage.setItem("myself", JSON.stringify(data)); this.setState({ loggedin: true, loading: false, myself: data }) }) } }) } renderFollowHtml() { if (this.state.followStatus != null) { return React.createElement(FollowButton, { member: this.state.member, status: this.state.followStatus }) } } renderFollowers() { if (this.state.showfollowers) { return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal fade show", style: { display: "block" }, id: "followersModal", tabIndex: "-1", "aria-labelledby": "followersModalLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-dialog-centered  modal-dialog-scrollable" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h4", { className: "modal-title fw-semibold fs-20", id: "followersModalLabel" }, "Followers"), React.createElement("button", { type: "button", className: "btn-close", "data-bs-dismiss": "modal", "aria-label": "Close", onClick: () => { this.setState({ showfollowers: false }) } })), React.createElement("div", { className: "modal-body" }, React.createElement(MemberSmallList, { memberid: this.state.member.id, target: "follower" }))))), React.createElement("div", { className: "modal-backdrop fade show" })) } return null } renderFollowing() { if (this.state.showfollowing) { return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal fade show", style: { display: "block" }, id: "followingModal", tabIndex: "-1", "aria-labelledby": "followingModalLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-dialog-centered  modal-dialog-scrollable" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h4", { className: "modal-title  fw-semibold fs-20", id: "followingModalLabel" }, "Following"), React.createElement("button", { type: "button", className: "btn-close", "data-bs-dismiss": "modal", "aria-label": "Close", onClick: () => { this.setState({ showfollowing: false }) } })), React.createElement("div", { className: "modal-body" }, React.createElement(MemberSmallList, { memberid: this.state.member.id, target: "following" }))))), React.createElement("div", { className: "modal-backdrop fade show" })) } return null } renderFollowRequest() { if (this.state.showrequests) { return React.createElement("div", { className: "modal fade show", style: { display: "block" }, id: "followingModal", tabIndex: "-1", "aria-labelledby": "followrequestModalLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-dialog-centered" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title", id: "followingModalLabel" }, "Follow Request"), React.createElement("button", { type: "button", className: "btn-close", "data-bs-dismiss": "modal", "aria-label": "Close", onClick: () => { this.setState({ showrequests: false }) } })), React.createElement("div", { className: "modal-body" }, React.createElement(FollowRequestList, null))))) } return null } renderRequestApproval() { if (this.state.hasFollowRequest) { return React.createElement("div", { className: "row" }, React.createElement("div", { className: "col" }, React.createElement("p", null, "You have follow request from this account, take action."), React.createElement("button", { type: "button", className: "btn btn-primary me-2", onClick: () => { this.allowRequest() } }, "Approve"), React.createElement("button", { className: "btn btn-secondary", type: "button", onClick: () => { this.rejectRequest() } }, "Reject"))) } } renderPhones() { if (this.state.member.phones.length == 0) { return null } let items = []; let links = this.state.member.phones; for (let k in links) { let l = links[k]; items.push(React.createElement("li", { key: k, className: "mb-2 text-primary  fs-small" }, React.createElement("i", { className: "bi bi-phone-fill" }), " ", l.phone)) } return React.createElement("ul", { className: "list-unstyled" }, items) } renderEmails() { if (this.state.member.emails.length == 0) { return null } let items = []; let links = this.state.member.emails; for (let k in links) { let l = links[k]; items.push(React.createElement("li", { key: k, className: "mb-2 text-primary  fs-small" }, React.createElement("i", { className: "bi bi-envelope-at-fill" }), " ", l.email)) } return React.createElement("ul", { className: "list-unstyled" }, items) } renderLinks() { if (this.state.member.links.length == 0) { return null } let items = []; let links = this.state.member.links; for (let k in links) { let l = links[k]; items.push(React.createElement("li", { key: k, className: "mb-2" }, React.createElement("a", { href: l.url, className: "text-primary fs-small", target: "_blank" }, React.createElement("i", { className: "bi bi-link-45deg" }), " ", l.name))) } return React.createElement("ul", { className: "list-unstyled" }, items) } render() { if (!this.state.loggedin) { return React.createElement(RegisterForm, { beginWithRegister: false, onLogin: () => { this.setState({ loggedin: localStorage.getItem("token") === null ? false : true, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token") }) } }) } if (this.state.showSettings) { return React.createElement(ManageProfile, { onProfileChange: () => { this.validate(localStorage.getItem("token")) }, onBack: () => { this.setState({ showSettings: false }) } }) } var followlist = null; if (this.state.showfollowing) { followlist = React.createElement(React.Fragment, null, this.renderFollowing()) } else if (this.state.showfollowers) { followlist = React.createElement(React.Fragment, null, this.renderFollowers()) } else if (this.state.showrequests) { followlist = React.createElement(React.Fragment, null, this.renderFollowRequest()) } let loading = null; if (this.state.loading) { loading = React.createElement("div", { className: "progress fixed-bottom", style: { height: "5px" } }, React.createElement("div", { className: "progress-bar progress-bar-striped progress-bar-animated", role: "progressbar", "aria-valuenow": "100", "aria-valuemin": "0", "aria-valuemax": "100", style: { width: "100%" } })) } let me = null, pic = null, settings = null, followhtml = null; if (this.state.member !== null) { pic = this.state.member.pic !== "" ? React.createElement("img", { src: "//" + window.location.host + "/" + this.state.member.pic, className: "img-fluid profile-pic-border profile-thumb mb-2", alt: "" }) : React.createElement("img", { src: "/theme1/images/person-fill.svg", className: "img-fluid profile-pic-border profile-thumb  mb-2", alt: "" }); let name = null; if (this.state.member.name !== "") { name = React.createElement("div", { className: "fs-18 text-center text-secondary" }, this.state.member.name) } if (this.state.myself != null && this.state.member != null && this.state.myself.id == this.state.member.id) { settings = React.createElement("div", { className: "p-1 ms-2" }, React.createElement("button", { type: "button", className: "btn btn-blue", onClick: () => { this.setState({ showSettings: true }) } }, "Edit Profile")) } else { followhtml = this.renderFollowHtml() } me = React.createElement("div", { className: "container my-lg-3 my-2" }, React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-md-4 d-none d-md-block" }, React.createElement("div", { class: "sticky-column py-3" }, React.createElement("div", { className: "text-center mb-2 p-3 py-2 bg-white rounded-4 border" }, pic, React.createElement("div", { className: "p-1 fs-20 text-center mb-1 fw-bold" }, "@", this.state.member.userName), name, this.state.member.countryName !== "" ? React.createElement("div", { className: "my-3 text-secondary fs-small" }, React.createElement("i", { className: "bi bi-globe-central-south-asia" }), " ", this.state.member.countryName) : null, this.state.member.thoughtStatus !== "" ? React.createElement("div", { className: "my-3 text-secondary fs-small" }, this.state.member.thoughtStatus) : null, React.createElement("div", { className: "fs-small" }, React.createElement(ExpandableTextLabel, { cssclass: "text-justify my-3 lh-base", text: this.state.member.bio === null ? "" : this.state.member.bio, maxlength: 200 })), this.renderPhones(), this.renderEmails(), this.renderLinks(), React.createElement("div", { className: "row g-0 my-3" }, React.createElement("div", { className: "col-4" }, React.createElement("button", { type: "button", className: "btn btn-link text-primary fw-normal text-decoration-none" }, React.createElement("span", { className: "fw-semibold me-1" }, this.state.member.postCount), " Posts")), React.createElement("div", { className: "col-4" }, this.state.myself != null && this.state.member != null && this.state.myself.id == this.state.member.id ? React.createElement("button", { type: "button", className: "btn btn-link text-primary fw-normal text-decoration-none", onClick: () => { this.setState({ showfollowing: true }) } }, React.createElement("span", { className: "fw-semibold me-1" }, this.state.member.followingCount), "Following") : React.createElement("button", { type: "button", className: "btn btn-link text-primary fw-normal text-decoration-none" }, React.createElement("span", { className: "fw-semibold me-1" }, this.state.member.followingCount), "Following")), React.createElement("div", { className: "col-4" }, this.state.myself != null && this.state.member != null && this.state.myself.id == this.state.member.id ? React.createElement("button", { type: "button", className: "btn btn-link text-primary fw-normal text-decoration-none", onClick: () => { this.setState({ showfollowers: true }) } }, React.createElement("span", { className: "fw-semibold me-1" }, this.state.member.followerCount), "Followers") : React.createElement("button", { type: "button", className: "btn btn-link text-primary fw-normal text-decoration-none" }, React.createElement("span", { className: "fw-semibold me-1" }, this.state.member.followerCount), "Followers"))), settings, followhtml, this.state.member.followRequestCount > 0 && this.state.member.userName == this.state.myself.userName ? React.createElement("div", { className: "mt-2" }, React.createElement("button", { type: "button", className: "btn btn-light text-success fw-bold ", onClick: () => { this.setState({ showrequests: true }) } }, this.state.member.followRequestCount, " Follow Request")) : null, this.renderRequestApproval()))), React.createElement("div", { className: "col-md-8 col-12" }, React.createElement(MemberPostList, { search: this.state.member.userName, viewMode: 1, viewModeAllowed: "true" }))), followlist) } return React.createElement(React.Fragment, null, loading, me) } } class ManageProfile extends React.Component { constructor(props) { super(props); _defineProperty(this, "handleFile", e => { const fileReader = new FileReader(); fileReader.onloadend = () => { this.setState({ src: fileReader.result }, () => { if (this.profilePicCanvas === null) { this.profilePicCanvas = new fabric.Canvas('profilePicCanvas'); this.profilePicCanvas.setDimensions({ width: 300, height: 300 }); this.profilePicCanvas.setZoom(1); this.hammer = new Hammer.Manager(this.profilePicCanvas.upperCanvasEl); this.pinch = new Hammer.Pinch(); this.hammer.add([this.pinch]); this.hammer.on('pinch', ev => { this.profilePicCanvas.setZoom(this.state.profilepiczoom * ev.scale) }) } var img = new Image(); img.onload = this.handleProfileImageLoaded; img.src = this.state.src }) }; fileReader.readAsDataURL(e.target.files[0]) }); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: null, bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), onProfileChange: this.props.onProfileChange === undefined ? null : this.props.onProfileChange, showProfilePicModal: false, src: null, showSecAnsModal: false, crop: { unit: "px", x: 0, y: 0, width: 300, height: 300, locked: true }, croppedImageUrl: null, profilepiczoom: 1, countryitems: [], showchangepasswordmodal: false }; this.hammer = null; this.pinch = null; this.profilePicCanvas = null; this.profilePicImgInst = null; this.handleChange = this.handleChange.bind(this); this.saveData = this.saveData.bind(this); this.toggleProfilePicModal = this.toggleProfilePicModal.bind(this); this.saveProfilePic = this.saveProfilePic.bind(this); this.removeProfilePicture = this.removeProfilePicture.bind(this); this.handleProfileImageLoaded = this.handleProfileImageLoaded.bind(this); this.handleProfileZoom = this.handleProfileZoom.bind(this) } componentDidMount() { if (localStorage.getItem("token") !== null) { this.validate(localStorage.getItem("token")) } this.fetchCountryItems() } fetchCountryItems() { fetch('//' + window.location.host + '/api/CountryItem/', { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 200) { response.json().then(data => { console.log(data); this.setState({ countryitems: data }) }) } }) } handleChange(e) { let m = this.state.myself; switch (e.target.name) { case 'securityQuestion': m.securityQuestion = e.target.value; break; case 'securityAnswer': m.securityAnswer = e.target.value; break; case 'userName': m.userName = e.target.value.replace(" ", "").replace("\\", "").replace("/", "").replace(";", "").replace("\"", "").replace("'", "").replace("#", ""); break; case 'phone': m.phone = e.target.value; break; case 'email': m.email = e.target.value; break; case 'bio': m.bio = e.target.value; break; case 'name': if (e.target.value.trim() === "") { alert("Name is required."); e.target.focus() } else { m.name = e.target.value } break; case 'birthYear': m.birthYear = e.target.value; break; case 'gender': m.gender = e.target.value; break; case 'visibility': m.visibility = e.target.value; break; case 'country': m.country = e.target.value; break; case 'state': m.state = e.target.value; break; case 'city': m.city = e.target.value; break; case 'thoughtStatus': m.thoughtStatus = e.target.value; break; default: break }this.setState({ myself: m }) } handleProfileImageLoaded(e) { this.profilePicCanvas.remove(this.profilePicImgInst); this.profilePicImgInst = new fabric.Image(e.target, { angle: 0, padding: 0, cornersize: 0 }); if (e.target.width >= e.target.height) { this.profilePicImgInst.scaleToHeight(this.profilePicCanvas.height) } else if (e.target.height > e.target.width) { this.profilePicImgInst.scaleToWidth(this.profilePicCanvas.width) } this.profilePicImgInst.hasControls = false; this.profilePicCanvas.centerObject(this.profilePicImgInst); this.profilePicCanvas.add(this.profilePicImgInst) } handleProfileZoom() { this.profilePicCanvas.setZoom(this.state.profilepiczoom * 0.1) } toggleProfilePicModal() { this.setState({ showProfilePicModal: !this.state.showProfilePicModal }) } removeProfilePicture(e) { this.setState({ loading: true }); const fd = new FormData(); fd.set("pic", ""); fetch('//' + window.location.host + '/api/Members/savepic', { method: 'post', body: fd, headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { this.setState({ loading: false, showProfilePicModal: false }); if (localStorage.getItem("token") !== null) { this.validate(localStorage.getItem("token")) } if (this.state.onProfileChange !== null) { this.state.onProfileChange() } } else { this.setState({ loading: false, message: 'Unable to save profile pic', bsstyle: 'danger' }) } }) } saveProfilePic() { this.setState({ croppedImageUrl: this.profilePicCanvas.toDataURL("image/png") }, () => { this.hammer = null; this.pinch = null; this.profilePicCanvas = null; this.profilePicImgInst = null; this.setState({ loading: true }); const fd = new FormData(); fd.set("pic", this.state.croppedImageUrl); fetch('//' + window.location.host + '/api/Members/savepic', { method: 'post', body: fd, headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { this.setState({ loading: false, showProfilePicModal: false, profilepiczoom: 1 }); if (localStorage.getItem("token") !== null) { this.validate(localStorage.getItem("token")) } if (this.state.onProfileChange !== null) { this.state.onProfileChange() } } else { this.setState({ loading: false, message: 'Unable to save profile pic', bsstyle: 'danger' }) } }) }) } saveData(name, value) { this.setState({ loading: true }); if (name !== 'bio') { fetch('//' + window.location.host + '/api/Members/Save' + name + '?d=' + value, { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { this.setState({ loading: false, message: 'Data is saved', bsstyle: 'success' }); if (this.state.onProfileChange) { this.state.onProfileChange() } } else if (response.status === 400) { try { response.json().then(data => { this.setState({ loading: false, message: data.error, bsstyle: 'danger' }, () => { if (this.props.onProfileChange) { this.props.onProfileChange() } }) }) } catch (err) { this.setState({ loading: false, message: 'Unable to save ' + name, bsstyle: 'danger' }) } } else { try { response.json().then(data => { this.setState({ loading: false, message: data.error, bsstyle: 'danger' }) }) } catch (err) { this.setState({ loading: false, message: 'Unable to save ' + name, bsstyle: 'danger' }) } } }) } else { const fd = new FormData(); fd.set("d", value); fetch('//' + window.location.host + '/api/Members/savebio', { method: 'post', body: fd, headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { this.setState({ loading: false }); if (this.state.onProfileChange !== null) { this.state.onProfileChange() } } else { this.setState({ loading: false, message: 'Unable to save data', bsstyle: 'danger' }) } }) } } validate(t) { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Members/Validate', { method: 'get', headers: { 'Authorization': 'Bearer ' + t } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { this.setState({ loggedin: true, loading: false, myself: data }) }) } }) } renderUSStates() { return React.createElement("select", { name: "state", id: "state", className: "form-control", value: this.state.myself.state, onChange: this.handleChange, onBlur: this.saveData }, React.createElement("option", { value: "" }), React.createElement("option", { value: "Alabama" }, "Alabama"), React.createElement("option", { value: "Alaska" }, "Alaska"), React.createElement("option", { value: "Arizona" }, "Arizona"), React.createElement("option", { value: "Arkansas" }, "Arkansas"), React.createElement("option", { value: "California" }, "California"), React.createElement("option", { value: "Colorado" }, "Colorado"), React.createElement("option", { value: "Connecticut" }, "Connecticut"), React.createElement("option", { value: "Delaware" }, "Delaware"), React.createElement("option", { value: "District of Columbia" }, "District of Columbia"), React.createElement("option", { value: "Florida" }, "Florida"), React.createElement("option", { value: "Georgia" }, "Georgia"), React.createElement("option", { value: "Guam" }, "Guam"), React.createElement("option", { value: "Hawaii" }, "Hawaii"), React.createElement("option", { value: "Idaho" }, "Idaho"), React.createElement("option", { value: "Illinois" }, "Illinois"), React.createElement("option", { value: "Indiana" }, "Indiana"), React.createElement("option", { value: "Iowa" }, "Iowa"), React.createElement("option", { value: "Kansas" }, "Kansas"), React.createElement("option", { value: "Kentucky" }, "Kentucky"), React.createElement("option", { value: "Louisiana" }, "Louisiana"), React.createElement("option", { value: "Maine" }, "Maine"), React.createElement("option", { value: "Maryland" }, "Maryland"), React.createElement("option", { value: "Massachusetts" }, "Massachusetts"), React.createElement("option", { value: "Michigan" }, "Michigan"), React.createElement("option", { value: "Minnesota" }, "Minnesota"), React.createElement("option", { value: "Mississippi" }, "Mississippi"), React.createElement("option", { value: "Missouri" }, "Missouri"), React.createElement("option", { value: "Montana" }, "Montana"), React.createElement("option", { value: "Nebraska" }, "Nebraska"), React.createElement("option", { value: "Nevada" }, "Nevada"), React.createElement("option", { value: "New Hampshire" }, "New Hampshire"), React.createElement("option", { value: "New Jersey" }, "New Jersey"), React.createElement("option", { value: "New Mexico" }, "New Mexico"), React.createElement("option", { value: "New York" }, "New York"), React.createElement("option", { value: "North Carolina" }, "North Carolina"), React.createElement("option", { value: "North Dakota" }, "North Dakota"), React.createElement("option", { value: "Northern Marianas Islands" }, "Northern Marianas Islands"), React.createElement("option", { value: "Ohio" }, "Ohio"), React.createElement("option", { value: "Oklahoma" }, "Oklahoma"), React.createElement("option", { value: "Oregon" }, "Oregon"), React.createElement("option", { value: "Pennsylvania" }, "Pennsylvania"), React.createElement("option", { value: "Puerto Rico" }, "Puerto Rico"), React.createElement("option", { value: "Rhode Island" }, "Rhode Island"), React.createElement("option", { value: "South Carolina" }, "South Carolina"), React.createElement("option", { value: "South Dakota" }, "South Dakota"), React.createElement("option", { value: "Tennessee" }, "Tennessee"), React.createElement("option", { value: "Texas" }, "Texas"), React.createElement("option", { value: "Utah" }, "Utah"), React.createElement("option", { value: "Vermont" }, "Vermont"), React.createElement("option", { value: "Virginia" }, "Virginia"), React.createElement("option", { value: "Virgin Islands" }, "Virgin Islands"), React.createElement("option", { value: "Washington" }, "Washington"), React.createElement("option", { value: "West Virginia" }, "West Virginia"), React.createElement("option", { value: "Wisconsin" }, "Wisconsin"), React.createElement("option", { value: "Wyoming" }, "Wyoming")) } renderIndianStates() { return React.createElement("select", { name: "state", id: "state", className: "form-control", value: this.state.myself.state, onChange: this.handleChange, onBlur: this.saveData }, React.createElement("option", { value: "Andhra Pradesh" }, "Andhra Pradesh"), React.createElement("option", { value: "Andaman and Nicobar Islands" }, "Andaman and Nicobar Islands"), React.createElement("option", { value: "Arunachal Pradesh" }, "Arunachal Pradesh"), React.createElement("option", { value: "Assam" }, "Assam"), React.createElement("option", { value: "Bihar" }, "Bihar"), React.createElement("option", { value: "Chandigarh" }, "Chandigarh"), React.createElement("option", { value: "Chhattisgarh" }, "Chhattisgarh"), React.createElement("option", { value: "Dadar and Nagar Haveli" }, "Dadar and Nagar Haveli"), React.createElement("option", { value: "Daman and Diu" }, "Daman and Diu"), React.createElement("option", { value: "Delhi" }, "Delhi"), React.createElement("option", { value: "Lakshadweep" }, "Lakshadweep"), React.createElement("option", { value: "Puducherry" }, "Puducherry"), React.createElement("option", { value: "Goa" }, "Goa"), React.createElement("option", { value: "Gujarat" }, "Gujarat"), React.createElement("option", { value: "Haryana" }, "Haryana"), React.createElement("option", { value: "Himachal Pradesh" }, "Himachal Pradesh"), React.createElement("option", { value: "Jammu and Kashmir" }, "Jammu and Kashmir"), React.createElement("option", { value: "Jharkhand" }, "Jharkhand"), React.createElement("option", { value: "Karnataka" }, "Karnataka"), React.createElement("option", { value: "Kerala" }, "Kerala"), React.createElement("option", { value: "Madhya Pradesh" }, "Madhya Pradesh"), React.createElement("option", { value: "Maharashtra" }, "Maharashtra"), React.createElement("option", { value: "Manipur" }, "Manipur"), React.createElement("option", { value: "Meghalaya" }, "Meghalaya"), React.createElement("option", { value: "Mizoram" }, "Mizoram"), React.createElement("option", { value: "Nagaland" }, "Nagaland"), React.createElement("option", { value: "Odisha" }, "Odisha"), React.createElement("option", { value: "Punjab" }, "Punjab"), React.createElement("option", { value: "Rajasthan" }, "Rajasthan"), React.createElement("option", { value: "Sikkim" }, "Sikkim"), React.createElement("option", { value: "Tamil Nadu" }, "Tamil Nadu"), React.createElement("option", { value: "Telangana" }, "Telangana"), React.createElement("option", { value: "Tripura" }, "Tripura"), React.createElement("option", { value: "Uttar Pradesh" }, "Uttar Pradesh"), React.createElement("option", { value: "Uttarakhand" }, "Uttarakhand"), React.createElement("option", { value: "West Bengal" }, "West Bengal")) } renderStates() { if (this.state.myself.country.toLowerCase() == "india") { return this.renderIndianStates() } else if (this.state.myself.country.toLowerCase() == "usa") { return this.renderUSStates() } else { return React.createElement("input", { type: "text", name: "state", className: "form-control", maxLength: "100", value: this.state.myself.state, onChange: this.handleChange, onBlur: this.saveData }) } } renderSecAnsModal() { if (this.state.showSecAnsModal) { return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal  d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title" }, "Set Security Answer"), React.createElement("button", { type: "button", className: "btn-close", "data-dismiss": "modal", "aria-label": "Close", onClick: () => { this.setState({ showSecAnsModal: false }) } })), React.createElement("div", { className: "modal-body" }, React.createElement("div", { className: "mb-3" }, React.createElement("label", { htmlFor: "securityAnswerTxt", className: "form-label" }, "Security Question "), React.createElement("div", null, this.state.myself.securityQuestion)), React.createElement("div", { className: "mb-3" }, React.createElement("label", { htmlFor: "securityAnswerTxt", className: "form-label" }, "Security Answer ", React.createElement("span", { className: "text-danger" }, "(Required)")), React.createElement("input", { type: "text", id: "securityAnswerTxt", maxLength: "100", name: "securityAnswer", className: "form-control", maxLength: "300", value: this.state.myself.securityAnswer, onChange: this.handleChange })), this.state.message !== "" ? React.createElement("div", { className: 'my-1 text-center noMargin noRadius alert alert-' + this.state.bsstyle, role: "alert" }, this.state.message) : null), React.createElement("div", { className: "modal-footer" }, React.createElement("button", { type: "button", className: "btn btn-primary", onClick: () => { this.saveData("securityanswer", this.state.myself.securityAnswer) } }, "Save"))))), React.createElement("div", { className: "modal-backdrop fade show" })) } else { return null } } renderProfilePicModal() { if (this.state.showProfilePicModal) { const { crop, profile_pic, src } = this.state; return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h4", { className: "modal-title text-primary fw-semibold" }, "Profile Picture"), React.createElement("button", { type: "button", className: "btn-close", "data-dismiss": "modal", "aria-label": "Close", onClick: this.toggleProfilePicModal })), React.createElement("div", { className: "modal-body" }, React.createElement("div", { className: "mb-3" }, React.createElement("button", { className: "btn btn-primary", type: "button", onClick: () => { document.getElementById("profile_pic").click() } }, "Choose Picture"), React.createElement("input", { type: "file", className: "d-none", id: "profile_pic", value: profile_pic, onChange: this.handleFile })), React.createElement("div", { className: "row justify-content-center" }, React.createElement("div", { className: "col" }, React.createElement("canvas", { id: "profilePicCanvas", style: { width: "300px", height: "300px" } })))), React.createElement("div", { className: "modal-footer" }, React.createElement("button", { type: "button", className: "btn btn-primary", onClick: this.saveProfilePic }, "Save"))))), React.createElement("div", { className: "modal-backdrop fade show" })) } else { return null } } renderChangePasswordModal() { if (this.state.showchangepasswordmodal) { return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal d-block", tabIndex: "-1" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h1", { className: "modal-title fs-5" }, "Reset Password"), React.createElement("button", { type: "button", className: "btn-close", onClick: () => { this.setState({ showchangepasswordmodal: false }) } })), React.createElement("div", { className: "modal-body" }, React.createElement(ChangePassword, null))))), React.createElement("div", { className: "modal-backdrop fade show" })) } } render() { if (!this.state.loggedin) { return React.createElement(RegisterForm, { beginWithRegister: false, onLogin: () => { this.setState({ loggedin: localStorage.getItem("token") === null ? false : true, myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token") }) } }) } var yearitems = []; for (var i = 1947; i <= 2004; i += 1) { yearitems.push(React.createElement("option", { value: i }, i)) } let loading = this.state.loading ? React.createElement("div", { className: "p-4 loader-center border rounded-4 shadow bg-white", style: { width: "80px", position: "fixed", height: "80px", bottom: "155px" } }, React.createElement("div", { className: "spinner-border", role: "status" }, React.createElement("span", { className: "visually-hidden" }, "Loading..."))) : null; if (this.state.loggedin && this.state.myself !== null) { let message = this.state.message !== "" ? React.createElement("div", { className: 'text-center p-2 text-' + this.state.bsstyle, role: "alert" }, this.state.message) : null; return React.createElement(React.Fragment, null, React.createElement("div", { className: "container py-5" }, loading, message, this.renderSecAnsModal(), this.renderProfilePicModal(), React.createElement("div", { className: "row" }, React.createElement("div", { className: "col-lg-4" }, React.createElement("h4", { className: "mb-3 text-primary fw-bold text-center" }, "Personal Information"), React.createElement("img", { src: this.state.myself.pic !== "" ? "//" + location.host + "/" + this.state.myself.pic : "/theme1/images/person-fill.svg", className: "rounded-circle mx-auto d-block img-fluid", alt: "", style: { width: "150px" } }), React.createElement("div", { className: "text-center" }, this.state.myself.pic !== "" ? React.createElement("button", { type: "button", className: "btn btn-sm btn-link m-1", onClick: this.removeProfilePicture }, "Remove") : null, React.createElement("button", { type: "button", className: "btn btn-sm btn-link m-1", onClick: this.toggleProfilePicModal }, "Change")), React.createElement("div", { className: "mb-3" }, React.createElement("label", { htmlFor: "channelnametxt", className: "form-label text-primary" }, "Username"), React.createElement("input", { type: "text", id: "channelnametxt", disabled: true, readOnly: true, name: "userName", placeholder: "Unique Channel Name", className: "form-control shadow-none border", value: this.state.myself.userName })), React.createElement("div", { className: "mb-3" }, React.createElement("button", { type: "button", className: "btn btn-primary", onClick: () => { this.setState({ showchangepasswordmodal: true }) } }, "Reset Password"), this.renderChangePasswordModal()), React.createElement("div", { className: "mb-3" }, React.createElement("label", { htmlFor: "nametxt", className: "form-label text-primary" }, "Name ", React.createElement("span", { className: "text-danger" }, "(Required)")), React.createElement("input", { type: "text", id: "nametxt", name: "name", placeholder: "Your Name", className: "form-control shadow-none border", value: this.state.myself.name, onChange: this.handleChange, onBlur: () => { this.saveData("name", this.state.myself.name) } })), React.createElement("div", { className: "mb-3" }, React.createElement("label", { className: "form-label text-primary" }, "Mobile ", React.createElement("span", { className: "text-danger" }, "(Required)")), React.createElement("input", { type: "text", name: "phone", className: "form-control shadow-none border", maxLength: "15", value: this.state.myself.phone, onChange: this.handleChange, onBlur: () => { this.saveData("phone", this.state.myself.phone) } }), React.createElement("div", { className: "fs-small text-secondary" }, "Mobile will not be shown on profile.")), React.createElement("div", { className: "mb-3" }, React.createElement("label", { className: "form-label text-primary" }, "Email ", React.createElement("span", { className: "text-danger" }, "(Required)")), React.createElement("input", { type: "email", name: "email", className: "form-control shadow-none border", maxLength: "250", value: this.state.myself.email, onChange: this.handleChange, onBlur: () => { this.saveData("email", this.state.myself.email) } }), React.createElement("div", { className: "fs-small text-secondary" }, "Email will not be shown on profile.")), React.createElement("div", { className: "mb-3" }, React.createElement("label", { htmlFor: "birthyeartxt", className: "form-label text-primary" }, "Year of Birth"), React.createElement("select", { id: "birthyeartxt", name: "birthYear", className: "form-select rounded-4 shadow-none border", value: this.state.myself.birthYear, onChange: this.handleChange, onBlur: () => { this.saveData("birthYear", this.state.myself.birthYear) } }, yearitems), React.createElement("div", { className: "fs-small text-secondary" }, "Age will not be shown on profile."))), React.createElement("div", { className: "col-lg-4" }, React.createElement("h4", { className: "mb-3 text-primary fw-bold text-center" }, "Profile Information"), React.createElement("div", { className: "mb-3" }, React.createElement("label", { htmlFor: "thoughtStatus", className: "form-label text-primary" }, "One line Introduction"), React.createElement("input", { type: "text", name: "thoughtStatus", className: "form-control shadow-none border", maxLength: "195", value: this.state.myself.thoughtStatus, onChange: this.handleChange, onBlur: () => { this.saveData("thoughtstatus", this.state.myself.thoughtStatus) } })), React.createElement("div", { className: "mb-3" }, React.createElement("label", { htmlFor: "biotxt", className: "form-label text-primary" }, "About Me"), React.createElement("textarea", { className: "form-control shadow-none border", id: "biotxt", maxLength: "950", name: "bio", value: this.state.myself.bio, onChange: this.handleChange, rows: "7", placeholder: "Write something about yourself.", onBlur: () => { this.saveData("bio", this.state.myself.bio) } })), React.createElement("div", { className: "mb-3" }, React.createElement("label", { htmlFor: "visibilityselect", className: "form-label text-primary" }, "Profile Visibility"), React.createElement("select", { className: "form-select rounded-4 shadow-none border", id: "genderselect", name: "visibility", value: this.state.myself.visibility, onChange: this.handleChange, onBlur: () => { this.saveData("visibility", this.state.myself.visibility) } }, React.createElement("option", { value: "0" }), React.createElement("option", { value: "2" }, "Public"), React.createElement("option", { value: "1" }, "Private"))), React.createElement("div", { className: "mb-3" }, React.createElement("label", { htmlFor: "countryselect", className: "form-label text-primary" }, "Country"), React.createElement("select", { className: "form-select rounded-4 shadow-none border", id: "countryselect", name: "country", value: this.state.myself.country, onChange: this.handleChange, onBlur: () => { this.saveData("country", this.state.myself.country) } }, React.createElement("option", { value: "" }), React.createElement("option", { value: "AD" }, "Andorra"), React.createElement("option", { value: "AE" }, "United Arab Emirates"), React.createElement("option", { value: "AF" }, "Afghanistan"), React.createElement("option", { value: "AG" }, "Antigua and Barbuda"), React.createElement("option", { value: "AI" }, "Anguilla"), React.createElement("option", { value: "AL" }, "Albania"), React.createElement("option", { value: "AM" }, "Armenia"), React.createElement("option", { value: "AO" }, "Angola"), React.createElement("option", { value: "AQ" }, "Antarctica"), React.createElement("option", { value: "AR" }, "Argentina"), React.createElement("option", { value: "AS" }, "American Samoa"), React.createElement("option", { value: "AT" }, "Austria"), React.createElement("option", { value: "AU" }, "Australia"), React.createElement("option", { value: "AW" }, "Aruba"), React.createElement("option", { value: "AX" }, "\xC5land Islands"), React.createElement("option", { value: "AZ" }, "Azerbaijan"), React.createElement("option", { value: "BA" }, "Bosnia and Herzegovina"), React.createElement("option", { value: "BB" }, "Barbados"), React.createElement("option", { value: "BD" }, "Bangladesh"), React.createElement("option", { value: "BE" }, "Belgium"), React.createElement("option", { value: "BF" }, "Burkina Faso"), React.createElement("option", { value: "BG" }, "Bulgaria"), React.createElement("option", { value: "BH" }, "Bahrain"), React.createElement("option", { value: "BI" }, "Burundi"), React.createElement("option", { value: "BJ" }, "Benin"), React.createElement("option", { value: "BL" }, "Saint Barth\xE9lemy"), React.createElement("option", { value: "BM" }, "Bermuda"), React.createElement("option", { value: "BN" }, "Brunei Darussalam"), React.createElement("option", { value: "BO" }, "Bolivia, Plurinational State of"), React.createElement("option", { value: "BQ" }, "Bonaire, Sint Eustatius and Saba"), React.createElement("option", { value: "BR" }, "Brazil"), React.createElement("option", { value: "BS" }, "Bahamas"), React.createElement("option", { value: "BT" }, "Bhutan"), React.createElement("option", { value: "BV" }, "Bouvet Island"), React.createElement("option", { value: "BW" }, "Botswana"), React.createElement("option", { value: "BY" }, "Belarus"), React.createElement("option", { value: "BZ" }, "Belize"), React.createElement("option", { value: "CA" }, "Canada"), React.createElement("option", { value: "CC" }, "Cocos (Keeling) Islands"), React.createElement("option", { value: "CD" }, "Congo, the Democratic Republic of the"), React.createElement("option", { value: "CF" }, "Central African Republic"), React.createElement("option", { value: "CG" }, "Congo"), React.createElement("option", { value: "CH" }, "Switzerland"), React.createElement("option", { value: "CI" }, "C\xF4te d'Ivoire"), React.createElement("option", { value: "CK" }, "Cook Islands"), React.createElement("option", { value: "CL" }, "Chile"), React.createElement("option", { value: "CM" }, "Cameroon"), React.createElement("option", { value: "CN" }, "China"), React.createElement("option", { value: "CO" }, "Colombia"), React.createElement("option", { value: "CR" }, "Costa Rica"), React.createElement("option", { value: "CU" }, "Cuba"), React.createElement("option", { value: "CV" }, "Cape Verde"), React.createElement("option", { value: "CW" }, "Cura\xE7ao"), React.createElement("option", { value: "CX" }, "Christmas Island"), React.createElement("option", { value: "CY" }, "Cyprus"), React.createElement("option", { value: "CZ" }, "Czech Republic"), React.createElement("option", { value: "DE" }, "Germany"), React.createElement("option", { value: "DJ" }, "Djibouti"), React.createElement("option", { value: "DK" }, "Denmark"), React.createElement("option", { value: "DM" }, "Dominica"), React.createElement("option", { value: "DO" }, "Dominican Republic"), React.createElement("option", { value: "DZ" }, "Algeria"), React.createElement("option", { value: "EC" }, "Ecuador"), React.createElement("option", { value: "EE" }, "Estonia"), React.createElement("option", { value: "EG" }, "Egypt"), React.createElement("option", { value: "EH" }, "Western Sahara"), React.createElement("option", { value: "ER" }, "Eritrea"), React.createElement("option", { value: "ES" }, "Spain"), React.createElement("option", { value: "ET" }, "Ethiopia"), React.createElement("option", { value: "FI" }, "Finland"), React.createElement("option", { value: "FJ" }, "Fiji"), React.createElement("option", { value: "FK" }, "Falkland Islands (Malvinas)"), React.createElement("option", { value: "FM" }, "Micronesia, Federated States of"), React.createElement("option", { value: "FO" }, "Faroe Islands"), React.createElement("option", { value: "FR" }, "France"), React.createElement("option", { value: "GA" }, "Gabon"), React.createElement("option", { value: "GB" }, "United Kingdom"), React.createElement("option", { value: "GD" }, "Grenada"), React.createElement("option", { value: "GE" }, "Georgia"), React.createElement("option", { value: "GF" }, "French Guiana"), React.createElement("option", { value: "GG" }, "Guernsey"), React.createElement("option", { value: "GH" }, "Ghana"), React.createElement("option", { value: "GI" }, "Gibraltar"), React.createElement("option", { value: "GL" }, "Greenland"), React.createElement("option", { value: "GM" }, "Gambia"), React.createElement("option", { value: "GN" }, "Guinea"), React.createElement("option", { value: "GP" }, "Guadeloupe"), React.createElement("option", { value: "GQ" }, "Equatorial Guinea"), React.createElement("option", { value: "GR" }, "Greece"), React.createElement("option", { value: "GS" }, "South Georgia and the South Sandwich Islands"), React.createElement("option", { value: "GT" }, "Guatemala"), React.createElement("option", { value: "GU" }, "Guam"), React.createElement("option", { value: "GW" }, "Guinea-Bissau"), React.createElement("option", { value: "GY" }, "Guyana"), React.createElement("option", { value: "HK" }, "Hong Kong"), React.createElement("option", { value: "HM" }, "Heard Island and McDonald Islands"), React.createElement("option", { value: "HN" }, "Honduras"), React.createElement("option", { value: "HR" }, "Croatia"), React.createElement("option", { value: "HT" }, "Haiti"), React.createElement("option", { value: "HU" }, "Hungary"), React.createElement("option", { value: "ID" }, "Indonesia"), React.createElement("option", { value: "IE" }, "Ireland"), React.createElement("option", { value: "IL" }, "Israel"), React.createElement("option", { value: "IM" }, "Isle of Man"), React.createElement("option", { value: "IN" }, "India"), React.createElement("option", { value: "IO" }, "British Indian Ocean Territory"), React.createElement("option", { value: "IQ" }, "Iraq"), React.createElement("option", { value: "IR" }, "Iran, Islamic Republic of"), React.createElement("option", { value: "IS" }, "Iceland"), React.createElement("option", { value: "IT" }, "Italy"), React.createElement("option", { value: "JE" }, "Jersey"), React.createElement("option", { value: "JM" }, "Jamaica"), React.createElement("option", { value: "JO" }, "Jordan"), React.createElement("option", { value: "JP" }, "Japan"), React.createElement("option", { value: "KE" }, "Kenya"), React.createElement("option", { value: "KG" }, "Kyrgyzstan"), React.createElement("option", { value: "KH" }, "Cambodia"), React.createElement("option", { value: "KI" }, "Kiribati"), React.createElement("option", { value: "KM" }, "Comoros"), React.createElement("option", { value: "KN" }, "Saint Kitts and Nevis"), React.createElement("option", { value: "KP" }, "Korea, Democratic People's Republic of"), React.createElement("option", { value: "KR" }, "Korea, Republic of"), React.createElement("option", { value: "KW" }, "Kuwait"), React.createElement("option", { value: "KY" }, "Cayman Islands"), React.createElement("option", { value: "KZ" }, "Kazakhstan"), React.createElement("option", { value: "LA" }, "Lao People's Democratic Republic"), React.createElement("option", { value: "LB" }, "Lebanon"), React.createElement("option", { value: "LC" }, "Saint Lucia"), React.createElement("option", { value: "LI" }, "Liechtenstein"), React.createElement("option", { value: "LK" }, "Sri Lanka"), React.createElement("option", { value: "LR" }, "Liberia"), React.createElement("option", { value: "LS" }, "Lesotho"), React.createElement("option", { value: "LT" }, "Lithuania"), React.createElement("option", { value: "LU" }, "Luxembourg"), React.createElement("option", { value: "LV" }, "Latvia"), React.createElement("option", { value: "LY" }, "Libya"), React.createElement("option", { value: "MA" }, "Morocco"), React.createElement("option", { value: "MC" }, "Monaco"), React.createElement("option", { value: "MD" }, "Moldova, Republic of"), React.createElement("option", { value: "ME" }, "Montenegro"), React.createElement("option", { value: "MF" }, "Saint Martin (French part)"), React.createElement("option", { value: "MG" }, "Madagascar"), React.createElement("option", { value: "MH" }, "Marshall Islands"), React.createElement("option", { value: "MK" }, "Macedonia, the Former Yugoslav Republic of"), React.createElement("option", { value: "ML" }, "Mali"), React.createElement("option", { value: "MM" }, "Myanmar"), React.createElement("option", { value: "MN" }, "Mongolia"), React.createElement("option", { value: "MO" }, "Macao"), React.createElement("option", { value: "MP" }, "Northern Mariana Islands"), React.createElement("option", { value: "MQ" }, "Martinique"), React.createElement("option", { value: "MR" }, "Mauritania"), React.createElement("option", { value: "MS" }, "Montserrat"), React.createElement("option", { value: "MT" }, "Malta"), React.createElement("option", { value: "MU" }, "Mauritius"), React.createElement("option", { value: "MV" }, "Maldives"), React.createElement("option", { value: "MW" }, "Malawi"), React.createElement("option", { value: "MX" }, "Mexico"), React.createElement("option", { value: "MY" }, "Malaysia"), React.createElement("option", { value: "MZ" }, "Mozambique"), React.createElement("option", { value: "NA" }, "Namibia"), React.createElement("option", { value: "NC" }, "New Caledonia"), React.createElement("option", { value: "NE" }, "Niger"), React.createElement("option", { value: "NF" }, "Norfolk Island"), React.createElement("option", { value: "NG" }, "Nigeria"), React.createElement("option", { value: "NI" }, "Nicaragua"), React.createElement("option", { value: "NL" }, "Netherlands"), React.createElement("option", { value: "NO" }, "Norway"), React.createElement("option", { value: "NP" }, "Nepal"), React.createElement("option", { value: "NR" }, "Nauru"), React.createElement("option", { value: "NU" }, "Niue"), React.createElement("option", { value: "NZ" }, "New Zealand"), React.createElement("option", { value: "OM" }, "Oman"), React.createElement("option", { value: "PA" }, "Panama"), React.createElement("option", { value: "PE" }, "Peru"), React.createElement("option", { value: "PF" }, "French Polynesia"), React.createElement("option", { value: "PG" }, "Papua New Guinea"), React.createElement("option", { value: "PH" }, "Philippines"), React.createElement("option", { value: "PK" }, "Pakistan"), React.createElement("option", { value: "PL" }, "Poland"), React.createElement("option", { value: "PM" }, "Saint Pierre and Miquelon"), React.createElement("option", { value: "PN" }, "Pitcairn"), React.createElement("option", { value: "PR" }, "Puerto Rico"), React.createElement("option", { value: "PS" }, "Palestine, State of"), React.createElement("option", { value: "PT" }, "Portugal"), React.createElement("option", { value: "PW" }, "Palau"), React.createElement("option", { value: "PY" }, "Paraguay"), React.createElement("option", { value: "QA" }, "Qatar"), React.createElement("option", { value: "RE" }, "R\xE9union"), React.createElement("option", { value: "RO" }, "Romania"), React.createElement("option", { value: "RS" }, "Serbia"), React.createElement("option", { value: "RU" }, "Russian Federation"), React.createElement("option", { value: "RW" }, "Rwanda"), React.createElement("option", { value: "SA" }, "Saudi Arabia"), React.createElement("option", { value: "SB" }, "Solomon Islands"), React.createElement("option", { value: "SC" }, "Seychelles"), React.createElement("option", { value: "SD" }, "Sudan"), React.createElement("option", { value: "SE" }, "Sweden"), React.createElement("option", { value: "SG" }, "Singapore"), React.createElement("option", { value: "SH" }, "Saint Helena, Ascension and Tristan da Cunha"), React.createElement("option", { value: "SI" }, "Slovenia"), React.createElement("option", { value: "SJ" }, "Svalbard and Jan Mayen"), React.createElement("option", { value: "SK" }, "Slovakia"), React.createElement("option", { value: "SL" }, "Sierra Leone"), React.createElement("option", { value: "SM" }, "San Marino"), React.createElement("option", { value: "SN" }, "Senegal"), React.createElement("option", { value: "SO" }, "Somalia"), React.createElement("option", { value: "SR" }, "Suriname"), React.createElement("option", { value: "SS" }, "South Sudan"), React.createElement("option", { value: "ST" }, "Sao Tome and Principe"), React.createElement("option", { value: "SV" }, "El Salvador"), React.createElement("option", { value: "SX" }, "Sint Maarten (Dutch part)"), React.createElement("option", { value: "SY" }, "Syrian Arab Republic"), React.createElement("option", { value: "SZ" }, "Swaziland"), React.createElement("option", { value: "TC" }, "Turks and Caicos Islands"), React.createElement("option", { value: "TD" }, "Chad"), React.createElement("option", { value: "TF" }, "French Southern Territories"), React.createElement("option", { value: "TG" }, "Togo"), React.createElement("option", { value: "TH" }, "Thailand"), React.createElement("option", { value: "TJ" }, "Tajikistan"), React.createElement("option", { value: "TK" }, "Tokelau"), React.createElement("option", { value: "TL" }, "Timor-Leste"), React.createElement("option", { value: "TM" }, "Turkmenistan"), React.createElement("option", { value: "TN" }, "Tunisia"), React.createElement("option", { value: "TO" }, "Tonga"), React.createElement("option", { value: "TR" }, "Turkey"), React.createElement("option", { value: "TT" }, "Trinidad and Tobago"), React.createElement("option", { value: "TV" }, "Tuvalu"), React.createElement("option", { value: "TW" }, "Taiwan, Province of China"), React.createElement("option", { value: "TZ" }, "Tanzania, United Republic of"), React.createElement("option", { value: "UA" }, "Ukraine"), React.createElement("option", { value: "UG" }, "Uganda"), React.createElement("option", { value: "UM" }, "United States Minor Outlying Islands"), React.createElement("option", { value: "US" }, "United States"), React.createElement("option", { value: "UY" }, "Uruguay"), React.createElement("option", { value: "UZ" }, "Uzbekistan"), React.createElement("option", { value: "VA" }, "Holy See (Vatican City State)"), React.createElement("option", { value: "VC" }, "Saint Vincent and the Grenadines"), React.createElement("option", { value: "VE" }, "Venezuela, Bolivarian Republic of"), React.createElement("option", { value: "VG" }, "Virgin Islands, British"), React.createElement("option", { value: "VI" }, "Virgin Islands, U.S."), React.createElement("option", { value: "VN" }, "Viet Nam"), React.createElement("option", { value: "VU" }, "Vanuatu"), React.createElement("option", { value: "WF" }, "Wallis and Futuna"), React.createElement("option", { value: "WS" }, "Samoa"), React.createElement("option", { value: "YE" }, "Yemen"), React.createElement("option", { value: "YT" }, "Mayotte"), React.createElement("option", { value: "ZA" }, "South Africa"), React.createElement("option", { value: "ZM" }, "Zambia"), React.createElement("option", { value: "ZW" }, "Zimbabwe"))), React.createElement("div", { className: "mb-3" }, React.createElement("label", { htmlFor: "securityQuesitonTxt", className: "form-label text-primary" }, "Security Question ", React.createElement("span", { className: "text-danger" }, "(Required)")), React.createElement("input", { type: "text", id: "securityQuesitonTxt", name: "securityQuestion", className: "form-control shadow-none border", maxLength: "300", value: this.state.myself.securityQuestion, onChange: this.handleChange, onBlur: () => { this.saveData("securityquestion", this.state.myself.securityQuestion) } })), React.createElement("div", { className: "mb-3" }, React.createElement("label", { htmlFor: "securityAnswerTxt", className: "form-label text-primary" }, "Security Answer ", React.createElement("span", { className: "text-danger" }, "(Required)")), React.createElement("div", { className: "mb-2", style: { fontSize: "13px" } }, "Your existing answer is not shown."), React.createElement("button", { type: "button", className: "btn btn-primary ms-2 btn-sm", onClick: () => { this.setState({ showSecAnsModal: true }) } }, "Change Answer"))), React.createElement("div", { className: "col-lg-4" }, React.createElement("h4", { className: "mb-3 text-primary fw-bold text-center" }, "Display Contact Information"), React.createElement("div", { className: "lh-base fs-small" }, "Links, Emails and Phone numbers added here will be displayed on profile."), React.createElement("div", { className: "py-2" }, React.createElement(ManageLinks, { myself: this.state.myself })), React.createElement("div", { className: "py-2" }, React.createElement(ManageEmails, { myself: this.state.myself })), React.createElement("div", { className: "py-2" }, React.createElement(ManagePhones, { myself: this.state.myself })))))) } else { return React.createElement(React.Fragment, null, loading) } } } class ChangePassword extends React.Component { constructor(props) { super(props); _defineProperty(this, "savePassword", () => { if (this.state.password !== this.state.confirmPassword) { this.setState({ bsstyle: "danger", message: "Confirm password should match password." }); return } fetch('//' + window.location.host + '/api/Members/SavePassword?d=' + this.state.password, { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loading: false, message: 'You are not logged in.', bsstyle: 'danger' }) } else if (response.status === 200) { this.setState({ loading: false, message: 'Account password is reset.', bsstyle: 'success' }) } else { try { response.json().then(data => { this.setState({ loading: false, message: data.error, bsstyle: 'danger' }) }) } catch (err) { this.setState({ loading: false, message: 'Unable to reset password.', bsstyle: 'danger' }) } } }) }); this.state = { loading: false, bsstyle: '', message: '', password: '', confirmPassword: '' } } render() { return React.createElement(React.Fragment, null, React.createElement("div", { className: "mb-3" }, React.createElement("label", { className: "form-label" }, "Password"), React.createElement("input", { type: "password", autoComplete: false, className: "form-control shadow-none border", maxLength: "100", minLength: "8", value: this.state.password, onChange: e => { this.setState({ password: e.target.value }) } })), React.createElement("div", { className: "mb-3" }, React.createElement("label", { className: "form-label" }, "Confirm Password"), React.createElement("input", { type: "password", autoComplete: false, className: "form-control shadow-none border", value: this.state.confirmPassword, onChange: e => { this.setState({ confirmPassword: e.target.value }) } })), React.createElement("div", { className: "mb-3" }, React.createElement("button", { type: "button", disabled: this.state.loading, className: "btn btn-primary", onClick: this.savePassword }, this.state.loading ? React.createElement("span", { className: "spinner-border spinner-border-sm", "aria-hidden": "true" }) : null, React.createElement("span", { role: "status" }, "Save Password"))), this.state.message !== "" ? React.createElement("div", { className: "my-2 text-" + this.state.bsstyle }, this.state.message) : null) } } class ManageLinks extends React.Component { constructor(props) { super(props); _defineProperty(this, "saveData", () => { const fd = new FormData(); fd.set("id", this.state.id); fd.set("url", this.state.url); fd.set("name", this.state.name); this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Members/savelink', { method: 'post', body: fd, headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 200) { response.json().then(data => { let ms = this.state.myself; if (this.state.id === this.emptyid) { ms.links.push(data) } else if (this.state.id === this.emptyid) { for (let k in ms.links) { if (ms.links[k].id === this.state.id) { ms.links[k].url = data.url; ms.links[k].name = data.name; break } } } this.setState({ myself: ms, bsstyle: '', message: '', loading: false, showmodal: false, id: this.emptyid, url: '', name: '' }) }) } else { this.setState({ loading: false, message: 'Unable to save data', bsstyle: 'danger' }) } }) }); _defineProperty(this, "removeData", () => { fetch('//' + window.location.host + '/api/Members/removelink/' + this.state.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 200) { let ms = this.state.myself; ms.links = ms.links.filter(t => t.id !== this.state.id); this.setState({ myself: ms, bsstyle: '', message: '', loading: false, showmodal: false, id: this.emptyid, url: '', name: '' }) } else { this.setState({ loading: false, message: 'Unable to save data', bsstyle: 'danger' }) } }) }); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.emptyid = '00000000-0000-0000-0000-000000000000'; this.state = { loading: false, loggedin: loggedin, myself: this.props.myself, bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), id: this.emptyid, showmodal: false, url: '', name: '' } } renderModal() { if (this.state.showmodal) { return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal fade d-block show", tabIndex: "-1", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h1", { className: "modal-title fs-5", id: "exampleModalLabel" }, "Link"), React.createElement("button", { type: "button", className: "btn-close", onClick: () => { this.setState({ showmodal: false, id: this.emptyid, url: '', name: '' }) }, "aria-label": "Close" })), React.createElement("div", { className: "modal-body" }, React.createElement("form", { onSubmit: e => { e.preventDefault(); this.saveData(); return false } }, this.state.message !== "" ? React.createElement("div", { className: "my-2 text-" + this.state.bsstyle }) : null, React.createElement("div", { className: "mb-2" }, React.createElement("label", { className: "form-label text-primary" }, "URL"), React.createElement("input", { type: "url", name: "url", required: true, placeholder: "https://www.yocail.com", className: "form-control shadow-none border", maxLength: "300", value: this.state.url, onChange: e => { this.setState({ url: e.target.value }) } })), React.createElement("div", { className: "mb-2" }, React.createElement("label", { className: "form-label text-primary" }, "Text"), React.createElement("input", { type: "text", name: "name", required: true, placeholder: "Yocail Profile", className: "form-control shadow-none border", maxLength: "100", value: this.state.name, onChange: e => { this.setState({ name: e.target.value }) } })), React.createElement("div", { className: "mb-2" }, React.createElement("button", { type: "submit", disabled: this.state.loading, className: "btn btn-blue" }, this.state.loading ? React.createElement("div", { className: "spinner-border spinner-border-sm", role: "status" }, React.createElement("span", { className: "visually-hidden" }, "Loading...")) : null, " Save"))))))), React.createElement("div", { className: "modal-backdrop fade show" })) } } renderRows() { let addbtn = this.state.myself.links.length < 5 ? React.createElement("li", { className: "list-group-item" }, React.createElement("div", { className: "fs-small my-2 text-center" }, "Add upto 5 links to your profile. ", React.createElement("a", { className: "text-primary fw-bold", href: "javascript:void(0);", onClick: () => { this.setState({ id: this.emptyid, url: '', name: '', showmodal: true }) } }, "Add Link"))) : null; let items = []; let links = this.state.myself.links; for (let k in links) { let l = links[k]; items.push(React.createElement("li", { key: k, className: "list-group-item" }, React.createElement("table", { className: "w-100", cellPadding: 0, cellSpacing: 0 }, React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", null, React.createElement("span", { className: "fs-small fw-semibold" }, l.name), React.createElement("br", null), React.createElement("span", { className: "fs-verysmall text-secondary" }, l.url)), React.createElement("td", { width: "50px", align: "center" }, React.createElement("button", { type: "button", className: "btn btn-link", "data-id": l.id, onClick: e => { this.setState({ id: e.target.getAttribute("data-id") }, () => { this.removeData() }) } }, React.createElement("i", { className: "bi bi-trash", "data-id": l.id })))))))) } return React.createElement("ul", { className: "list-group" }, items, addbtn) } render() { return React.createElement("div", null, this.renderRows(), this.renderModal()) } } class ManageEmails extends React.Component { constructor(props) { super(props); _defineProperty(this, "saveData", () => { const fd = new FormData(); fd.set("id", this.state.id); fd.set("email", this.state.email); this.setState({ loading: true }); fetch('//' + window.location.host + '/api/members/saveemail', { method: 'post', body: fd, headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 200) { response.json().then(data => { let ms = this.state.myself; if (this.state.id === this.emptyid) { ms.emails.push(data) } else if (this.state.id === this.emptyid) { for (let k in ms.emails) { if (ms.emails[k].id === this.state.id) { ms.emails[k].email = data.email; break } } } this.setState({ myself: ms, bsstyle: '', message: '', loading: false, showmodal: false, id: this.emptyid, email: '' }) }) } else { this.setState({ loading: false, message: 'Unable to save data', bsstyle: 'danger' }) } }) }); _defineProperty(this, "removeData", () => { fetch('//' + window.location.host + '/api/Members/removeemail/' + this.state.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 200) { let ms = this.state.myself; ms.emails = ms.emails.filter(t => t.id !== this.state.id); this.setState({ myself: ms, bsstyle: '', message: '', loading: false, showmodal: false, id: this.emptyid, email: '' }) } else { this.setState({ loading: false, message: 'Unable to save data', bsstyle: 'danger' }) } }) }); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.emptyid = '00000000-0000-0000-0000-000000000000'; this.state = { loading: false, loggedin: loggedin, myself: this.props.myself, bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), id: this.emptyid, showmodal: false, email: '' } } renderModal() { if (this.state.showmodal) { return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal fade d-block show", tabIndex: "-1", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h1", { className: "modal-title fs-5", id: "exampleModalLabel" }, "Email"), React.createElement("button", { type: "button", className: "btn-close", onClick: () => { this.setState({ showmodal: false, id: this.emptyid, email: '' }) }, "aria-label": "Close" })), React.createElement("div", { className: "modal-body" }, React.createElement("form", { onSubmit: e => { e.preventDefault(); this.saveData(); return false } }, this.state.message !== "" ? React.createElement("div", { className: "my-2 text-" + this.state.bsstyle }) : null, React.createElement("div", { className: "mb-2" }, React.createElement("input", { type: "email", name: "Email", required: true, placeholder: "joe@yocail.com", className: "form-control shadow-none border", maxLength: "100", value: this.state.email, onChange: e => { this.setState({ email: e.target.value }) } })), React.createElement("div", { className: "mb-2" }, React.createElement("button", { type: "submit", disabled: this.state.loading, className: "btn btn-blue" }, this.state.loading ? React.createElement("div", { className: "spinner-border spinner-border-sm", role: "status" }, React.createElement("span", { className: "visually-hidden" }, "Loading...")) : null, " Save"))))))), React.createElement("div", { className: "modal-backdrop fade show" })) } } renderRows() { let addbtn = this.state.myself.emails.length < 2 ? React.createElement("li", { className: "list-group-item" }, React.createElement("div", { className: "fs-small my-2 text-center" }, "Add upto 2 emails to your profile. ", React.createElement("a", { className: "text-primary fw-bold", href: "javascript:void(0);", onClick: () => { this.setState({ id: this.emptyid, email: '', showmodal: true }) } }, "Add Emails"))) : null; let items = []; let links = this.state.myself.emails; for (let k in links) { let l = links[k]; items.push(React.createElement("li", { key: k, className: "list-group-item" }, React.createElement("table", { className: "w-100", cellPadding: 0, cellSpacing: 0 }, React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", null, React.createElement("span", { className: "fs-small fw-semibold" }, l.email)), React.createElement("td", { width: "50px", align: "center" }, React.createElement("button", { type: "button", className: "btn btn-link", "data-id": l.id, onClick: e => { this.setState({ id: e.target.getAttribute("data-id") }, () => { this.removeData() }) } }, React.createElement("i", { className: "bi bi-trash", "data-id": l.id })))))))) } return React.createElement("ul", { className: "list-group" }, items, addbtn) } render() { return React.createElement("div", null, this.renderRows(), this.renderModal()) } } class ManagePhones extends React.Component { constructor(props) { super(props); _defineProperty(this, "saveData", () => { const fd = new FormData(); fd.set("id", this.state.id); fd.set("phone", this.state.phone); this.setState({ loading: true }); fetch('//' + window.location.host + '/api/members/savephone', { method: 'post', body: fd, headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 200) { response.json().then(data => { let ms = this.state.myself; if (this.state.id === this.emptyid) { ms.phones.push(data) } else if (this.state.id === this.emptyid) { for (let k in ms.phones) { if (ms.phones[k].id === this.state.id) { ms.phones[k].phone = data.phone; break } } } this.setState({ myself: ms, bsstyle: '', message: '', loading: false, showmodal: false, id: this.emptyid, phone: '' }) }) } else { this.setState({ loading: false, message: 'Unable to save data', bsstyle: 'danger' }) } }) }); _defineProperty(this, "removeData", () => { fetch('//' + window.location.host + '/api/Members/removephone/' + this.state.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 200) { let ms = this.state.myself; ms.phones = ms.phones.filter(t => t.id !== this.state.id); this.setState({ myself: ms, bsstyle: '', message: '', loading: false, showmodal: false, id: this.emptyid, phones: '' }) } else { this.setState({ loading: false, message: 'Unable to save data', bsstyle: 'danger' }) } }) }); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.emptyid = '00000000-0000-0000-0000-000000000000'; this.state = { loading: false, loggedin: loggedin, myself: this.props.myself, bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), id: this.emptyid, showmodal: false, phone: '' } } renderModal() { if (this.state.showmodal) { return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal fade d-block show", tabIndex: "-1", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h1", { className: "modal-title fs-5", id: "exampleModalLabel" }, "Phone"), React.createElement("button", { type: "button", className: "btn-close", onClick: () => { this.setState({ showmodal: false, id: this.emptyid, phone: '' }) }, "aria-label": "Close" })), React.createElement("div", { className: "modal-body" }, React.createElement("form", { onSubmit: e => { e.preventDefault(); this.saveData(); return false } }, this.state.message !== "" ? React.createElement("div", { className: "my-2 text-" + this.state.bsstyle }) : null, React.createElement("div", { className: "mb-2" }, React.createElement("input", { type: "text", name: "Phone", required: true, placeholder: "9871000222", className: "form-control shadow-none border", maxLength: "15", value: this.state.phone, onChange: e => { this.setState({ phone: e.target.value }) } })), React.createElement("div", { className: "mb-2" }, React.createElement("button", { type: "submit", disabled: this.state.loading, className: "btn btn-blue" }, this.state.loading ? React.createElement("div", { className: "spinner-border spinner-border-sm", role: "status" }, React.createElement("span", { className: "visually-hidden" }, "Loading...")) : null, " Save"))))))), React.createElement("div", { className: "modal-backdrop fade show" })) } } renderRows() { let addbtn = this.state.myself.phones.length < 2 ? React.createElement("li", { className: "list-group-item" }, React.createElement("div", { className: "fs-small my-2 text-center" }, "Add upto 2 phone numbers to your profile. ", React.createElement("a", { className: "text-primary fw-bold", href: "javascript:void(0);", onClick: () => { this.setState({ id: this.emptyid, email: '', showmodal: true }) } }, "Add Phone"))) : null; let items = []; let links = this.state.myself.phones; for (let k in links) { let l = links[k]; items.push(React.createElement("li", { key: k, className: "list-group-item" }, React.createElement("table", { className: "w-100", cellPadding: 0, cellSpacing: 0 }, React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", null, React.createElement("span", { className: "fs-small fw-semibold" }, l.phone)), React.createElement("td", { width: "50px", align: "center" }, React.createElement("button", { type: "button", className: "btn btn-link", "data-id": l.id, onClick: e => { this.setState({ id: e.target.getAttribute("data-id") }, () => { this.removeData() }) } }, React.createElement("i", { className: "bi bi-trash", "data-id": l.id })))))))) } return React.createElement("ul", { className: "list-group" }, items, addbtn) } render() { return React.createElement("div", null, this.renderRows(), this.renderModal()) } } class RegisterForm extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") == null) { loggedin = false } this.state = { showregisterform: props.beginWithRegister, showForgotPassword: false, registerdto: { userName: '', password: '', userEmail: '', securityQuestion: '', securityAnswer: '' }, logindto: { userName: '', password: '' }, loading: false, message: '', bsstyle: '', loggedin: loggedin, showSecurityQuestionSampleModal: false }; this.handleRegisterSubmit = this.handleRegisterSubmit.bind(this); this.handleLogin = this.handleLogin.bind(this); this.handleRegisterClickHere = this.handleRegisterClickHere.bind(this); this.handleLoginClickHere = this.handleLoginClickHere.bind(this) } componentDidMount() { document.getElementById("mainmenubar").style.display = "none"; document.getElementsByTagName("body")[0].style.marginTop = "0px"; document.title = "Yocail - login or signup" } handleLogin(e) { e.preventDefault(); this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Members/Login', { method: 'post', body: JSON.stringify({ UserName: this.state.logindto.userName, Password: this.state.logindto.password }), headers: { 'Content-Type': 'application/json' } }).then(response => { if (response.status === 200) { response.json().then(data => { console.log(data); if (data.token !== undefined) { localStorage.setItem("token", data.token); localStorage.setItem("myself", JSON.stringify(data.member)); this.setState({ bsstyle: '', message: '', loggedin: true, loading: false }); location.reload(); } }) } else if (response.status === 404) { response.json().then(data => { this.setState({ bsstyle: 'danger', message: data.error, loading: false }) }) } }) } handleRegisterSubmit(e) { e.preventDefault(); this.setState({ loading: true }); fetch('//' + window.location.host + '/api/members/register', { method: 'post', body: JSON.stringify({ UserName: this.state.registerdto.userName, Password: this.state.registerdto.password, Email: this.state.registerdto.userEmail, SecurityQuestion: this.state.registerdto.securityQuestion, SecurityAnswer: this.state.registerdto.securityAnswer }), headers: { 'Content-Type': 'application/json' } }).then(response => { console.log(response.status); if (response.status === 200) { this.setState({ loading: false, bsstyle: 'success', message: 'Your registration is complete.', loggedin: false, logindto: { userName: this.state.registerdto.userName, password: '' }, showregisterform: false }) } else if (response.status === 400) { response.json().then(data => { this.setState({ loading: false, bsstyle: 'danger', message: data.error }) }) } else { this.setState({ loading: false, bsstyle: 'danger', message: 'Unable to process your request please try again.' }) } }); return false } handleRegisterClickHere() { this.setState({ showregisterform: true, message: "" }) } handleLoginClickHere() { this.setState({ showregisterform: false, message: "" }) } renderLoginForm() { if (!this.state.showForgotPassword) { return React.createElement(React.Fragment, null, React.createElement("h2", null, "Login"), React.createElement("form", { onSubmit: this.handleLogin }, React.createElement("div", { className: "form-group ic-input" }, React.createElement("img", { src: "//" + location.host + "/theme1/images/ic-user.svg", className: "input-icon", alt: "" }), React.createElement("input", { type: "text", placeholder: "Username", className: "form-control", required: true, name: "userName", value: this.state.logindto.userName, onChange: e => { this.setState({ logindto: { userName: e.target.value, password: this.state.logindto.password } }) } })), React.createElement("div", { className: "form-group ic-input" }, React.createElement("img", { src: "//" + location.host + "/theme1/images/ic-lock.svg", className: "input-icon", alt: "" }), React.createElement("input", { className: "form-control", required: true, placeholder: "Password", name: "password", type: "password", onChange: e => { this.setState({ logindto: { userName: this.state.logindto.userName, password: e.target.value } }) } })), React.createElement("div", { className: "d-flex justify-content-between pb-3" }, React.createElement("div", { className: "custom-control custom-checkbox" }), React.createElement("a", { href: "javascript:void(0);", onClick: () => { this.setState({ showForgotPassword: true }) }, title: "Forgot Password?", className: "forgot-pass" }, "Forgot Password?")), React.createElement("button", { type: "submit", disabled: this.state.loading, className: "btn btn-blue" }, this.state.loading ? React.createElement("div", { className: "spinner-border spinner-border-sm", role: "status" }, React.createElement("span", { className: "visually-hidden" }, "Loading...")) : "Login"))) } else { return React.createElement("div", null, React.createElement(ForgotPassword, null), React.createElement("p", { className: "haveaccount mt-3" }, React.createElement("a", { href: "javascript:void(0);", onClick: () => { this.setState({ showForgotPassword: false }) }, title: "Login Again" }, "Try Login Again"))) } } renderSecurityQuestionSampleModal() { if (this.state.showSecurityQuestionSampleModal) { return React.createElement("div", null, React.createElement("div", { className: "modal fade show", style: { display: "block" }, tabIndex: "-1" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h1", { className: "modal-title fs-5" }, "Security Questions Hints"), React.createElement("button", { type: "button", className: "btn-close", onClick: () => this.setState({ showSecurityQuestionSampleModal: false }) })), React.createElement("div", { className: "modal-body" }, React.createElement(SecurityQuestionSampleList, { onQuestionSelect: e => { let rdto = this.state.registerdto; rdto.securityQuestion = e; this.setState({ registerdto: rdto, showSecurityQuestionSampleModal: false }) } }))))), React.createElement("div", { className: "modal-backdrop fade show" })) } } static getDerivedStateFromProps(nextProps, prevState) { if (nextProps.beginWithRegister !== prevState.beginWithRegister) { return { someState: nextProps.beginWithRegister } } else { return null } } render() { let messagecontent = this.state.message !== "" ? React.createElement("div", { className: "mt-2 text-center text-" + this.state.bsstyle }, this.state.message) : null; let bannerimage = this.state.showregisterform ? "//" + location.host + "/theme1/images/banner-image.svg" : "//" + location.host + "/theme1/images/banner-login.svg"; let formcontents = this.state.showregisterform ? React.createElement(React.Fragment, null, React.createElement("div", null, React.createElement("span", null, "LET'S GET YOU STARTED"), React.createElement("h2", null, "Create an Account"), React.createElement("form", { autoComplete: "off", onSubmit: this.handleRegisterSubmit }, React.createElement("div", { className: "form-group ic-input" }, React.createElement("img", { src: "//" + location.host + "/theme1/images/ic-user.svg", className: "input-icon", alt: "" }), React.createElement("input", { type: "text", className: "form-control", required: true, maxLength: "30", minLength: "2", required: true, name: "username", value: this.state.registerdto.userName, placeholder: "Unique username", onChange: e => { let rdto = this.state.registerdto; rdto.userName = e.target.value; this.setState({ registerdto: rdto }) } })), React.createElement("div", { className: "form-group ic-input" }, React.createElement("img", { src: "//" + location.host + "/theme1/images/ic-lock.svg", className: "input-icon", alt: "" }), React.createElement("input", { type: "password", minLength: "8", className: "form-control", onChange: e => { let rdto = this.state.registerdto; rdto.password = e.target.value; this.setState({ registerdto: rdto }) }, placeholder: "Password", required: true })), React.createElement("div", { className: "form-group ic-input" }, React.createElement("img", { src: "//" + location.host + "/theme1/images/ic-email.svg", className: "input-icon", alt: "" }), React.createElement("input", { type: "email", class: "form-control", maxLength: "250", placeholder: "E-mail", value: this.state.registerdto.userEmail, onChange: e => { let rdto = this.state.registerdto; rdto.userEmail = e.target.value; this.setState({ registerdto: rdto }) }, required: true })), React.createElement("div", { className: "form-group ic-input" }, React.createElement("img", { src: "//" + location.host + "/theme1/images/ic-shield.svg", className: "input-icon", alt: "" }), React.createElement("input", { list: "sqlist", type: "text", placeholder: "Security Question", className: "form-control", minLength: "10", required: true, maxlength: "300", name: "securityQuestion", value: this.state.registerdto.securityQuestion, onChange: e => { let rdto = this.state.registerdto; rdto.securityQuestion = e.target.value; this.setState({ registerdto: rdto }) }, "aria-describedby": "securityquestionHelp" }), React.createElement("datalist", { id: "sqlist" }, React.createElement("option", { value: "What is the name of your first friend?" }), React.createElement("option", { value: "What was the make and model of your first car?" }), React.createElement("option", { value: "In what city did your parents meet?" }), React.createElement("option", { value: "What is your birth place?" }), React.createElement("option", { value: "What is your favourite place to visit?" }), React.createElement("option", { value: "What was the name of the first school you remember attending?" }))), React.createElement("div", { id: "securityquestionHelp", className: "form-text text-center mb-3 py-1" }, "Security Question is required to recover forgotten password.", React.createElement("a", { href: "javascript:void(0);", onClick: () => this.setState({ showSecurityQuestionSampleModal: true }), className: "fw-bold mx-1", style: { color: "#30235B" } }, "Sample Questions List")), React.createElement("div", { className: "form-group ic-input" }, React.createElement("img", { src: "//" + location.host + "/theme1/images/ic-shield-yes.svg", className: "input-icon", alt: "" }), React.createElement("input", { type: "text", class: "form-control", maxlength: "100", placeholder: "Security Answer", required: true, name: "securityAnswer", value: this.state.registerdto.securityAnswer, onChange: e => { let rdto = this.state.registerdto; rdto.securityAnswer = e.target.value; this.setState({ registerdto: rdto }) } })), React.createElement("div", { id: "securitypasswordHelp", className: "form-text mb-3 text-center d-none" }, "Correct answer to your security question."), React.createElement("button", { className: "btn btn-dark", type: "submit" }, this.state.loading ? React.createElement("div", { className: "spinner-border spinner-border-sm text-light", role: "status" }, React.createElement("span", { className: "visually-hidden" }, "Loading...")) : "Register")), messagecontent, this.renderSecurityQuestionSampleModal()), React.createElement("div", { className: "alternateoption" }, React.createElement("span", null, "Or")), React.createElement("p", { className: "haveaccount" }, "Already a Member? ", React.createElement("a", { href: "javascript:void(0);", onClick: this.handleLoginClickHere }, "LOGIN HERE"))) : React.createElement(React.Fragment, null, this.renderLoginForm(), React.createElement("div", { className: "alternateoption" }, React.createElement("span", null, "Or")), React.createElement("p", { className: "haveaccount" }, "Don\u2019t have an account? ", React.createElement("a", { href: "javascript:void(0);", onClick: this.handleRegisterClickHere, title: "SIGN UP HERE" }, "SIGN UP HERE")), messagecontent); return React.createElement("div", { className: "wrapper sign-up pt-5", style: { minHeight: "100vh" } }, React.createElement("div", { className: "banner-image d-none d-md-block" }, React.createElement("img", { src: bannerimage, alt: "Banner" })), React.createElement("div", { className: "container mt-5" }, React.createElement("main", null, React.createElement("div", { className: "row" }, React.createElement("div", { className: "intro-slide col-md-6" }, React.createElement("header", { className: "site-header" }, React.createElement("a", { href: "#", title: "Yocail" }, React.createElement("img", { src: "//" + location.host + "/theme1/images/Yocail-logo.svg", alt: "Yocail Logo" }))), React.createElement("div", { id: "carouselExampleIndicators", className: "carousel slide", "data-ride": "carousel" }, React.createElement("ol", { className: "carousel-indicators" }, React.createElement("li", { "data-target": "#carouselExampleIndicators", "data-slide-to": "0", className: "active" })), React.createElement("div", { className: "carousel-inner" }, React.createElement("div", { className: "carousel-item active" }, React.createElement("p", null, "Safely share pictures with your friends and family."))), React.createElement("a", { className: "carousel-control-prev", href: "#carouselExampleIndicators", role: "button", "data-slide": "prev" }, React.createElement("span", { className: "carousel-control-prev-icon", "aria-hidden": "true" }), React.createElement("span", { className: "sr-only" }, "Previous")), React.createElement("a", { className: "carousel-control-next", href: "#carouselExampleIndicators", role: "button", "data-slide": "next" }, React.createElement("span", { className: "carousel-control-next-icon", "aria-hidden": "true" }), React.createElement("span", { className: "sr-only" }, "Next")))), React.createElement("div", { className: "col-md-6" }, React.createElement("div", { className: "form-wrap" }, React.createElement("div", { className: "right-icon" }, React.createElement("svg", { xmlns: "http://www.w3.org/2000/svg", width: "79", height: "106", viewBox: "0 0 79 106", fill: "none" }, React.createElement("circle", { cx: "75", cy: "31", r: "75", fill: "url(#paint0_linear_9_99)", "fill-opacity": "0.3" }), React.createElement("defs", null, React.createElement("linearGradient", { id: "paint0_linear_9_99", x1: "75", y1: "-44", x2: "75", y2: "106", gradientUnits: "userSpaceOnUse" }, React.createElement("stop", { "stop-color": "#FE8F75" }), React.createElement("stop", { offset: "1", "stop-color": "#CF0606" }))))), React.createElement("span", null), formcontents)))))) } } class SecurityQuestionSampleList extends React.Component { constructor(props) { super(props); this.list = ["What is the name of your first friend?", "What was the make and model of your first car?", "In what city did your parents meet?", "What is your birth place?", "What is your favourite place to visit?", "What was the name of the first school you remember attending?"]; this.state = { copiedText: "" } } render() { let items = []; for (let i = 0; i < this.list.length; i += 1) { items.push(React.createElement("li", { className: "pointer mb-2 p-2 " + (this.list[i] == this.state.copiedText ? " bg-success text-white " : ""), onClick: () => { navigator.clipboard.writeText(this.list[i]); this.setState({ copiedText: this.list[i] }); if (this.props.onQuestionSelect !== undefined) { this.props.onQuestionSelect(this.list[i]) } } }, this.list[i])) } return React.createElement("div", null, React.createElement("ul", { className: "list-group securityquestionlist" }, items), React.createElement("div", { style: { fontSize: "0.7rem" }, className: "text-center p-1" }, "Click to select")) } } class ViewProfile extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), profile: this.props.profile === undefined ? null : this.props.profile } } static getDerivedStateFromProps(props, state) { if (props.channel !== state.channel || props.profileid !== state.profileid || props.profile !== state.profile) { return { channel: props.channel, profileid: props.profileid, profile: props.profile === undefined ? null : props.profile } } return null } processString(options) { var key = 0; function processInputWithRegex(option, input) { if (!option.fn || typeof option.fn !== 'function') { return input } if (!option.regex || !(option.regex instanceof RegExp)) { return input } if (typeof input === 'string') { var regex = option.regex; var result = null; var output = []; while ((result = regex.exec(input)) !== null) { var index = result.index; var match = result[0]; output.push(input.substring(0, index)); output.push(option.fn(key += 1, result)); input = input.substring(index + match.length, input.length + 1); regex.lastIndex = 0 } output.push(input); return output } else if (Array.isArray(input)) { return input.map(function (chunk) { return processInputWithRegex(option, chunk) }) } else { return input } } return function (input) { if (!options || !Array.isArray(options) || !options.length) { return input } options.forEach(function (option) { return input = processInputWithRegex(option, input) }); return input } } renderText(text) { let parts = text.split(/(http|https):\/\/(\S+)\.([a-z]{2,}?)(.*?)( |\,|$|\.)/gim); for (let i = 1; i < parts.length; i += 2) { parts[i] = React.createElement("a", { key: 'link' + i, href: parts[i] }, parts[i].split('\n').map((item, key) => { return React.createElement(React.Fragment, { key: key }, item, React.createElement("br", null)) })) } return parts } render() { if (this.state.profile !== null) { var d = new Date(); let pic = React.createElement(React.Fragment, null, React.createElement("img", { src: "/images/nopic.jpg", style: { width: "50px" }, className: "rounded mx-auto d-block img-fluid", alt: "" })); if (this.state.profile.pic !== "") { pic = React.createElement(React.Fragment, null, React.createElement("img", { src: this.state.profile.pic, className: "rounded mx-auto d-block img-fluid", alt: "" })) } let age = this.state.profile.birthYear > 0 ? React.createElement(React.Fragment, null, d.getFullYear() - this.state.profile.birthYear, " Years Old") : null; let address = this.state.profile.city + ' ' + this.state.profile.state + ' ' + this.state.profile.country; if (address.trim() !== '') { address = 'From ' + address } let config = [{ regex: /(http|https):\/\/(\S+)\.([a-z]{2,}?)(.*?)( |\,|$|\.)/gim, fn: (key, result) => React.createElement("span", { key: key }, React.createElement("a", { target: "_blank", href: `${result[1]}://${result[2]}.${result[3]}${result[4]}` }, result[2], ".", result[3], result[4]), result[5]) }, { regex: /\n/gim, fn: (key, result) => React.createElement("br", { key: key }) }, { regex: /(\S+)\.([a-z]{2,}?)(.*?)( |\,|$|\.)/gim, fn: (key, result) => React.createElement("span", { key: key }, React.createElement("a", { target: "_blank", href: `http://${result[1]}.${result[2]}${result[3]}` }, result[1], ".", result[2], result[3]), result[4]) }]; var bio = React.createElement("p", null, this.processString(config)(this.state.profile.bio)); return React.createElement("div", { className: "text-center" }, pic, React.createElement("h4", null, this.state.profile.name), React.createElement("p", null, bio), React.createElement("p", null, React.createElement("em", null, age, " ", address))) } else { return null } } } class FollowRequestList extends React.Component { constructor(props) { super(props); _defineProperty(this, "fetchRequests", () => { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Follow/Requests', { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { console.log(data); this.setState({ loading: false, requests: data, bsstyle: '', message: '' }) }) } else if (response.status === 500) { this.setState({ bsstyle: 'danger', message: 'Unable to process this request', loading: false }) } }).catch(() => { this.setState({ bsstyle: 'danger', message: 'Unable to process this request, check your internet connection.', loading: false }) }) }); _defineProperty(this, "allowRequest", id => { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Follow/Allow/' + id, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { this.setState({ loading: false, requests: this.state.requests.filter(t => t.id !== id), bsstyle: '', message: '' }) } else if (response.status === 500) { this.setState({ bsstyle: 'danger', message: 'Unable to process this request', loading: false }) } }).catch(() => { this.setState({ bsstyle: 'danger', message: 'Unable to process this request, check your internet connection.', loading: false }) }) }); _defineProperty(this, "rejectRequest", id => { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Follow/Reject/' + id, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { this.setState({ loading: false, requests: this.state.requests.filter(t => t.id !== id), bsstyle: '', message: '' }) } else if (response.status === 500) { this.setState({ bsstyle: 'danger', message: 'Unable to process this request', loading: false }) } }).catch(() => { this.setState({ bsstyle: 'danger', message: 'Unable to process this request, check your internet connection.', loading: false }) }) }); _defineProperty(this, "renderList", () => { var items = []; for (let k in this.state.requests) { let r = this.state.requests[k]; items.push(React.createElement("div", { key: r.id, className: "row mx-0  justify-content-center align-items-center" }, React.createElement("div", { className: "col px-0" }, React.createElement(MemberPicSmall, { member: r }), React.createElement("a", { href: '//' + window.location.host + '/profile?un=' + r.userName, className: "fs-6 ms-2 fw-bold pointer d-inline-block text-dark text-decoration-none" }, r.userName)), React.createElement("div", { className: "col-6" }, React.createElement("button", { type: "button", "data-id": r.id, onClick: e => { this.allowRequest(e.target.getAttribute("data-id")) }, className: "btn btn-primary" }, "Allow"), React.createElement("button", { type: "button", "data-id": r.id, onClick: e => { this.rejectRequest(e.target.getAttribute("data-id")) }, className: "mx-2 btn btn-secondary" }, "Reject")))) } if (items.length === 0) { items.push(React.createElement("div", { key: 0 }, React.createElement("p", null, "No Follow Requests Here."))) } return items }); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), requests: [] } } componentDidMount() { this.fetchRequests() } render() { return React.createElement(React.Fragment, null, this.renderList()) } } class SuggestedAccounts extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), list: [] }; this.fetchRecommended = this.fetchRecommended.bind(this) } componentDidMount() { this.fetchRecommended() } fetchRecommended() { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Follow/Recommended', { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { console.log("recommended"); console.log(data); this.setState({ loading: false, list: data, bsstyle: '', message: '' }) }) } else if (response.status === 500) { this.setState({ bsstyle: 'danger', message: 'Unable to process this request', loading: false }) } }).catch(() => { this.setState({ bsstyle: 'danger', message: 'Unable to process this request, check your internet connection.', loading: false }) }) } renderResult() { let items = []; for (let k in this.state.list) { items.push(React.createElement("div", { key: k, className: "p-3 py-2" }, React.createElement(MemberSmallRow, { member: this.state.list[k] }))) } if (items.length > 0) { return React.createElement("div", { className: "border rounded-4 mt-4" }, React.createElement("h4", { className: "text-primary my-3 fs-24 text-center ff-righteous" }, "Suggested Accounts"), items) } else { return null } } render() { if (this.state.loggedin) { return React.createElement(React.Fragment, null, this.renderResult()) } else { return null } } } class ForgotPassword extends React.Component { constructor(props) { super(props); _defineProperty(this, "loadSecurityQuestion", () => { this.setState({ loading: true }); fetch("//" + window.location.host + "/api/members/getsecurityquestion/" + this.state.username, { method: "get" }).then(response => { if (response.status === 200) { response.json().then(data => { console.log(data); this.setState({ loading: false, securityQuestion: data.securityQuestion, bsstyle: '', message: '' }) }) } else { this.setState({ loading: false, securityQuestion: '', bsstyle: 'danger', message: 'Incorrect username provided.' }) } }).catch(error => { this.setState({ loading: false, securityQuestion: '', bsstyle: 'danger', message: 'Unable to contact server.' }) }) }); _defineProperty(this, "savePassword", () => { if (this.state.password !== this.state.verifyPassword) { this.setState({ loading: false, bsstyle: 'danger', message: 'Verify password should match password.' }); return } this.setState({ loading: true }); let fd = new FormData(); fd.append("username", this.state.username); fd.append("question", this.state.securityQuestion); fd.append("answer", this.state.securityAnswer); fd.append("password", this.state.password); fetch("//" + window.location.host + "/api/members/validatesecurityanswer", { method: "post", body: fd }).then(response => { if (response.status === 200) { this.setState({ loading: false, bsstyle: 'success', message: 'Your password is successfully reset. You can try logging in now.' }) } else if (response.status == 500 || response.status === 400 || response.status === 404) { response.json().then(data => { this.setState({ loading: false, bsstyle: 'danger', message: data.error }) }) } else { this.setState({ loading: false, securityQuestion: '', bsstyle: 'danger', message: 'Incorrect username provided.' }) } }).catch(error => { this.setState({ loading: false, securityQuestion: '', bsstyle: 'danger', message: 'Unable to contact server.' }) }) }); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, bsstyle: '', message: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), username: '', securityQuestion: '', securityAnswer: '', password: '', verifyPassword: '' } } render() { return React.createElement(React.Fragment, null, React.createElement("h2", null, "Forgot Password"), React.createElement("p", { className: "my-2", style: { lineHeight: "25px" } }, "Provide your username or email address, you will be asked with security question."), React.createElement("form", { onSubmit: e => { e.preventDefault(); this.loadSecurityQuestion() } }, React.createElement("div", { className: "row g-2" }, React.createElement("div", { className: "col-8" }, React.createElement("div", { className: "form-group ic-input" }, React.createElement("img", { src: "//" + location.host + "/theme1/images/ic-user.svg", className: "input-icon", alt: "" }), React.createElement("input", { type: "text", className: "form-control", style: { width: "210 px" }, maxlength: "300", placeholder: "Username or Email", value: this.state.username, onChange: e => { this.setState({ username: e.target.value }) }, required: true }))), React.createElement("div", { className: "col-4" }, React.createElement("button", { type: "submit", disabled: this.state.loading, className: "btn btn-secondary" }, this.state.loading ? React.createElement("div", { className: "spinner-border", role: "status" }, React.createElement("span", { className: "visually-hidden" }, "Loading...")) : "Load Member")))), this.state.securityQuestion !== "" ? React.createElement("form", { onSubmit: e => { e.preventDefault(); this.savePassword() } }, React.createElement("div", { className: "mb-3" }, React.createElement("label", { className: "form-label" }, "Security Question"), React.createElement("input", { type: "text", readOnly: true, required: true, className: "form-control", value: this.state.securityQuestion })), React.createElement("div", { className: "mb-3" }, React.createElement("label", { className: "form-label" }, "Security Answer"), React.createElement("input", { type: "text", maxLength: "300", className: "form-control", value: this.state.securityAnswer, onChange: e => { this.setState({ securityAnswer: e.target.value }) } }), React.createElement("div", { className: "form-text my-2" }, "Your new password will be set only if your security answer matches with our record.")), React.createElement("div", { className: "mb-3" }, React.createElement("label", { className: "form-label" }, "New Password"), React.createElement("input", { type: "password", required: true, className: "form-control", minLength: "8", value: this.state.password, onChange: e => { this.setState({ password: e.target.value }) } })), React.createElement("div", { className: "mb-3" }, React.createElement("label", { className: "form-label" }, "Verify New Password"), React.createElement("input", { type: "password", required: true, className: "form-control", value: this.state.verifyPassword, onChange: e => { this.setState({ verifyPassword: e.target.value }) } })), React.createElement("button", { type: "submit", className: "btn btn-primary" }, "Save New Password")) : null, this.state.loading ? React.createElement("div", { className: "progress my-2", style: { height: "5px" } }, React.createElement("div", { className: "progress-bar progress-bar-striped progress-bar-animated", role: "progressbar", "aria-label": "", "aria-valuenow": "100", "aria-valuemin": "0", "aria-valuemax": "100", style: { width: "100%" } })) : null, this.state.message !== "" ? React.createElement("div", { className: "my-2 alert alert-" + this.state.bsstyle }, this.state.message) : null) } } class PostShareModal extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, bsstyle: '', message: '', myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), post: this.props.post, members: [], memberid: null, search: '' } } render() { return React.createElement(MemberSmallList, { memberid: this.state.member.id, target: "share" }) } } class AddVideo extends React.Component { constructor(props) { super(props); _defineProperty(this, "videoFileChange", e => { let fileURL = URL.createObjectURL(e.target.files[0]); this.videotag.src = fileURL; }); _defineProperty(this, "saveData", () => { this.setState({ loading: true }); const fd = new FormData(); fd.append("Video", this.state.video); fd.append("Describe", this.state.describe); fd.append("AcceptComment", this.state.allowComment); fd.append("AllowShare", this.state.allowShare); fetch("//" + location.host + "/api/post/postvideo", { method: "post", body: fd, headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 200) { this.setState({ loading: false }); location.href = "//" + location.host } else if (response.status === 413) { this.setState({ loading: false, bssytle: 'error', message: "Video file too large." }) } }) }); this.videoinput = null; this.videotag = null; let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, bsstyle: '', message: '', myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), video: null, describe: "", allowComment: false, allowShare: false, play: true, muted: true } } render() { return React.createElement("div", null, React.createElement("div", { className: "mb-3" }, React.createElement("div", { className: "text-center mb-2" }, React.createElement("button", { type: "button", className: "btn btn-primary", onClick: () => { this.videoinput.click() } }, React.createElement("i", { className: "bi bi-upload" })), React.createElement("input", { ref: el => { this.videoinput = el }, type: "file", className: "d-none", onChange: this.videoFileChange })), React.createElement("div", { className: "text-center" }, React.createElement("video", { ref: el => { this.videotag = el }, muted: true, className: this.state.video !== null ? "img-fluid" : "d-none img-fluid", style: { maxHeight: "600px" }, onDurationChange: e => { if (e.target.duration < 100) { this.videotag.play(); this.setState({ video: this.videoinput.files[0], play: true }) } else { this.setState({ video: null, bsstyle: "error", message: "Video should not be more than 30 seconds long." }) } } }), this.state.video !== null ? React.createElement("div", { className: "my-1" }, this.state.play ? React.createElement("button", { type: "button", className: "btn btn-light btn-sm me-2", onClick: () => { this.videotag.pause(); this.setState({ play: false }) } }, React.createElement("i", { className: "bi bi-pause-fill" })) : React.createElement("button", { type: "button", className: "btn btn-light btn-sm me-2", onClick: () => { this.videotag.play(); this.setState({ play: true }) } }, React.createElement("i", { className: "bi bi-play-fill" })), this.state.muted ? React.createElement("button", { type: "button", className: "btn btn-light btn-sm me-2", onClick: () => { this.videotag.muted = false; this.setState({ muted: false }) } }, React.createElement("i", { className: "bi bi-volume-mute-fill" })) : React.createElement("button", { type: "button", className: "btn btn-light btn-sm me-2", onClick: () => { this.videotag.muted = true; this.setState({ muted: true }) } }, React.createElement("i", { className: "bi bi-volume-up-fill" }))) : null)), React.createElement("div", { className: "mb-3" }, React.createElement("textarea", { value: this.state.describe, onChange: e => { this.setState({ describe: e.target.value }) }, className: "form-control border-0 border-bottom", rows: "7", placeholder: "Add some description to your video...", maxlength: "7000" })), React.createElement("div", { className: "mb-3 ps-3" }, React.createElement("div", { className: "form-check form-switch" }, this.state.allowComment ? React.createElement("input", { className: "form-check-input", type: "checkbox", role: "switch", checked: true, onChange: e => { this.setState({ allowComment: false }) } }) : React.createElement("input", { className: "form-check-input", type: "checkbox", role: "switch", onChange: e => { this.setState({ allowComment: true }) } }), React.createElement("label", { className: "form-check-label", for: "acceptcommentchk" }, "Accept Comment On Post"))), React.createElement("div", { className: "ps-3" }, React.createElement("div", { className: "form-check form-switch" }, this.state.allowShare ? React.createElement("input", { className: "form-check-input", type: "checkbox", role: "switch", checked: true, onChange: () => { this.setState({ allowShare: false }) } }) : React.createElement("input", { className: "form-check-input", type: "checkbox", role: "switch", onChange: () => { this.setState({ allowShare: true }) } }), React.createElement("label", { className: "form-check-label", for: "allowsharechk" }, "Allow Sharing of Post"))), React.createElement("div", null, React.createElement("button", { type: "button", className: "btn btn-primary", onClick: this.saveData }, "Save"))) } } class NotificationList extends React.Component { constructor(props) { super(props); _defineProperty(this, "getNotifications", () => { fetch("//" + location.host + "/api/notification", { method: 'get', headers: { "Authorization": localStorage.getItem('token') !== null ? 'Bearer ' + localStorage.getItem('token') : '' } }).then(response => { if (response.status === 200) { response.json().then(data => { this.setState({ list: data.notifications }, () => { this.updateUnseenNotificationCount() }) }) } }) }); _defineProperty(this, "addReceivedNotification", n => { let l = this.state.list; l.unshift(n); this.setState({ list: l }, () => { this.updateUnseenNotificationCount() }) }); _defineProperty(this, "updateUnseenNotificationCount", () => { let count = this.state.list.filter(t => !t.seen).length; if (count > 0) { $(".notificationcountcnt").append('<span style="top:8px; font-size:13px;" class="position-absolute start-100 translate-middle badge rounded-pill bg-danger">' + count + ' <span class="visually-hidden">unread messages</span></span>'); $(".notificationcount").html(count) } else { $(".notificationcountcnt").find(".rounded-pill").remove(); $(".notificationcount").html("") } }); _defineProperty(this, "onNotificationClick", id => { fetch("//" + location.host + "/api/notification/setseen/" + id, { method: 'get', headers: { "Authorization": localStorage.getItem('token') !== null ? 'Bearer ' + localStorage.getItem('token') : '' } }).then(data => { if (data.status === 200) { let url = ""; for (var k in this.state.list) { if (this.state.list[k].id == id) { this.state.list[k].seen = true; url = this.state.list[k].url; break } } this.setState({ list: this.state.list }, () => { location.href = this.getURL(url) }) } }) }); _defineProperty(this, "getURL", p => { if (p.startsWith("https://") || p.startsWith("http://") || p.startsWith("//") || p.startsWith("data:")) { return p } else { return '//' + location.host + '/' + p } }); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, bsstyle: '', message: '', myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), list: [] } } componentDidMount() { this.getNotifications() } render() { let items = []; for (let k in this.state.list) { let n = this.state.list[k]; items.push(React.createElement("div", { className: "row mt-2 mb-3 pointer", key: k }, React.createElement("div", { className: "col-2" }, React.createElement("img", { src: this.getURL(n.pic), className: "img-fluid rounded-3", "data-id": n.id, onClick: e => { this.onNotificationClick(e.target.getAttribute("data-id")) } })), React.createElement("div", { className: "col" }, React.createElement("div", { "data-id": n.id, onClick: e => { this.onNotificationClick(e.target.getAttribute("data-id")) }, className: "mb-2 text-primary " + (!n.seen ? "fw-semibold lh-base" : "lh-base") }, n.title), n.type === 4 ? React.createElement("span", { className: "text-primary me-2", style: { fontSize: "13px", fontWeight: "600" } }, "Follow Request") : null, React.createElement("span", { className: "text-primary", style: { fontSize: "13px" } }, dayjs(n.createDate).fromNow())), n.pic2 !== "" ? React.createElement("div", { className: "col-2" }, React.createElement("img", { src: this.getURL(n.pic2), className: "img-fluid rounded-1", "data-id": n.id, onClick: e => { this.onNotificationClick(e.target.getAttribute("data-id")) } })) : null)) } return React.createElement(React.Fragment, null, items) } } class AskPushNotification extends React.Component { constructor(props) { super(props); _defineProperty(this, "registerServiceWorker", () => { if ('serviceWorker' in navigator) { navigator.serviceWorker.getRegistration().then(reg => { this.reg = reg; if (Notification.permission === "granted") { this.setState({ permission: Notification.permission }, this.getSubscription) } else if (Notification.permission === "blocked" || Notification.permission === "denied") { this.setState({ mode: "blocked" }) } else { this.setState({ mode: "ask" }, () => { let lanopmd = localStorage.getItem("lastasknotpermissionmodaldate") == null ? null : Date.parse(localStorage.getItem("lastasknotpermissionmodaldate")); if (lanopmd === null || this.getDateDiff(Date.now(), lanopmd, "hours") > 1) { setTimeout(() => { this.setState({ showModal: true }, () => { localStorage.setItem("lastasknotpermissionmodaldate", Date.now()) }) }, 10000) } }) } }) } else { this.setState({ mode: "nosupport" }) } }); _defineProperty(this, "getDateDiff", (tar, src, difftype) => { const diffTime = Math.abs(tar - src); if (difftype === "milliseconds") { return diffTime } else if (difftype === "days") { return Math.ceil(diffTime / (1000 * 60 * 60 * 24)) } else if (difftype === "hours") { return Math.ceil(diffTime / (1000 * 60 * 60)) } else if (difftype === "minutes") { return Math.ceil(diffTime / (1000 * 60)) } else if (difftype === "seconds") { return Math.ceil(diffTime / 1000) } else { return diffTime } }); _defineProperty(this, "getSubscription", () => { this.reg.pushManager.getSubscription().then(sub => { if (sub === null) { this.reg.pushManager.subscribe({ userVisibleOnly: true, applicationServerKey: "BASWJ1rjpkuNXNGWd0eJ49ZO5y2jCIwU-XdfVqomefHFa1YrgKiYPncNtezdkNIhtloySBXcnWQbWrdYW4e7-p8" }).then(sub => { this.sendSubscriptionData(sub) }).catch(function (e) { console.error("Unable to subscribe to push", e); this.setState({ mode: "ask", bsstyle: 'error', message: "Unable to subscribe to push. Try again." }) }) } else { this.sendSubscriptionData(sub) } }) }); _defineProperty(this, "sendSubscriptionData", sub => { var frm = new FormData(); frm.append("endpoint", sub.endpoint); frm.append("p256dh", this.arrayBufferToBase64(sub.getKey("p256dh"))); frm.append("auth", this.arrayBufferToBase64(sub.getKey("auth"))); fetch("//" + location.host + "/api/Members/subscribenotification", { method: 'post', body: frm, headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(data => { this.setState({ mode: "done" }) }).catch(err => { this.setState({ mode: "ask", bsstyle: 'error', message: "Unable to contact server. No internet connection." }) }) }); _defineProperty(this, "requestNotificationAccess", () => { Notification.requestPermission().then(status => { if (status == "granted") { this.setState({ permission: status, noSupport: null }, this.getSubscription) } else if (status === "blocked" || status === "denied") { this.setState({ permission: status, mode: "ask" }) } else { this.setState({ permission: "", mode: "ask" }) } }) }); _defineProperty(this, "renderModal", message => { return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal d-block", tabIndex: "-1" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h1", { className: "modal-title fw-semibold fs-5" }, "Get Yocail Notifications"), React.createElement("button", { type: "button", className: "btn-close", onClick: () => { this.setState({ showModal: false }) } })), React.createElement("div", { className: "modal-body" }, message !== "" ? React.createElement("div", { className: "my-1 lh-sm" }, message) : null, React.createElement("button", { onClick: this.requestNotificationAccess, className: "btn btn-blue my-2" }, "Allow Notification"))))), React.createElement("div", { className: "modal-backdrop fade show" })) }); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.reg = null; this.state = { loading: false, loggedin: loggedin, bsstyle: '', message: '', myself: localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")), token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), permission: "", showModal: false, mode: "none" } } componentDidMount() { this.registerServiceWorker() } arrayBufferToBase64(buffer) { var binary = ''; var bytes = new Uint8Array(buffer); var len = bytes.byteLength; for (var i = 0; i < len; i += 1) { binary += String.fromCharCode(bytes[i]) } return window.btoa(binary) } render() { if (this.state.mode === "nosupport" || this.state.mode === "done") { return React.createElement(React.Fragment, null) } let message = React.createElement(React.Fragment, null, "Remain up to date with", React.createElement("br", null), " latest comments, reactions and content."); if (this.state.permission === "blocked") { message = React.createElement(React.Fragment, null, "You have blocked the notification.") } else if (this.state.permission === "denied") { message = React.createElement(React.Fragment, null, "Notification permission is denied.", React.createElement("br", null), " Please allow yocail browser notifications.") } if (this.state.mode === "ask") { if (this.state.showModal) { return React.createElement(React.Fragment, null, this.renderModal(message)) } else { return React.createElement("div", { className: "p-3 py-2 rounded-4 border my-3 bg-white text-center" }, React.createElement("h4", { className: "text-primary my-3 fs-24 ff-righteous" }, "Yocail Notifications"), React.createElement("div", { className: "my-2 lh-sm" }, message), React.createElement("button", { type: "button", onClick: this.requestNotificationAccess, className: "btn btn-blue my-2" }, "Get Notifications")) } } return React.createElement(React.Fragment, null) } } function transformMessage(text, id) { try { const reglink = /([^\S]|^)(((https?\:\/\/)|(www\.))(\S+))/gi; let match; var links = []; while ((match = reglink.exec(text)) !== null) { isthere = false; for (link of links) { if (link === match[0].trim()) { isthere = true; break } } if (!isthere) { links.push(match[0].trim()) } } for (l of links) { var imgreg = /(http(s?):)([/|.|\w|\s|-])*\.(?:jpg|gif|png|jpeg)/g; if (imgreg.test(l)) { let img = "<a href='" + l + "' target='_blank'><img src='" + l + "' className='img-fluid d-block mt-1 mb-1 img-thumbnail' style='width:300px; '/></a>"; text = text.replaceAllOccurence(l, img, true) } else { let anchor = "<a href='" + l + "' target='_blank'>" + l + "</a>"; text = text.replaceAllOccurence(l, anchor, true) } } } catch (err) { console.log(err) } return text } String.prototype.replaceAllOccurence = function (str1, str2, ignore) { return this.replace(new RegExp(str1.replace(/([\/\,\!\\\^\$\{\}\[\]\(\)\.\*\+\?\|\<\>\-\&])/g, "\\$&"), ignore ? "gi" : "g"), typeof str2 == "string" ? str2.replace(/\$/g, "$$$$") : str2) }; class Conversation extends React.Component { constructor(props) { super(props); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: null, bsstyle: '', message: '', selectedperson: null, token: localStorage.getItem("token") === null ? '' : localStorage.getItem("token"), searchtext: '', dummy: new Date(), showsearch: true, showprofilemodal: false, profiletoshow: null }; this.hubConnection = null; this.contactupdateinterval = null; this.contactlist = new Map(); this.loginHandler = this.loginHandler.bind(this); this.handleProfileSelect = this.handleProfileSelect.bind(this); this.validate = this.validate.bind(this); this.handleChange = this.handleChange.bind(this); this.handleSearchSubmit = this.handleSearchSubmit.bind(this); this.handleReceivedMessage = this.handleReceivedMessage.bind(this); this.handleUpdateParent = this.handleUpdateParent.bind(this); this.fetchContacts = this.fetchContacts.bind(this); this.handleShowSearch = this.handleShowSearch.bind(this); this.checkContactPulse = this.checkContactPulse.bind(this); this.search = this.search.bind(this); this.startHub = this.startHub.bind(this); this.handleProfileModalClose = this.handleProfileModalClose.bind(this); this.handleProfileItemClick = this.handleProfileItemClick.bind(this); this.setMessageStatus = this.setMessageStatus.bind(this); this.messageStatusEnum = { Pending: 0, Sent: 1, Received: 2, Seen: 3 } } componentDidMount() { this.contactlist = localStorage.getItem("contacts") !== null && this.state.loggedin ? new Map(JSON.parse(localStorage.getItem("contacts"))) : new Map(); if (localStorage.getItem("token") != null) { this.validate(localStorage.getItem("token")) } } componentWillUnmount() { if (this.contactupdateinterval !== null) { clearInterval(this.contactupdateinterval) } } loginHandler() { if (localStorage.getItem("token") != null) { this.validate(localStorage.getItem("token")) } } startHub() { this.hubConnection = new signalR.HubConnectionBuilder().withUrl("/personchathub", { accessTokenFactory: () => this.state.token }).withAutomaticReconnect().build(); this.hubConnection.start().then(() => { console.log('Hub Connection started!') }).catch(err => console.log('Error while establishing connection :(')); this.hubConnection.on('ReceiveTextMessage', (sender, text, timestamp, id) => { var mi = { id: id, sender: sender, text: text, timestamp: timestamp, status: 2 }; this.handleReceivedMessage(mi) }); this.hubConnection.on('ContactUpdated', dto => { if (this.contactlist.get(dto.id) !== undefined) { let p = this.contactlist.get(dto.id).person; if (p.name !== dto.name || p.activity !== dto.activity || p.city !== dto.city || p.state !== dto.state || p.country !== dto.country || p.pic !== dto.pic) { this.contactlist.get(dto.id).person = dto; this.setState({ dummy: Date.now() }) } } }); this.hubConnection.on('ContactSaved', dto => { if (this.contactlist.get(dto.id) === undefined) { this.contactlist.set(dto.person.id, dto); this.setState({ dummy: Date.now() }) } }) } compare_contact(a, b) { if (a[1].unseenMessageCount > b[1].unseenMessageCount) { return -1 } else if (a[1].person.activity !== 5 && b[1].person.activity === 5) { return -1 } else if (a[1].person.activity === 5 && b[1].person.activity !== 5) { return 1 } else { return 0 } } validate(t) { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Members/Validate', { method: 'get', headers: { 'Authorization': 'Bearer ' + t } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false, token: null }) } else if (response.status === 200) { response.json().then(data => { this.setState({ loggedin: true, loading: false, myself: data }) }); this.fetchContacts(); this.contactupdateinterval = setInterval(this.checkContactPulse, 5000); if (this.hubConnection === null) { this.startHub() } } }) } checkContactPulse() { for (const [key, contact] of this.contactlist.entries()) { var dt = new Date(contact.lastPulse); dt.setSeconds(dt.getSeconds() + 5); if (dt < Date.now()) { contact.activity = 5 } } } fetchContacts() { fetch('//' + window.location.host + '/api/Contacts/Member', { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 200) { response.json().then(data => { for (var k in data) { if (this.contactlist.get(data[k].person.id) === undefined) { this.contactlist.set(data[k].person.id.toLowerCase(), data[k]) } else { this.contactlist.set(data[k].person.id, data[k]) } if (data[k].messagesOnServer.length > 0) { var msgs = localStorage.getItem(data[k].person.id) !== null ? new Map(JSON.parse(localStorage.getItem(data[k].person.id))) : new Map(); for (var i in data[k].messagesOnServer) { if (msgs.get(data[k].messagesOnServer[i].id) === undefined) { var mi = { id: data[k].messagesOnServer[i].id, sender: data[k].messagesOnServer[i].sentBy.id, text: data[k].messagesOnServer[i].message, timestamp: data[k].messagesOnServer[i].sentDate, status: 2 }; msgs.set(mi.id, mi); this.setMessageStatus(mi.id, "SetReceived"); this.contactlist.get(data[k].person.id).recentMessageDate = mi.timestamp; if (this.contactlist.get(mi.sender.toLowerCase()).unseenMessageCount !== undefined) { this.contactlist.get(mi.sender.toLowerCase()).unseenMessageCount += 1 } else { this.contactlist.get(mi.sender.toLowerCase()).unseenMessageCount = 1 } } } localStorage.setItem(data[k].person.id, JSON.stringify(Array.from(msgs))) } } localStorage.setItem("contacts", JSON.stringify(Array.from(this.contactlist))); this.setState({ loading: false, dummy: new Date() }) }) } else { this.setState({ loading: false, message: 'Unable to search.', bsstyle: 'danger' }) } }) } search() { if (this.state.searchtext !== "") { this.setState({ loading: true }); fetch('//' + window.location.host + '/api/Members/search?s=' + this.state.searchtext, { method: 'get', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 200) { response.json().then(data => { this.contactlist = new Map(); for (var k in data) { this.contactlist.set(data[k].id, { id: 0, person: data[k], createDate: null, boloRelation: 3, recentMessage: '', recentMessageDate: '' }) } this.setState({ loading: false, dummy: new Date() }) }) } else { this.setState({ loading: false, message: 'Unable to search.', bsstyle: 'danger' }) } }) } } setMessageStatus(mid, action) { fetch('//' + window.location.host + '/api/ChatMessages/' + action + '?mid=' + mid, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }) } handleUpdateParent(action, data) { switch (action) { case "updatemessageseen": if (this.contactlist.get(data.id.toLowerCase()) !== undefined) { this.contactlist.get(data.id.toLowerCase()).unseenMessageCount = 0; localStorage.setItem("contacts", JSON.stringify(Array.from(this.contactlist))); this.setState({ dummy: Date.now() }) } break } } handleShowSearch(show) { if (show) { this.contactlist = localStorage.getItem("contacts") !== null && this.state.loggedin ? new Map(JSON.parse(localStorage.getItem("contacts"))) : new Map() } this.setState({ showsearch: show }) } handleProfileSelect(e) { this.setState({ selectedperson: e }) } handleProfileModalClose() { this.setState({ profiletoshow: null, showprofilemodal: false }) } handleProfileItemClick(e) { if (e !== null && this.contactlist.get(e) !== undefined) { this.setState({ profiletoshow: this.contactlist.get(e).person, showprofilemodal: true }) } } handleResultItemClick(e) { this.setState({ selectedperson: null }); if (this.state.loggedin) { if (e !== null && this.contactlist.get(e) !== undefined) { this.setState({ selectedperson: this.contactlist.get(e).person, showsearch: false, showprofilemodal: false }) } } else { alert("Please log in to gain full access.") } } handleSearchSubmit(e) { e.preventDefault(); this.search() } handleReceivedMessage(mi) { let usermsgs = localStorage.getItem(mi.sender.toLowerCase()); let usermsgmap = null; if (usermsgs !== null) { usermsgmap = new Map(JSON.parse(usermsgs)) } else { usermsgmap = new Map() } usermsgmap.set(mi.id, mi); localStorage.setItem(mi.sender.toLowerCase(), JSON.stringify(Array.from(usermsgmap.entries()))); this.setMessageStatus(mi.id, "SetReceived"); if (this.contactlist.get(mi.sender.toLowerCase()) !== undefined) { if (this.contactlist.get(mi.sender.toLowerCase()).unseenMessageCount !== undefined) { this.contactlist.get(mi.sender.toLowerCase()).unseenMessageCount += 1 } else { this.contactlist.get(mi.sender.toLowerCase()).unseenMessageCount = 1 } localStorage.setItem("contacts", JSON.stringify(Array.from(this.contactlist))); this.setState({ dummy: Date.now() }) } } handleChange(e) { switch (e.target.name) { case 'searchtext': if (e.target.value.trim() === "") { this.contactlist = localStorage.getItem("contacts") !== null && this.state.loggedin ? new Map(JSON.parse(localStorage.getItem("contacts"))) : new Map() } this.setState({ searchtext: e.target.value }); break; default: } } renderPeopleList() { const items = []; const hundred = { width: "100%" }; var sortedcontacts = new Map([...this.contactlist.entries()].sort(this.compare_contact)); for (const [key, contact] of sortedcontacts.entries()) { let obj = contact.person; if (this.state.myself === null || obj.id !== this.state.myself.id) { let thought = null; if (obj.thoughtStatus !== "") { thought = React.createElement("p", { className: "card-text" }, React.createElement("small", null, obj.thoughtStatus)) } let online = React.createElement("span", { className: "offline" }); if (obj.activity !== 5) { online = React.createElement("span", { className: "online" }) } let unseenmsgcount = contact.unseenMessageCount > 0 ? React.createElement("span", { className: "badge bg-primary" }, contact.unseenMessageCount) : null; let blocked = contact.boloRelation === BoloRelationType.Blocked ? React.createElement("span", { className: "badge bg-danger" }, "Blocked") : null; let pic = obj.pic !== "" ? React.createElement("img", { src: obj.pic, className: "card-img", alt: "" }) : null; items.push(React.createElement("div", { className: "card mb-1", style: { maxWidth: "400px", cursor: "pointer" }, onClick: () => this.handleResultItemClick(obj.id) }, React.createElement("div", { className: "card-body p-1", style: { position: "relative" } }, React.createElement("span", { style: { maxWidth: "30px", display: "inline-block", float: "right" } }, pic), React.createElement("h5", { className: "card-title" }, online, " ", obj.name, " ", unseenmsgcount, " ", blocked), thought))) } } if (items.length > 0) { return React.createElement("div", { className: "row searchresult p-1" }, items) } else { return React.createElement("div", { className: "row justify-content-center" }, React.createElement("div", { className: "col-12" }, React.createElement("div", { className: "alert alert-light", role: "alert" }, "No profiles to show here.", React.createElement("br", null), "Search for people based on their name, location, profession or gender etc. Here are some examples of search phrases.", React.createElement("ul", null, React.createElement("li", null, "Raj Kiran Singh"), React.createElement("li", null, "Raj From India"), React.createElement("li", null, "Software Developer in Noida"), React.createElement("li", null, "Women in India"), React.createElement("li", null, "Men in India"), React.createElement("li", null, "Mumbai Maharashtra"), React.createElement("li", null, "Delhi Mumbai Kolkatta"))))) } } render() { let loading = this.state.loading ? React.createElement("div", { className: "progress", style: { height: "5px" } }, React.createElement("div", { className: "progress-bar progress-bar-striped progress-bar-animated", role: "progressbar", "aria-valuenow": "75", "aria-valuemin": "0", "aria-valuemax": "100", style: { width: "100%" } })) : null; let personchatorprofile = null; if (this.state.selectedperson !== null) { personchatorprofile = React.createElement(PersonChat, { person: this.state.selectedperson, myself: this.state.myself, updateParent: this.handleUpdateParent, handleShowSearch: this.handleShowSearch }) } else if (this.state.profiletoshow !== null && this.state.showprofilemodal) { personchatorprofile = React.createElement("div", { className: "modal d-block", tabIndex: "-1", role: "dialog" }, React.createElement("div", { className: "modal-dialog modal-lg modal-dialog-scrollable" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title" }, "Profile"), React.createElement("button", { type: "button", className: "btn-close", "data-bs-dismiss": "modal", "aria-label": "Close", onClick: this.handleProfileModalClose })), React.createElement("div", { className: "modal-body" }, React.createElement(ViewProfile, { profile: this.state.profiletoshow }))))) } else { personchatorprofile = null; } let searchhtml = null; if (true || this.state.showsearch) { searchhtml = React.createElement("div", { className: "col-sm-4 col-md-3 searchcont bg-light" }, React.createElement("form", { onSubmit: this.handleSearchSubmit, className: "searchform1 form-inline mt-1 mb-1" }, React.createElement("div", { className: "input-group mb-1" }, React.createElement("input", { type: "search", className: "form-control", onChange: this.handleChange, title: "Find People by Name, Location, Profession etc.", name: "searchtext", id: "search-input", placeholder: "Find People by Name, Location, Profession etc", "aria-label": "Search for...", autoComplete: "off", spellCheck: "false", "aria-describedby": "button-addon2" }), React.createElement("button", { className: "btn", type: "submit", id: "button-addon2" }, React.createElement("img", { src: "/icons/search.svg", alt: "", width: "24", height: "24", title: "Search People" })))), this.renderPeopleList()) } return React.createElement(React.Fragment, null, React.createElement("div", { className: "container-fluid" }, React.createElement("div", { className: "row" }, searchhtml, loading, React.createElement("div", { className: "col-sm-8 col-md-9 p-0" }, personchatorprofile)))) } } class PersonChat extends React.Component { constructor(props) { super(props); _defineProperty(this, "scrollToBottom", () => { if (this.messagesEnd !== undefined && this.messagesEnd !== null) { this.messagesEnd.scrollIntoView() } }); let loggedin = true; let p = this.props.person; if (localStorage.getItem("token") === null) { loggedin = false } this.state = { loading: false, loggedin: loggedin, myself: this.props.myself !== undefined ? this.props.myself : null, bsstyle: '', message: '', person: p, filestoupload: [], token: localStorage.getItem("token") === null ? '' : localStorage.getItem("token"), textinput: '', dummy: Date.now(), videoCapable: !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia), peerCapable: SimplePeer.WEBRTC_SUPPORT, videoplaying: false, audioplaying: false, showemojimodal: false, peerconnected: false, profiletoshow: null, showprofilemodal: false }; this.mystream = null; this.otherstream = null; this.peer = null; this.checkPersonPulseInterval = null; this.messages = localStorage.getItem(p.id) !== null ? new Map(JSON.parse(localStorage.getItem(p.id))) : new Map(); this.hubConnection = null; this.freader = new FileReader(); this.handleChange = this.handleChange.bind(this); this.handleSend = this.handleSend.bind(this); this.sendTextMessage = this.sendTextMessage.bind(this); this.startHub = this.startHub.bind(this); this.createPeer = this.createPeer.bind(this); this.onPeerSignal = this.onPeerSignal.bind(this); this.onPeerConnect = this.onPeerConnect.bind(this); this.onPeerClose = this.onPeerClose.bind(this); this.onPeerError = this.onPeerError.bind(this); this.onPeerStream = this.onPeerStream.bind(this); this.handleVideoToggle = this.handleVideoToggle.bind(this); this.handleAudioToggle = this.handleAudioToggle.bind(this); this.getUserCam = this.getUserCam.bind(this); this.addMedia = this.addMedia.bind(this); this.userMediaError = this.userMediaError.bind(this); this.sayHello = this.sayHello.bind(this); this.answerHello = this.answerHello.bind(this); this.saysHello = this.saysHello.bind(this); this.updateReceivedMessageStatusAll = this.updateReceivedMessageStatusAll.bind(this); this.handleVideoCancel = this.handleVideoCancel.bind(this); this.closeVideo = this.closeVideo.bind(this); this.handleEmojiModal = this.handleEmojiModal.bind(this); this.handleEmojiSelect = this.handleEmojiSelect.bind(this); this.handlePhotoClick = this.handlePhotoClick.bind(this); this.handleDocClick = this.handleDocClick.bind(this); this.handleFileInput = this.handleFileInput.bind(this); this.handleFileChunkUpload = this.handleFileChunkUpload.bind(this); this.processFileUpload = this.processFileUpload.bind(this); this.uploadFile = this.uploadFile.bind(this); this.checkPersonPulse = this.checkPersonPulse.bind(this); this.attachMyStreamToVideo = this.attachMyStreamToVideo.bind(this); this.attachOtherStreamToVideo = this.attachOtherStreamToVideo.bind(this); this.hubConnectionClosed = this.hubConnectionClosed.bind(this); this.hubConnectionReconnecting = this.hubConnectionReconnecting.bind(this); this.hubConnectionReconnected = this.hubConnectionReconnected.bind(this); this.handleProfileModalClose = this.handleProfileModalClose.bind(this); this.handleProfileImageClick = this.handleProfileImageClick.bind(this); this.deleteMyMessagesFromServer = this.deleteMyMessagesFromServer.bind(this); this.updateTextInputHeight = this.updateTextInputHeight.bind(this); this.fetchSentMessages = this.fetchSentMessages.bind(this); this.setMessageStatus = this.setMessageStatus.bind(this); this.setContactRelation = this.setContactRelation.bind(this); this.handleAddToContacts = this.handleAddToContacts.bind(this); this.handleBlockandRemove = this.handleBlockandRemove.bind(this); this.messageStatusEnum = { Pending: 0, Sent: 1, Received: 2, Seen: 3 } } hubConnectionClosed(err) { console.log("Hub connection is closed"); } hubConnectionReconnecting(err) { console.log("Hub connection is reconnecting") } hubConnectionReconnected(connectionid) { console.log("Hub Connection Reconnected, Check for sent messages on server"); this.fetchSentMessages() } setContactRelation(relationship) { fetch('//' + window.location.host + '/api/Contacts/ChangeRelation/' + this.state.person.id + '?t=' + relationship, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 200) { response.json().then(data => { let contactlist = localStorage.getItem("contacts") !== null && this.state.loggedin ? new Map(JSON.parse(localStorage.getItem("contacts"))) : new Map(); if (contactlist.get(this.state.person.id) !== undefined) { contactlist.get(this.state.person.id).boloRelation = data.boloRelation; localStorage.setItem("contacts", JSON.stringify(Array.from(contactlist))) } if (data.boloRelation === BoloRelationType.Blocked) { try { this.props.handleShowSearch(true) } catch (err) { console.log("Error in blocking and removing contact. " + err) } } }) } }) } fetchSentMessages() { fetch('//' + window.location.host + '/api/ChatMessages/SentMessages?sender=' + this.state.person.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 200) { response.json().then(data => { console.log(data); for (var k in data) { if (!this.messages.has(data[k].id)) { var temp = data[k]; var mi = { id: temp.id, sender: temp.sentBy.id, text: temp.message, timestamp: temp.sentDate, status: this.messageStatusEnum.Received }; this.messages.set(mi.id, mi); this.setMessageStatus(mi.id, "SetReceived") } } this.setState({ dummy: Date.now() }, () => { localStorage.setItem(this.state.person.id.toLowerCase(), JSON.stringify(Array.from(this.messages.entries()))) }) }) } }) } fetchMessages() { fetch('//' + window.location.host + '/api/ChatMessages?sender=' + this.state.person.id, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }).then(response => { if (response.status === 200) { response.json().then(data => { console.log(data); this.messages = new Map(); for (var k in data) { var temp = data[k]; var mi = { id: temp.id, sender: temp.sentBy.id, text: temp.message, timestamp: temp.sentDate, status: this.messageStatusEnum.Received }; this.messages.set(mi.id, mi); if (temp.status != this.messageStatusEnum.Received) { this.setMessageStatus(mi.id, "SetReceived") } } this.setState({ dummy: Date.now() }, () => { localStorage.setItem(this.state.person.id.toLowerCase(), JSON.stringify(Array.from(this.messages.entries()))); this.scrollToBottom() }); this.updateReceivedMessageStatusAll() }) } }) } setMessageStatus(mid, action) { fetch('//' + window.location.host + '/api/ChatMessages/' + action + '?mid=' + mid, { method: 'get', headers: { 'Authorization': 'Bearer ' + this.state.token } }) } startHub() { this.hubConnection = new signalR.HubConnectionBuilder().withUrl("/personchathub", { accessTokenFactory: () => this.state.token }).withAutomaticReconnect().build(); this.hubConnection.start().then(() => { console.log('Hub Connection started!'); this.sayHello() }).catch(err => console.log('Error while establishing connection :(')); this.hubConnection.onclose(this.hubConnectionClosed); this.hubConnection.onreconnecting(this.hubConnectionReconnecting); this.hubConnection.onreconnected(this.hubConnectionReconnected); this.hubConnection.on('ReceiveTextMessage', (sender, text, timestamp, id) => { this.receiveTextMessage(sender, text, timestamp, id) }); this.hubConnection.on('MessageSent', (receiver, text, timestamp, id) => { var mi = { id: id, sender: this.state.myself.id, text: text, timestamp: timestamp, status: this.messageStatusEnum.Sent }; if (receiver.toLowerCase() === this.state.person.id.toLowerCase()) { this.messages.set(id, mi); this.setState({ dummy: Date.now() }, () => { localStorage.setItem(this.state.person.id.toLowerCase(), JSON.stringify(Array.from(this.messages.entries()))) }); this.scrollToBottom() } }); this.hubConnection.on('MessageStatus', (messageid, receiver, status) => { if (receiver.toLowerCase() === this.state.person.id.toLowerCase() && this.messages.get(messageid) !== undefined) { this.messages.get(messageid).status = status; this.setState({ dummy: Date.now() }, () => { localStorage.setItem(this.state.person.id.toLowerCase(), JSON.stringify(Array.from(this.messages.entries()))) }) } }); this.hubConnection.on('ContactSaved', cdto => { let contactmap = new Map(); if (localStorage.getItem("contacts") !== null) { contactmap = new Map(JSON.parse(localStorage.getItem("contacts"))) } contactmap.set(cdto.person.id, cdto); localStorage.setItem("contacts", JSON.stringify(Array.from(contactmap))) }); this.hubConnection.on('ReceiveSignal', (sender, data) => { if (this.peer !== null) { this.peer.signal(data) } }); this.hubConnection.on('SaysHello', caller => { console.log("SaysHello By : " + caller); this.saysHello(caller) }); this.hubConnection.on('AnswerHello', responder => { console.log("Call Answered By : " + responder); this.answerHello(responder) }); this.hubConnection.on('EndPeer', id => { if (this.state.person.id.toLowerCase() === id.toLowerCase()) { if (this.peer !== null) { this.peer.destroy(); this.peer = null; console.log("EndPeer By : " + id) } } }); this.hubConnection.on('ContactUpdated', dto => { if (this.state.person.id === dto.id) { this.setState({ person: dto }) } }) } receiveTextMessage(sender, text, timestamp, id) { var mi = { id: id, sender: sender, text: text, timestamp: timestamp, status: this.messageStatusEnum.Seen }; if (sender.toLowerCase() === this.state.person.id.toLowerCase()) { this.messages.set(id, mi); this.setState({ dummy: Date.now() }, () => { localStorage.setItem(this.state.person.id.toLowerCase(), JSON.stringify(Array.from(this.messages.entries()))) }); this.scrollToBottom(); this.props.updateParent("updatemessageseen", { id: sender }); this.playmsgbeep(); this.setMessageStatus(mi.id, "SetSeen") } } sayHello() { this.hubConnection.invoke("sayHello", this.state.myself.id.toLowerCase(), this.state.person.id.toLowerCase()).catch(err => { console.log("Unable to say hello."); console.error(err) }) } saysHello(caller) { if (caller.toLowerCase() === this.state.person.id.toLowerCase()) { this.createPeer(true); this.hubConnection.invoke("AnswerHello", caller, this.state.myself.id.toLowerCase()) } } answerHello(responder) { if (this.state.person.id === responder.toLowerCase()) { this.createPeer(false) } } sendTextMessage(text, sendto) { if (text.trim() !== "") { const fd = new FormData(); fd.set("Text", text); fd.set("SentTo", sendto); fd.set("PublicID", "00000000-0000-0000-0000-000000000000"); fetch('//' + window.location.host + '/api/ChatMessages', { method: 'post', body: fd, headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 401) { localStorage.removeItem("token"); this.setState({ loggedin: false, loading: false }) } else if (response.status === 200) { response.json().then(data => { console.log(data); var mi = { id: data.id, sender: this.state.myself.id, text: data.message, timestamp: data.sentDate, status: this.messageStatusEnum.Sent }; this.messages.set(mi.id, mi); this.setState({ dummy: Date.now() }, () => { localStorage.setItem(this.state.person.id.toLowerCase(), JSON.stringify(Array.from(this.messages.entries()))); this.updateTextInputHeight() }); this.scrollToBottom() }) } else { this.setState({ loading: false, message: 'Unable to send message', bsstyle: 'danger' }) } }); if (this.detectXtralargeScreen()) { this.textinput.focus() } } } checkPersonPulse() { var dt = new Date(this.state.person.lastPulse); dt.setSeconds(dt.getSeconds() + 5); if (dt < Date.now()) { let p = this.state.person; p.activity = 5; this.setState({ person: p }) } } detectEdgeorIE() { const isIE = false || !!document.documentMode; const isEdge = !isIE && !!window.StyleMedia; return isIE || isEdge } detectXtralargeScreen() { return window.matchMedia("(min-width: 1024px)").matches } createPeer(initiater) { let configuration = { 'iceServers': [{ 'urls': 'stun:stun.services.mozilla.com' }, { 'urls': 'stun:stun.l.google.com:19302' }] }; if (window.location.hostname.toLowerCase() === "localhost") { configuration = {} } console.log("newuserarrived stream : "); console.log(this.mystream); this.peer = new SimplePeer({ initiator: initiater, config: configuration, stream: this.mystream }); this.peer.on("error", this.onPeerError); this.peer.on("signal", this.onPeerSignal); this.peer.on("connect", this.onPeerConnect); this.peer.on("close", this.onPeerClose); this.peer.on("stream", stream => { this.onPeerStream(stream) }); this.peer.on('data', data => { console.log('got a message from peer1: ' + data) }) } onPeerSignal(data) { this.hubConnection.invoke('SendSignal', data, this.state.person.id, this.state.myself.id).catch(err => console.error('SendSignal ' + err)) } onPeerConnect() { this.peer.send(this.state.myself.name + ' peer connected.') } onPeerError(err) { console.log(this.state.person.name + " peer gave error. "); console.error(err) } onPeerClose() { console.log("Peer Closed"); this.hubConnection.invoke("EndPeer", this.state.myself.id.toLowerCase(), this.state.person.id.toLowerCase()).catch(err => console.error('Endpeer ' + err)) } onPeerStream(stream) { console.log("received a stream"); console.log(stream); this.otherstream = stream; this.setState({ dummydate: Date.now() }, () => { let v = document.getElementById('othervideo'); if (v !== null) { if ('srcObject' in v) { v.srcObject = this.otherstream } else { v.src = window.URL.createObjectURL(this.otherstream); } v.muted = false; v.volume = 0.8; v.play() } }) } playmsgbeep() { try { let cb = document.getElementById("chatbeep"); if (cb != null) { cb.currentTime = 0; cb.volume = 0.15; cb.muted = false; cb.play() } } catch (err) { console.error(err) } } getUserCam() { var videoconst = true; var constraints = { audio: true, video: videoconst }; if (navigator.mediaDevices.getUserMedia) { navigator.mediaDevices.getUserMedia(constraints).then(this.addMedia).catch(this.userMediaError); } } addMedia(stream) { this.mystream = stream; this.setState({ dummydate: new Date() }, () => { this.attachMyStreamToVideo() }); if (this.mystream.getVideoTracks().length > 0) { this.mystream.getVideoTracks()[0].enabled = this.state.videoplaying } if (this.mystream.getAudioTracks().length > 0) { this.mystream.getAudioTracks()[0].enabled = this.state.audioplaying } if (this.peer !== null) { this.peer.addStream(this.mystream) } } attachMyStreamToVideo() { if (this.state.videoplaying || this.state.audioplaying) { var video = document.getElementById('myvideo'); if (video !== null) { video.srcObject = this.mystream; video.onloadedmetadata = function (e) { if (video !== undefined) { video.volume = 0; video.muted = 0; video.play() } } } } } attachOtherStreamToVideo() { var video = document.getElementById('othervideo'); if (video !== null) { video.srcObject = this.otherstream; video.onloadedmetadata = function (e) { if (video !== undefined) { video.volume = 0; video.muted = 0; video.play() } } } } userMediaError(err) { console.log("Unable to access user media"); console.error(err); if (err.name !== undefined && err.name !== null) { if (err.name.toLowerCase() === "notallowederror") { alert("You have specifically denied access to camera and microphone. Please check browser title or address bar to see the notification.") } else { alert("Unable to access camera.") } } this.setState({ videoplaying: false, audioplaying: false }); } closeVideo() { if (this.mystream !== null) { } } showMessageStatus(status) { switch (status) { case this.messageStatusEnum.Received: return "Received"; case this.messageStatusEnum.Sent: return "Sent"; case this.messageStatusEnum.Seen: return "Seen"; default: return "" } } updateReceivedMessageStatusAll() { for (const [key, mi] of this.messages.entries()) { if (mi.sender !== this.state.myself.id && mi.status !== this.messageStatusEnum.Seen) { this.messages.get(key).status = this.messageStatusEnum.Seen; this.setMessageStatus(mi.id, "SetSeen") } } localStorage.setItem(this.state.person.id.toLowerCase(), JSON.stringify(Array.from(this.messages.entries()))) } deleteMyMessagesFromServer() { fetch('//' + window.location.host + '/api/chatmessages/MemberMessages/' + this.state.person.id, { method: 'post', headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 200) { console.log("messages deleted from server") } }) } processFileUpload() { let m = null; if (this.state.filestoupload.length > 0) { m = this.state.filestoupload[0] } if (m !== null) { this.freader = new FileReader(); this.freader.uploadFile = this.uploadFile; this.uploadFile(this.state.id, m, 0) } } uploadFile(meetingid, msg, start) { const slice_size = 1000 * 1024; var next_slice = start + slice_size + 1; var blob = msg.filedata.slice(start, next_slice); var mid = meetingid; this.freader.onloadend = event => { if (event.target.readyState !== FileReader.DONE) { return } this.handleFileChunkUpload(event.target.result, msg, start, next_slice, slice_size) }; this.freader.readAsDataURL(blob) } updateTextInputHeight() { if (this.state.textinput !== "") { const computed = window.getComputedStyle(this.textinput); const height = parseInt(computed.getPropertyValue('border-top-width'), 10) + parseInt(computed.getPropertyValue('padding-top'), 10) + this.textinput.scrollHeight + parseInt(computed.getPropertyValue('padding-bottom'), 10) + parseInt(computed.getPropertyValue('border-bottom-width'), 10); this.textinput.style.height = `${this.textinput.scrollHeight}px` } else { this.textinput.style.height = "40px"; this.textinput.style.minHeight = "40px" } } handleFileChunkUpload(data, msg, start, next_slice, slice_size) { const fd = new FormData(); fd.set("f", data); fd.set("filename", msg.name); fd.set("gfn", false); fetch('//' + window.location.host + '/api/members/uploadfile', { method: 'post', body: fd, headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }).then(response => { if (response.status === 200) { response.json().then(data => { msg.serverfname = data.filename; let flist = this.state.filestoupload; for (var i = 0; flist.length > i; i += 1) { let cfile = flist[i]; if (cfile.name === msg.name) { var size_done = start + slice_size; msg.progresspercent = Math.floor(size_done / msg.filedata.size * 100); cfile.progresspercent = msg.progresspercent; if (next_slice > msg.filedata.size) { flist.splice(i, 1); msg.filedata = null; this.sendTextMessage('https://' + window.location.host + '/data/' + this.state.myself.id + '/' + msg.serverfname, this.state.person.id); this.setState({ filestoupload: flist }); this.generateVideoThumbnail(msg.serverfname); this.processFileUpload() } else { this.setState({ filestoupload: flist }); this.uploadFile(this.state.id, msg, next_slice) } break } } }) } }) } generateVideoThumbnail(filename) { fetch('//' + window.location.host + '/api/members/GenerateThumbnail?filename=' + filename, { headers: { 'Authorization': 'Bearer ' + localStorage.getItem("token") } }) } handlePhotoClick(e) { e.preventDefault(); if (!this.state.loggedin) { alert("Log in to use this feature. Share files upto 300 MB in size.") } else { this.fileinput.click() } } handleDocClick(e) { e.preventDefault(); if (!this.state.loggedin) { alert("Log in to use this feature. Share files upto 300 MB in size.") } else { this.fileinput.click() } } handleFileUploadCancel(event, fname) { let flist = this.state.filestoupload; for (var i = 0; flist.length > i; i += 1) { let cfile = flist[i]; if (cfile.name === fname) { flist.splice(i, 1); this.setState({ filestoupload: flist }); break } } } handleFileInput(e) { if (this.fileinput.files.length > 10) { alert("Only 10 files at a time."); return } for (var i = 0; i < this.fileinput.files.length; i += 1) { if ((this.fileinput.files[i].size / 1048576).toFixed(1) > 300) { alert("File size cannot exceed 300 MB"); return } } let flist = this.state.filestoupload; for (var i = 0; i < this.fileinput.files.length; i += 1) { let f = { name: this.fileinput.files[i].name, filedata: this.fileinput.files[i], progresspercent: 0, serverfname: "", cancel: false }; flist.push(f) } this.setState({ filestoupload: flist }); this.fileinput.value = ""; this.processFileUpload() } handleEmojiSelect(value) { this.setState({ textinput: this.state.textinput + value }); this.textinput.focus() } handleEmojiModal() { this.setState({ showemojimodal: !this.state.showemojimodal }) } handleVideoCancel() { this.closeVideo(); this.hubConnection.invoke("EndCall", this.state.myself.id.toLowerCase(), this.state.person.id.toLowerCase()).catch(err => { console.log("Unable to end call."); console.error(err) }) } handleChange(e) { switch (e.target.name) { case 'textinput': this.setState({ textinput: e.target.value }, () => { this.updateTextInputHeight() }); break; default: } } handleSend(e) { e.preventDefault(); this.sendTextMessage(this.state.textinput, this.state.person.id); this.setState({ textinput: '' }) } handleVideoToggle(e) { if (this.mystream !== null) { if (this.mystream.getVideoTracks().length > 0) { this.mystream.getVideoTracks()[0].enabled = !this.state.videoplaying; this.setState({ videoplaying: !this.state.videoplaying }, () => { this.attachMyStreamToVideo() }) } } else { this.setState({ videoplaying: true, audioplaying: true }); this.getUserCam() } } handleAudioToggle(e) { if (this.mystream !== null) { if (this.mystream.getAudioTracks().length > 0) { this.mystream.getAudioTracks()[0].enabled = !this.state.audioplaying; this.setState({ audioplaying: !this.state.audioplaying }, () => { this.attachMyStreamToVideo() }) } } else { this.getUserCam(); this.setState({ audioplaying: true }) } } handleProfileModalClose() { this.setState({ profiletoshow: null, showprofilemodal: false }) } handleProfileImageClick(e) { this.setState({ profiletoshow: this.state.person, showprofilemodal: true }) } handleContactRelationshipChange(e) { } handleAddToContacts() { this.setContactRelation(BoloRelationType.Confirmed) } handleBlockandRemove() { this.setContactRelation(BoloRelationType.Blocked) } componentDidMount() { this.fetchMessages(); this.startHub(); this.checkPersonPulseInterval = setInterval(this.checkPersonPulse, 5000); let clist = localStorage.getItem("contacts") !== null ? new Map(JSON.parse(localStorage.getItem("contacts"))) : new Map(); if (clist.get(this.state.person.id.toLowerCase()) !== undefined) { clist.get(this.state.person.id.toLowerCase()).unseenMessageCount = 0 } localStorage.setItem("contacts", JSON.stringify(Array.from(clist))) } componentDidUpdate(prevProps, prevState) { if (prevProps.person.id !== this.props.person.id) { this.messages = localStorage.getItem(this.props.person.id) !== null ? new Map(JSON.parse(localStorage.getItem(this.props.person.id))) : new Map(); this.setState({ dummy: Date.now(), person: this.props.person }, () => { this.fetchMessages(); this.updateReceivedMessageStatusAll() }); this.props.updateParent("updatemessageseen", { id: this.props.person.id }); this.scrollToBottom() } } componentWillUnmount() { if (this.peer !== null) { this.peer.destroy(); this.peer = null } this.hubConnection.stop(); if (this.checkPersonPulseInterval !== null) { clearInterval(this.checkPersonPulseInterval) } } getFileExtensionBasedName(filename) { return filename.substring(61, filename.length) } renderEmojiModal() { if (this.state.showemojimodal) { return React.createElement("tr", null, React.createElement("td", { colSpan: "2" }, React.createElement(Emoji, { onSelect: this.handleEmojiSelect }))) } else { return null } } renderVideoCallModal() { return React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, React.createElement("h4", null, "Waiting For ", this.state.person.name), React.createElement("button", { type: "button", className: "btn btn-danger btn-lg", onClick: this.handleVideoCancel }, "Cancel"))))) } renderLinksInMessage(msg) { var tempmid = msg.id; if (msg.text.startsWith('https://' + window.location.host + '/data/')) { if (msg.text.toLowerCase().endsWith(".jpg") || msg.text.toLowerCase().endsWith(".jpeg") || msg.text.toLowerCase().endsWith(".png") || msg.text.toLowerCase().endsWith(".gif") || msg.text.toLowerCase().endsWith(".bmp")) { return React.createElement("span", { id: tempmid }, React.createElement("img", { src: msg.text, className: "img-fluid", style: { maxWidth: "260px" } })) } else if (msg.text.toLowerCase().endsWith(".mp3")) { return React.createElement("span", { id: tempmid }, React.createElement("audio", { src: msg.text, controls: true, playsInline: true, style: { maxWidth: "260px" } })) } else if (msg.text.toLowerCase().endsWith(".ogg") || msg.text.toLowerCase().endsWith(".mp4") || msg.text.toLowerCase().endsWith(".webm") || msg.text.toLowerCase().endsWith(".mov")) { return React.createElement("span", { id: tempmid }, React.createElement("video", { src: msg.text.toLowerCase(), controls: true, playsInline: true, style: { maxWidth: "260px" } })) } else { return React.createElement("span", { id: tempmid }, React.createElement("a", { href: msg.text, target: "_blank" }, this.getFileExtensionBasedName(msg.text.toLowerCase()))) } } else if ((msg.text.startsWith('https://') || msg.text.startsWith('http://')) && msg.text.trim().indexOf(" ") === -1) { return React.createElement("span", { id: tempmid }, React.createElement("a", { href: msg.text.trim(), target: "_blank" }, msg.text)) } else { return React.createElement("span", { id: tempmid }, msg.text.split('\n').map((item, key) => { return React.createElement(React.Fragment, { key: key }, item, React.createElement("br", null)) })) } } renderContactRelationChange() { let html = null; let contactlist = localStorage.getItem("contacts") !== null && this.state.loggedin ? new Map(JSON.parse(localStorage.getItem("contacts"))) : new Map(); let style = { margin: "0 auto", maxWidth: "80%", width: "25rem", padding: "15px" }; if (contactlist.get(this.state.person.id) !== undefined) { if (contactlist.get(this.state.person.id).boloRelation === BoloRelationType.Temporary) { html = React.createElement("li", { style: style }, React.createElement("div", { className: "card bg-light mb-3" }, React.createElement("div", { className: "card-header" }, "New Contact"), React.createElement("div", { className: "card-body" }, React.createElement("h5", { className: "card-title" }, "Take Action Here"), React.createElement("p", { className: "card-text" }, "This person is not your contact list."), React.createElement("button", { className: "btn btn-success me-2", onClick: this.handleAddToContacts }, "Add to Contacts"), React.createElement("button", { className: "btn btn-outline-dark", onClick: this.handleBlockandRemove }, "Block and Remove")))) } } return html } renderMessages() { let sentlistyle = { display: "block", textAlign: 'right' }; let reclistyle = { display: "block", textAlign: 'left' }; let sentmessagestyle = { marginBottom: "1px", maxWidth: "100%", position: "relative", fontSize: "1.2rem", borderRadius: "0rem", wordWrap: "break-word" }; let recmessagestyle = { marginBottom: "1px", maxWidth: "100%", position: "relative", borderRadius: "0rem", fontSize: "1.2rem", wordWrap: "break-word" }; const items = []; for (const [key, obj] of this.messages.entries()) { if (obj.sender === this.state.myself.id) { items.push(React.createElement("li", { style: sentlistyle, key: key }, React.createElement("div", { style: sentmessagestyle, className: "border-end border-5 border-primary m-1 pe-3 py-2" }, this.renderLinksInMessage(obj), React.createElement("span", { className: "d-block" }, React.createElement("small", { style: { fontSize: "0.75rem" } }, moment.utc(obj.timestamp).local().fromNow(true)), " ", React.createElement("small", { style: { fontSize: "0.75rem" } }, this.showMessageStatus(obj.status)))))) } else { items.push(React.createElement("li", { style: reclistyle, key: key }, React.createElement("div", { style: recmessagestyle, className: "border-start border-5 border-success m-1 ps-3 py-2" }, this.renderLinksInMessage(obj), React.createElement("span", { className: "d-block" }, React.createElement("small", { style: { fontSize: "0.75rem" } }, moment.utc(obj.timestamp).local().fromNow(true)))))) } } return React.createElement(React.Fragment, null, items, this.renderContactRelationChange(), React.createElement("li", { style: { float: "left", clear: "both" }, ref: el => { this.messagesEnd = el } })) } renderVideo() { let myvideoclassname = "full"; let othervideo = null, myvideo = null; let hasstream = false; if (this.otherstream !== null) { for (var i = 0; i < this.otherstream.getTracks().length; i += 1) { if (this.otherstream.getTracks()[i].enabled) { hasstream = true; break } } if (hasstream) { myvideoclassname = "docked"; othervideo = React.createElement("video", { id: "othervideo", muted: "muted", volume: "0", playsInline: true, style: { maxWidth: "100%", maxHeight: "70vh" } }) } } if (this.mystream !== null) { hasstream = false; for (var i = 0; i < this.mystream.getTracks().length; i += 1) { if (this.mystream.getTracks()[i].enabled) { hasstream = true; break } } if (hasstream) { myvideo = React.createElement("video", { id: "myvideo", className: myvideoclassname, muted: "muted", volume: "0", playsInline: true, style: { maxWidth: "100%", maxHeight: "70vh" } }) } } if (othervideo !== null || myvideo !== null) { return React.createElement("div", { className: "col col-sm-7 videochatcolumn", style: { padding: "0px 5px", textAlign: "center" } }, othervideo, myvideo) } else { return null } } renderFileUploadProcessModal() { let items = []; for (var i = 0; i < this.state.filestoupload.length; i += 1) { let f = this.state.filestoupload[i]; items.push(React.createElement("div", { className: "row", key: i }, React.createElement("div", { className: "col-9 col-xl-10 col-sm-10" }, React.createElement("div", { className: "progress" }, React.createElement("div", { className: "progress-bar progress-bar-animated", role: "progressbar", "aria-valuenow": f.progresspercent, "aria-valuemin": "0", "aria-valuemax": "100", style: { width: f.progresspercent + "%" } }))), React.createElement("div", { className: "col-3 col-xl-2 col-sm-2" }, React.createElement("button", { type: "button", className: "btn btn-sm btn-light", onClick: e => this.handleFileUploadCancel(e, f.name) }, "Cancel")))) } if (this.state.filestoupload.length > 0) { return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal d-block", "data-backdrop": "static", "data-keyboard": "false", tabIndex: "-1", role: "dialog", "aria-labelledby": "staticBackdropLabel", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-body" }, items))))) } else { return null } } render() { if (this.messages.length == 0) { profile = React.createElement(ViewProfile, { profile: this.state.person }) } let pic = React.createElement("img", { src: "/images/nopic.jpg", className: "mx-auto d-block img-fluid", alt: "No Pic", style: { cursor: "pointer" }, onClick: this.handleProfileImageClick }); if (this.state.person !== null) { if (this.state.person.pic !== "") { pic = React.createElement("img", { src: this.state.person.pic, className: "mx-auto d-block img-fluid", alt: "", style: { cursor: "pointer" }, onClick: this.handleProfileImageClick }) } } let personprofile = null; if (this.state.profiletoshow !== null && this.state.showprofilemodal) { personprofile = React.createElement("div", { className: "modal d-block", tabIndex: "-1", role: "dialog" }, React.createElement("div", { className: "modal-dialog modal-dialog-scrollable" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h5", { className: "modal-title" }, "Profile"), React.createElement("button", { type: "button", className: "btn-close", "data-bs-dismiss": "modal", "aria-label": "Close", onClick: this.handleProfileModalClose })), React.createElement("div", { className: "modal-body" }, React.createElement(ViewProfile, { profile: this.state.person }))))) } let videotoggleele = this.state.videoplaying ? React.createElement("button", { type: "button", className: "btn btn-sm btn-primary ms-1 me-1 videoctrl", onClick: this.handleVideoToggle, onMouseDown: e => e.stopPropagation() }, React.createElement("img", { src: "/icons/video.svg", alt: "", width: "24", height: "24", title: "Video On" })) : React.createElement("button", { type: "button", className: "btn btn-secondary btn-sm ms-1 me-1 videoctrl", onClick: this.handleVideoToggle, onMouseDown: e => e.stopPropagation() }, React.createElement("img", { src: "/icons/video.svg", alt: "", width: "24", height: "24", title: "Video Off" })); let audiotoggleele = this.state.audioplaying ? React.createElement("button", { type: "button", className: "btn btn-primary btn-sm ms-1 me-1 audioctrl", onClick: this.handleAudioToggle, onMouseDown: e => e.stopPropagation() }, React.createElement("img", { src: "/icons/mic.svg", alt: "", width: "24", height: "24", title: "Microphone On" })) : React.createElement("button", { type: "button", className: "btn btn-secondary btn-sm ms-1 me-1 audioctrl", onClick: this.handleAudioToggle, onMouseDown: e => e.stopPropagation() }, React.createElement("img", { src: "/icons/mic.svg", alt: "", width: "24", height: "24", title: "Microphone Off" })); if (this.detectEdgeorIE()) { audiotoggleele = null; videotoggleele = null } let online = React.createElement("span", { className: "offline" }); if (this.state.person.activity !== 5) { online = React.createElement("span", { className: "online" }) } let videohtml = this.renderVideo(); let chatmsgcontstyle = {}; if (videohtml === null && this.detectXtralargeScreen()) { chatmsgcontstyle = { padding: "0px" } } return React.createElement(React.Fragment, null, React.createElement("div", { className: "personalchatcont" }, React.createElement("table", { className: "chatpersoninfocont sticky-top" }, React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", { width: "40px", className: "p-1" }, pic), React.createElement("td", { className: "noPadding" }, React.createElement("h5", { className: "ml-1", style: { maxWidth: "250px", overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" }, title: this.state.person.name }, online, " ", this.state.person.name)), React.createElement("td", { width: "50px", style: { paddingRight: "10px" } }, React.createElement(BlockContact, { myself: this.state.myself, person: this.state.person, onRelationshipChange: this.handleContactRelationshipChange })), React.createElement("td", { width: "37px" }, videotoggleele), React.createElement("td", { width: "37px" }, audiotoggleele)))), React.createElement("div", { className: "videochatcont " }, videohtml, React.createElement("div", { className: "chatmsgcont", style: chatmsgcontstyle }, React.createElement("ul", { className: "list-unstyled" }, this.renderMessages()))), React.createElement("div", { style: { position: "absolute", bottom: "0px", width: "100%" } }, React.createElement("form", { onSubmit: this.handleSend }, React.createElement("table", { style: { "width": "100%", backgroundColor: "#fff" } }, React.createElement("tbody", null, React.createElement("tr", null, React.createElement("td", { style: { width: "37px", paddingLeft: "5px" } }, React.createElement("div", { className: "dropdown" }, React.createElement("a", { className: "btn btn-light btn-sm dropdown-toggle", href: "#", role: "button", id: "navbarDropdown", "data-bs-toggle": "dropdown", "aria-haspopup": "true", "aria-expanded": "false" }, React.createElement("img", { src: "/icons/file-plus.svg", alt: "", width: "24", height: "24", title: "Share Files" })), React.createElement("ul", { className: "dropdown-menu dropdown-menu-right", "aria-labelledby": "navbarDropdown" }, React.createElement("li", null, React.createElement("a", { className: "dropdown-item", href: "#", onClick: this.handlePhotoClick, title: "20 Files at a time, max files size 10 MB" }, "Photos and Videos")), React.createElement("li", null, React.createElement("a", { className: "dropdown-item", href: "#", onClick: this.handleDocClick, title: "20 Files at a time, max files size 10 MB" }, "Documents"), React.createElement("input", { type: "file", style: { display: "none" }, ref: el => { this.fileinput = el }, accept: ".html,.htm,.doc,.pdf,.xls,.xlsx,.docx,audio/*,video/*,image/*", onChange: this.handleFileInput, multiple: "multiple" }))))), React.createElement("td", null, React.createElement("textarea", { ref: input => { this.textinput = input }, name: "textinput", autoComplete: "off", accessKey: "t", title: "Keyboard Shortcut ALT + t", className: "form-control", value: this.state.textinput, onChange: this.handleChange, width: "100%", style: { height: "40px", overflow: "hidden", resize: "none", maxHeight: "200px" } })), React.createElement("td", { style: { "width": "100px" } }, React.createElement("button", { type: "button", className: this.state.showemojimodal ? "btn btn-sm btn-warning ms-1" : "btn btn-sm btn-light ms-1", onClick: this.handleEmojiModal, accessKey: "o", title: "Keyboard Shortcut ALT + o" }, React.createElement("img", { src: "/icons/smile.svg", alt: "", width: "24", height: "24" })), React.createElement("button", { type: "submit", id: "msgsubmit", className: "btn btn-sm btn-dark ms-1", title: "Send Message", title: "Keyboard Shortcut ALT + s", accessKey: "s" }, React.createElement("img", { src: "/icons/send.svg", alt: "", width: "24", height: "24" })))), this.renderEmojiModal()))))), personprofile, this.renderFileUploadProcessModal(), React.createElement("audio", { id: "chatbeep", muted: "muted", volume: "0" }, React.createElement("source", { src: "/media/swiftly.mp3" }), React.createElement("source", { src: "/media/swiftly.m4r" }), React.createElement("source", { src: "/media/swiftly.ogg" }))) } } class SendInvite extends React.Component { constructor(props) { super(props); _defineProperty(this, "removeSuccessMessage", () => { this.setState({ success: "" }) }); _defineProperty(this, "copyInviteText", () => { if (this.textarea !== null) { this.textarea.select(); this.textarea.setSelectionRange(0, 99999); } navigator.clipboard.writeText(this.state.text); this.setState({ success: "Message copied to clibboard." }, () => { setTimeout(this.removeSuccessMessage, 2000) }) }); let loggedin = true; if (localStorage.getItem("token") === null) { loggedin = false } this.textarea = null; let myself = localStorage.getItem("myself") == null ? null : JSON.parse(localStorage.getItem("myself")); let inviteText = "Check this new website I found, https://yocail.com\r\n\r\nYou can post your pictures here, connect with people."; if (myself !== null) { inviteText = inviteText + "\r\n\r\nMy profile on Yocail is https://yocail.com/profile?un=" + myself.userName } this.state = { loading: false, loggedin: loggedin, success: '', error: '', token: localStorage.getItem("token") == null ? '' : localStorage.getItem("token"), showModal: false, text: inviteText } } renderModal() { if (this.state.showModal) { return React.createElement(React.Fragment, null, React.createElement("div", { className: "modal fade show d-block", tabIndex: "-1", "aria-hidden": "true" }, React.createElement("div", { className: "modal-dialog modal-dialog-centered modal-dialog-scrollable modal-lg" }, React.createElement("div", { className: "modal-content" }, React.createElement("div", { className: "modal-header" }, React.createElement("h1", { className: "modal-title fs-5", id: "exampleModalLabel" }, "Spread The Word"), React.createElement("button", { type: "button", className: "btn-close", onClick: () => { this.setState({ showModal: false }) }, "aria-label": "Close" })), React.createElement("div", { className: "modal-body" }, React.createElement("textarea", { ref: el => { this.textarea = el }, rows: "7", className: "form-control border shadow-none", value: this.state.text, onChange: e => { this.setState({ text: e.target.value }) } }), React.createElement("p", { className: "pt-3 fw-lighter lh-base fs-6 p-2" }, "You can use this text to invite your friends to yocail.", React.createElement("br", null), " Share this text over whatsapp or email."), this.state.success !== "" ? React.createElement("div", { className: "text-success my-1" }, this.state.success) : null), React.createElement("div", { className: "modal-footer" }, React.createElement("button", { type: "button", className: "btn btn-blue me-2", onClick: this.copyInviteText }, "Copy Invite Text"))))), React.createElement("div", { className: "modal-backdrop fade show" })) } else { return null } } render() { if (this.state.loggedin) { return React.createElement(React.Fragment, null, React.createElement("div", { className: "text-center p-3 py-2 border rounded-4" }, React.createElement("h4", { className: "text-primary my-3 fs-24 ff-righteous" }, "Invite a Friend"), React.createElement("div", { className: "my-1 lh-base fs-20 mb-4" }, "Invite your friends and build", React.createElement("br", null), " your followers."), React.createElement("button", { onClick: () => { this.setState({ showModal: true }) }, type: "button", className: "btn btn-blue" }, "Invite ", React.createElement("i", { class: "ms-2 bi bi-send-fill" }))), this.renderModal()) } else { return null } } } class AutoAdjustTextArea extends React.Component { constructor(props) { super(props); _defineProperty(this, "valueChanged", val => { let newlines = val.split("\n").length; if (newlines > this.state.maxRows) { newlines = this.state.maxRows } else if (newlines < this.state.minRows) { newlines = this.state.minRows } this.setState({ value: val, rows: newlines }, () => { this.props.onChange(this.state.value) }) }); this.state = { cssclass: this.props.cssclass, htmlattr: this.props.htmlattr, maxlength: this.props.maxlength, value: this.props.value, rows: this.props.minRows, maxRows: this.props.maxRows, minRows: this.props.minRows } } componentWillReceiveProps(nextProps) { if (nextProps.value !== this.state.value) { this.setState({ value: nextProps.value }) } } render() { return React.createElement("textarea", _extends({ maxLength: this.state.maxlength }, this.state.htmlattr, { rows: this.state.rows, className: this.props.cssclass, value: this.state.value, onChange: e => { this.valueChanged(e.target.value) } })) } } class UserInfo { constructor() { _defineProperty(this, "memberID", void 0); _defineProperty(this, "connectionID", void 0); _defineProperty(this, "name", void 0); _defineProperty(this, "lastpulse", void 0); _defineProperty(this, "videoCapable", void 0); _defineProperty(this, "peerCapable", void 0); _defineProperty(this, "stream", void 0); _defineProperty(this, "pic", void 0); _defineProperty(this, "bio", void 0); this.memberID = "00000000-0000-0000-0000-000000000000"; this.connectionID = ""; this.name = ""; this.lastpulse = Date.now(); this.videoCapable = true; this.peerCapable = true; this.stream = null; this.pic = "" } isAlive() { var dt = new Date(this.lastpulse); dt.setSeconds(dt.getSeconds() + 40); if (dt < Date.now()) { return false } else { return true } } } var MessageEnum = { Text: 1, MemberAdd: 2, MemberLeave: 3, File: 4 }; var BoloRelationType = { Temporary: 1, Confirmed: 2, Search: 3, Blocked: 4 }; var MessageStatusEnum = { notify: 0, inqueue: 1, inprogress: 2, ready: 5, sent: 3, error: 4 }; class MessageInfo { constructor() { _defineProperty(this, "sender", void 0); _defineProperty(this, "timeStamp", void 0); _defineProperty(this, "type", void 0); _defineProperty(this, "text", void 0); _defineProperty(this, "status", void 0); _defineProperty(this, "progresspercent", void 0); _defineProperty(this, "file", void 0); this.progresspercent = 0; this.status = MessageStatusEnum.inprogress; this.file = null } }